FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 05 69 LJMP  _ADCINC_ADConversion_ISR(0153)     ljmp	_ADCINC_ADConversion_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 03 13 LJMP  _UART_TX_ISR       (0157)     ljmp	_UART_TX_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 03 14 LJMP  _UART_RX_ISR       (0161)     ljmp	_UART_RX_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 83 MOV   REG[0xE3],0x83     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 C6    MOV   A,0xC6             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [iData+84],0x0     (0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [iData+85],0x0     (0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 02 B2 LCALL 0x02B2             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 10 1C MOV   [__r0|xn1_1],0x1C  (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 10 B5 CMP   [__r0|xn1_1],0xB5  (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 10    MVI   [__r0|xn1_1],A     (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 01    MOV   A,0x1              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 EB    MOV   X,0xEB             (0368)     mov  X,<__idata_start
00AC: 55 10 00 MOV   [__r0|xn1_1],0x0   (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 10 02 CMP   [__r0|xn1_1],0x2   (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 10    MVI   [__r0|xn1_1],A     (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 02 MOV   REG[0xE0],0x2      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 12 10 LCALL _main              (0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
01ED: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_test2_Bank1
                                        (0019) export LoadConfigTBL_test2_Bank0
                                        (0020) export LoadConfigTBL_test2_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_test2_Bank0:
                                        (0023) ;  Instance name ADCINC, User Module ADCINC
                                        (0024) ;       Instance name ADCINC, Block Name ADC1(ASC10)
                                        (0025) 	db		80h, 88h		;ADCINC_AtoD1cr0(ASC10CR0)
                                        (0026) 	db		81h, 00h		;ADCINC_AtoD1cr1(ASC10CR1)
                                        (0027) 	db		82h, 20h		;ADCINC_AtoD1cr2(ASC10CR2)
                                        (0028) 	db		83h, f0h		;ADCINC_AtoD1cr3(ASC10CR3)
                                        (0029) ;       Instance name ADCINC, Block Name ADC2(ASD20)
                                        (0030) 	db		90h, 90h		;ADCINC_AtoD2cr0(ASD20CR0)
                                        (0031) 	db		91h, 00h		;ADCINC_AtoD2cr1(ASD20CR1)
                                        (0032) 	db		92h, 60h		;ADCINC_AtoD2cr2(ASD20CR2)
                                        (0033) 	db		93h, f0h		;ADCINC_AtoD2cr3(ASD20CR3)
                                        (0034) ;       Instance name ADCINC, Block Name PWM(DBB01)
                                        (0035) 	db		27h, 00h		;ADCINC_PWMcr0(DBB01CR0)
                                        (0036) 	db		25h, 00h		;ADCINC_PWMdr1(DBB01DR1)
                                        (0037) 	db		26h, 01h		;ADCINC_PWMdr2(DBB01DR2)
                                        (0038) ;  Instance name LED, User Module LED
                                        (0039) ;  Instance name PGA_1, User Module PGA
                                        (0040) ;       Instance name PGA_1, Block Name GAIN(ACB00)
                                        (0041) 	db		71h, feh		;PGA_1_GAIN_CR0(ACB00CR0)
                                        (0042) 	db		72h, a1h		;PGA_1_GAIN_CR1(ACB00CR1)
                                        (0043) 	db		73h, 20h		;PGA_1_GAIN_CR2(ACB00CR2)
                                        (0044) 	db		70h, 00h		;PGA_1_GAIN_CR3(ACB00CR3)
                                        (0045) ;  Instance name UART, User Module UART
                                        (0046) ;       Instance name UART, Block Name RX(DCB03)
                                        (0047) 	db		2fh, 00h		;UART_RX_CONTROL_REG(DCB03CR0)
                                        (0048) 	db		2dh, 00h		;UART_(DCB03DR1)
                                        (0049) 	db		2eh, 00h		;UART_RX_BUFFER_REG (DCB03DR2)
                                        (0050) ;       Instance name UART, Block Name TX(DCB02)
                                        (0051) 	db		2bh, 00h		;UART_TX_CONTROL_REG(DCB02CR0)
                                        (0052) 	db		29h, 00h		;UART_TX_BUFFER_REG (DCB02DR1)
                                        (0053) 	db		2ah, 00h		;UART_(DCB02DR2)
                                        (0054) ;  Global Register values Bank 0
                                        (0055) 	db		60h, 08h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0056) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0057) 	db		63h, 17h		; AnalogReferenceControl register (ARF_CR)
                                        (0058) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0059) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0060) 	db		e7h, 01h		; DecimatorControl_1 register (DEC_CR1)
                                        (0061) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0062) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0063) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0064) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0065) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0066) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0067) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0068) 	db		b6h, 20h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0069) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0070) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0071) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0072) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0073) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0074) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0075) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0076) 	db		ffh
                                        (0077) LoadConfigTBL_test2_Bank1:
                                        (0078) ;  Instance name ADCINC, User Module ADCINC
                                        (0079) ;       Instance name ADCINC, Block Name ADC1(ASC10)
                                        (0080) ;       Instance name ADCINC, Block Name ADC2(ASD20)
                                        (0081) ;       Instance name ADCINC, Block Name PWM(DBB01)
                                        (0082) 	db		24h, 31h		;ADCINC_PWMfn(DBB01FN)
                                        (0083) 	db		25h, 15h		;ADCINC_PWMsl(DBB01IN)
                                        (0084) 	db		26h, 40h		;ADCINC_PWMos(DBB01OU)
                                        (0085) ;  Instance name LED, User Module LED
                                        (0086) ;  Instance name PGA_1, User Module PGA
                                        (0087) ;       Instance name PGA_1, Block Name GAIN(ACB00)
                                        (0088) ;  Instance name UART, User Module UART
                                        (0089) ;       Instance name UART, Block Name RX(DCB03)
                                        (0090) 	db		2ch, 05h		;UART_RX_FUNC_REG   (DCB03FN)
                                        (0091) 	db		2dh, f1h		;UART_RX_INPUT_REG  (DCB03IN)
                                        (0092) 	db		2eh, 40h		;UART_RX_OUTPUT_REG (DCB03OU)
                                        (0093) ;       Instance name UART, Block Name TX(DCB02)
                                        (0094) 	db		28h, 1dh		;UART_TX_FUNC_REG   (DCB02FN)
                                        (0095) 	db		29h, 01h		;UART_TX_INPUT_REG  (DCB02IN)
                                        (0096) 	db		2ah, 47h		;UART_TX_OUTPUT_REG (DCB02OU)
                                        (0097) ;  Global Register values Bank 1
                                        (0098) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0099) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0100) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0101) 	db		62h, 08h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0102) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0103) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0104) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0105) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0106) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0107) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0108) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0109) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0110) 	db		e1h, 2fh		; OscillatorControl_1 register (OSC_CR1)
                                        (0111) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0112) 	db		dfh, 9bh		; OscillatorControl_3 register (OSC_CR3)
                                        (0113) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0114) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0115) 	db		ffh
                                        (0116) AREA psoc_config(rom, rel)
                                        (0117) LoadConfigTBL_test2_Ordered:
                                        (0118) ;  Ordered Global Register values
                                        (0119) 	M8C_SetBank0
01EF: 62 00 20 MOV   REG[0x0],0x20      (0120) 	mov	reg[00h], 20h		; Port_0_Data register (PRT0DR)
01F2: 71 10    OR    F,0x10             
                                        (0121) 	M8C_SetBank1
01F4: 62 00 A0 MOV   REG[0x0],0xA0      (0122) 	mov	reg[00h], a0h		; Port_0_DriveMode_0 register (PRT0DM0)
01F7: 62 01 7F MOV   REG[0x1],0x7F      (0123) 	mov	reg[01h], 7fh		; Port_0_DriveMode_1 register (PRT0DM1)
01FA: 70 EF    AND   F,0xEF             
                                        (0124) 	M8C_SetBank0
01FC: 62 03 5F MOV   REG[0x3],0x5F      (0125) 	mov	reg[03h], 5fh		; Port_0_DriveMode_2 register (PRT0DM2)
01FF: 62 02 00 MOV   REG[0x2],0x0       (0126) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0202: 71 10    OR    F,0x10             
                                        (0127) 	M8C_SetBank1
0204: 62 02 00 MOV   REG[0x2],0x0       (0128) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0207: 62 03 00 MOV   REG[0x3],0x0       (0129) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
020A: 70 EF    AND   F,0xEF             
                                        (0130) 	M8C_SetBank0
020C: 62 01 00 MOV   REG[0x1],0x0       (0131) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
020F: 62 04 00 MOV   REG[0x4],0x0       (0132) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0212: 71 10    OR    F,0x10             
                                        (0133) 	M8C_SetBank1
0214: 62 04 00 MOV   REG[0x4],0x0       (0134) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
0217: 62 05 FF MOV   REG[0x5],0xFF      (0135) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
021A: 70 EF    AND   F,0xEF             
                                        (0136) 	M8C_SetBank0
021C: 62 07 FF MOV   REG[0x7],0xFF      (0137) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
021F: 62 06 00 MOV   REG[0x6],0x0       (0138) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0222: 71 10    OR    F,0x10             
                                        (0139) 	M8C_SetBank1
0224: 62 06 00 MOV   REG[0x6],0x0       (0140) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0227: 62 07 00 MOV   REG[0x7],0x0       (0141) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
022A: 70 EF    AND   F,0xEF             
                                        (0142) 	M8C_SetBank0
022C: 62 05 00 MOV   REG[0x5],0x0       (0143) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
022F: 62 08 00 MOV   REG[0x8],0x0       (0144) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0232: 71 10    OR    F,0x10             
                                        (0145) 	M8C_SetBank1
0234: 62 08 00 MOV   REG[0x8],0x0       (0146) 	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
0237: 62 09 FF MOV   REG[0x9],0xFF      (0147) 	mov	reg[09h], ffh		; Port_2_DriveMode_1 register (PRT2DM1)
023A: 70 EF    AND   F,0xEF             
                                        (0148) 	M8C_SetBank0
023C: 62 0B F7 MOV   REG[0xB],0xF7      (0149) 	mov	reg[0bh], f7h		; Port_2_DriveMode_2 register (PRT2DM2)
023F: 62 0A 08 MOV   REG[0xA],0x8       (0150) 	mov	reg[0ah], 08h		; Port_2_GlobalSelect register (PRT2GS)
0242: 71 10    OR    F,0x10             
                                        (0151) 	M8C_SetBank1
0244: 62 0A 00 MOV   REG[0xA],0x0       (0152) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0247: 62 0B 00 MOV   REG[0xB],0x0       (0153) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
024A: 70 EF    AND   F,0xEF             
                                        (0154) 	M8C_SetBank0
024C: 62 09 00 MOV   REG[0x9],0x0       (0155) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
024F: 62 0C 00 MOV   REG[0xC],0x0       (0156) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0252: 71 10    OR    F,0x10             
                                        (0157) 	M8C_SetBank1
0254: 62 0C 00 MOV   REG[0xC],0x0       (0158) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0257: 62 0D 00 MOV   REG[0xD],0x0       (0159) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
025A: 70 EF    AND   F,0xEF             
                                        (0160) 	M8C_SetBank0
025C: 62 0F 00 MOV   REG[0xF],0x0       (0161) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
025F: 62 0E 00 MOV   REG[0xE],0x0       (0162) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0262: 71 10    OR    F,0x10             
                                        (0163) 	M8C_SetBank1
0264: 62 0E 00 MOV   REG[0xE],0x0       (0164) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0267: 62 0F 00 MOV   REG[0xF],0x0       (0165) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
026A: 70 EF    AND   F,0xEF             
                                        (0166) 	M8C_SetBank0
026C: 62 0D 00 MOV   REG[0xD],0x0       (0167) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
026F: 62 10 00 MOV   REG[0x10],0x0      (0168) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0272: 71 10    OR    F,0x10             
                                        (0169) 	M8C_SetBank1
0274: 62 10 00 MOV   REG[0x10],0x0      (0170) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0277: 62 11 00 MOV   REG[0x11],0x0      (0171) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
027A: 70 EF    AND   F,0xEF             
                                        (0172) 	M8C_SetBank0
027C: 62 13 00 MOV   REG[0x13],0x0      (0173) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
027F: 62 12 00 MOV   REG[0x12],0x0      (0174) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0282: 71 10    OR    F,0x10             
                                        (0175) 	M8C_SetBank1
0284: 62 12 00 MOV   REG[0x12],0x0      (0176) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0287: 62 13 00 MOV   REG[0x13],0x0      (0177) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
028A: 70 EF    AND   F,0xEF             
                                        (0178) 	M8C_SetBank0
028C: 62 11 00 MOV   REG[0x11],0x0      (0179) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
028F: 62 14 00 MOV   REG[0x14],0x0      (0180) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0292: 71 10    OR    F,0x10             
                                        (0181) 	M8C_SetBank1
0294: 62 14 00 MOV   REG[0x14],0x0      (0182) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0297: 62 15 00 MOV   REG[0x15],0x0      (0183) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
029A: 70 EF    AND   F,0xEF             
                                        (0184) 	M8C_SetBank0
029C: 62 17 00 MOV   REG[0x17],0x0      (0185) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
029F: 62 16 00 MOV   REG[0x16],0x0      (0186) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02A2: 71 10    OR    F,0x10             
                                        (0187) 	M8C_SetBank1
02A4: 62 16 00 MOV   REG[0x16],0x0      (0188) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02A7: 62 17 00 MOV   REG[0x17],0x0      (0189) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02AA: 70 EF    AND   F,0xEF             
                                        (0190) 	M8C_SetBank0
02AC: 62 15 00 MOV   REG[0x15],0x0      (0191) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02AF: 70 EF    AND   F,0xEF             
                                        (0192) 	M8C_SetBank0
02B1: 7F       RET                      (0193) 	ret
                                        (0194) 
                                        (0195) 
                                        (0196) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_test2
                                        (0026) export _LoadConfig_test2
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) 
                                        (0030) 
                                        (0031) export NO_SHADOW
                                        (0032) export _NO_SHADOW
                                        (0033) 
                                        (0034) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0035) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0036) 
                                        (0037) AREA psoc_config(rom, rel)
                                        (0038) 
                                        (0039) ;---------------------------------------------------------------------------
                                        (0040) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0041) ;                  parameters handled by boot code, like CPU speed). This
                                        (0042) ;                  function can be called from user code, but typically it
                                        (0043) ;                  is only called from boot.
                                        (0044) ;
                                        (0045) ;       INPUTS: None.
                                        (0046) ;      RETURNS: Nothing.
                                        (0047) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0048) ;               In the large memory model currently only the page
                                        (0049) ;               pointer registers listed below are modified.  This does
                                        (0050) ;               not guarantee that in future implementations of this
                                        (0051) ;               function other page pointer registers will not be
                                        (0052) ;               modified.
                                        (0053) ;          
                                        (0054) ;               Page Pointer Registers Modified: 
                                        (0055) ;               CUR_PP
                                        (0056) ;
                                        (0057) _LoadConfigInit:
                                        (0058)  LoadConfigInit:
                                        (0059)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0060)     
02B2: 55 13 20 MOV   [0x13],0x20        (0061) 	mov		[Port_0_Data_SHADE], 20h
                                        (0062) 
02B5: 7C 02 BC LCALL 0x02BC             (0063) 	lcall	LoadConfig_test2
02B8: 7C 01 ED LCALL 0x01ED             (0064) 	lcall	LoadConfigTBL_test2_Ordered
                                        (0065) 
                                        (0066) 
                                        (0067)     RAM_EPILOGUE RAM_USE_CLASS_4
02BB: 7F       RET                      (0068)     ret
                                        (0069) 
                                        (0070) ;---------------------------------------------------------------------------
                                        (0071) ; Load Configuration test2
                                        (0072) ;
                                        (0073) ;    Load configuration registers for test2.
                                        (0074) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0075) ;
                                        (0076) ;       INPUTS: None.
                                        (0077) ;      RETURNS: Nothing.
                                        (0078) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0079) ;               modified as may the Page Pointer registers!
                                        (0080) ;               In the large memory model currently only the page
                                        (0081) ;               pointer registers listed below are modified.  This does
                                        (0082) ;               not guarantee that in future implementations of this
                                        (0083) ;               function other page pointer registers will not be
                                        (0084) ;               modified.
                                        (0085) ;          
                                        (0086) ;               Page Pointer Registers Modified: 
                                        (0087) ;               CUR_PP
                                        (0088) ;
                                        (0089) _LoadConfig_test2:
                                        (0090)  LoadConfig_test2:
                                        (0091)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0092) 
02BC: 10       PUSH  X                  (0093) 	push	x
02BD: 70 EF    AND   F,0xEF             
                                        (0094)     M8C_SetBank0                    ; Force bank 0
02BF: 50 00    MOV   A,0x0              (0095)     mov     a, 0                    ; Specify bank 0
02C1: 67       ASR   A                  (0096)     asr     a                       ; Store in carry flag
                                        (0097)                                     ; Load bank 0 table:
02C2: 50 01    MOV   A,0x1              (0098)     mov     A, >LoadConfigTBL_test2_Bank0
02C4: 57 61    MOV   X,0x61             (0099)     mov     X, <LoadConfigTBL_test2_Bank0
02C6: 7C 02 D7 LCALL 0x02D7             (0100)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0101) 
02C9: 50 01    MOV   A,0x1              (0102)     mov     a, 1                    ; Specify bank 1
02CB: 67       ASR   A                  (0103)     asr     a                       ; Store in carry flag
                                        (0104)                                     ; Load bank 1 table:
02CC: 50 01    MOV   A,0x1              (0105)     mov     A, >LoadConfigTBL_test2_Bank1
02CE: 57 B6    MOV   X,0xB6             (0106)     mov     X, <LoadConfigTBL_test2_Bank1
02D0: 7C 02 D7 LCALL 0x02D7             (0107)     lcall   LoadConfig              ; Load the bank 1 values
02D3: 70 EF    AND   F,0xEF             
                                        (0108) 
                                        (0109)     M8C_SetBank0                    ; Force return to bank 0
02D5: 20       POP   X                  (0110) 	pop		x
                                        (0111) 
                                        (0112)     RAM_EPILOGUE RAM_USE_CLASS_4
02D6: 7F       RET                      (0113)     ret
                                        (0114) 
                                        (0115) 
                                        (0116) 
                                        (0117) 
                                        (0118) ;---------------------------------------------------------------------------
                                        (0119) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0120) ;              pairs. Terminate on address=0xFF.
                                        (0121) ;
                                        (0122) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0123) ;           Flag Register Carry bit encodes the Register Bank
                                        (0124) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0125) ;
                                        (0126) ;  RETURNS: nothing.
                                        (0127) ;
                                        (0128) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0129) ;                X-3 Temporary store for register address
                                        (0130) ;                X-2 LSB of config table address
                                        (0131) ;                X-1 MSB of config table address
                                        (0132) ;
                                        (0133) LoadConfig:
                                        (0134)     RAM_PROLOGUE RAM_USE_CLASS_2
02D7: 38 02    ADD   SP,0x2             (0135)     add     SP, 2                   ; Set up local vars
02D9: 10       PUSH  X                  (0136)     push    X                       ; Save config table address on stack
02DA: 08       PUSH  A                  (0137)     push    A
02DB: 4F       MOV   X,SP               (0138)     mov     X, SP
02DC: 56 FC 00 MOV   [X-4],0x0          (0139)     mov     [X-4], 0                ; Set default Destination to Bank 0
02DF: D0 04    JNC   0x02E4             (0140)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
02E1: 56 FC 01 MOV   [X-4],0x1          (0141)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0142) .BankSelectSaved:
02E4: 18       POP   A                  (0143)     pop     A
02E5: 20       POP   X                  (0144)     pop     X
02E6: 70 EF    AND   F,0xEF             
02E8: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0145) 
                                        (0146) LoadConfigLp:
                                        (0147)     M8C_SetBank0                    ; Switch to bank 0
                                        (0148)     M8C_ClearWDT                    ; Clear the watchdog for long inits
02EB: 10       PUSH  X                  (0149)     push    X                       ; Preserve the config table address
02EC: 08       PUSH  A                  (0150)     push    A
02ED: 28       ROMX                     (0151)     romx                            ; Load register address from table
02EE: 39 FF    CMP   A,0xFF             (0152)     cmp     A, END_CONFIG_TABLE     ; End of table?
02F0: A0 1F    JZ    0x0310             (0153)     jz      EndLoadConfig           ;   Yes, go wrap it up
02F2: 4F       MOV   X,SP               (0154)     mov     X, SP                   ;
02F3: 48 FC 01 TST   [X-4],0x1          (0155)     tst     [X-4], 1                ; Loading IO Bank 1?
02F6: A0 03    JZ    0x02FA             (0156)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
02F8: 71 10    OR    F,0x10             
                                        (0157)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0158) .IOBankNowSet:
02FA: 54 FD    MOV   [X-3],A            (0159)     mov     [X-3], A                ; Stash the register address
02FC: 18       POP   A                  (0160)     pop     A                       ; Retrieve the table address
02FD: 20       POP   X                  (0161)     pop     X
02FE: 75       INC   X                  (0162)     inc     X                       ; Advance to the data byte
02FF: 09 00    ADC   A,0x0              (0163)     adc     A, 0
0301: 10       PUSH  X                  (0164)     push    X                       ; Save the config table address again
0302: 08       PUSH  A                  (0165)     push    A
0303: 28       ROMX                     (0166)     romx                            ; load config data from the table
0304: 4F       MOV   X,SP               (0167)     mov     X, SP                   ; retrieve the register address
0305: 59 FD    MOV   X,[X-3]            (0168)     mov     X, [X-3]
0307: 61 00    MOV   REG[X+0x0],A       (0169)     mov     reg[X], A               ; Configure the register
0309: 18       POP   A                  (0170)     pop     A                       ; retrieve the table address
030A: 20       POP   X                  (0171)     pop     X
030B: 75       INC   X                  (0172)     inc     X                       ; advance to next table entry
030C: 09 00    ADC   A,0x0              (0173)     adc     A, 0
030E: 8F D7    JMP   0x02E6             (0174)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0175) EndLoadConfig:
0310: 38 FC    ADD   SP,0xFC            (0176)     add     SP, -4
                                        (0177)     RAM_EPILOGUE RAM_USE_CLASS_2
0312: 7F       RET                      (0178)     ret
                                        (0179) 
                                        (0180) AREA InterruptRAM(ram, rel)
                                        (0181) 
                                        (0182) NO_SHADOW:
                                        (0183) _NO_SHADOW:
                                        (0184) ; write only register shadows
                                        (0185) _Port_0_Data_SHADE:
                                        (0186) Port_0_Data_SHADE:	BLK	1
                                        (0187) 
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2014/7/14 at 8:16:55
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    ;@PSoC_UserCode_END@ (Do not change this line.)
0313: 7E       RETI                     (0101)    reti
                                        (0102) 
                                        (0103) 
                                        (0104) ;-----------------------------------------------------------------------------
                                        (0105) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0106) ;
                                        (0107) ;  DESCRIPTION:
                                        (0108) ;     UART RX interrupt handler for instance UART.
                                        (0109) ;     This ISR handles the background processing of received characters if
                                        (0110) ;     the buffer is enabled.
                                        (0111) ;
                                        (0112) ;
                                        (0113) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0114) ;
                                        (0115) ;  SIDE EFFECTS:
                                        (0116) ;     There are 3 posible errors that may occur with the serial port.
                                        (0117) ;      1) Parity Error
                                        (0118) ;      2) Framing Error
                                        (0119) ;      3) OverRun Error
                                        (0120) ;
                                        (0121) ;  This user module check for parity and framing error.  If either of these
                                        (0122) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0123) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0124) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0125) ;  this ISR to set a flag if an error condition occurs.
                                        (0126) ;
                                        (0127) ;  THEORY of OPERATION:
                                        (0128) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0129) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0130) ;     the command terminator is detected, the command bit is set and all other
                                        (0131) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0132) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0133) ;     terminator.  After that, the characters will be discarded, although
                                        (0134) ;     a command determinator will still cause the command bit to be set.
                                        (0135) ;
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) _UART_RX_ISR:
                                        (0138) 
                                        (0139)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0140)    ;---------------------------------------------------
                                        (0141)    ; Insert your custom code below this banner
                                        (0142)    ;---------------------------------------------------
                                        (0143)    ;   NOTE: interrupt service routines must preserve
                                        (0144)    ;   the values of the A and X CPU registers.
                                        (0145) 
                                        (0146)    ;---------------------------------------------------
                                        (0147)    ; Insert your custom code above this banner
                                        (0148)    ;---------------------------------------------------
                                        (0149)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0150) 
                                        (0151) IF (UART_RXBUF_ENABLE)
0314: 08       PUSH  A                  (0152)    push A
0315: 10       PUSH  X                  (0153)    push X
                                        (0154)    
                                        (0155)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0156)       REG_PRESERVE IDX_PP
                                        (0157)    ENDIF
                                        (0158)    
0316: 58 12    MOV   X,[0x12]           (0159)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
0318: 5D 2F    MOV   A,REG[0x2F]        (0160)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
031A: 08       PUSH  A                  (0161)    push A                                                  ; Store copy for later test
                                        (0162)                                                            ; IF real RX interrupt
031B: 21 08    AND   A,0x8              (0163)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
031D: B0 04    JNZ   0x0322             (0164)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
031F: 18       POP   A                  (0165)    pop  A                                                  ; Restore stack
0320: 80 40    JMP   0x0361             (0166)    jmp  .RESTORE_IDX_PP
                                        (0167) 
                                        (0168) .UARTRX_ReadRx:
0322: 18       POP   A                  (0169)    pop  A                                                  ; Restore status flags
                                        (0170)                                                            ; IF there is no error, get data
                                        (0171)                                                            ; Check for parity or framing error
0323: 21 E0    AND   A,0xE0             (0172)    and  A,UART_RX_ERROR
0325: A0 12    JZ    0x0338             (0173)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0174) 
0327: 2C 11    OR    [0x11],A           (0175)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
0329: 49 2E 00 TST   REG[0x2E],0x0      (0176)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
032C: 21 20    AND   A,0x20             (0177)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
032E: A0 32    JZ    0x0361             (0178)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0179) 
                                        (0180)                                                            ; Disable and re-enable RX to reset after
                                        (0181)                                                            ; framing error.
0330: 41 2F FE AND   REG[0x2F],0xFE     (0182)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
0333: 43 2F 01 OR    REG[0x2F],0x1      (0183)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
0336: 80 2A    JMP   0x0361             (0184)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0185) 
                                        (0186) 
                                        (0187) .UARTRX_NO_ERROR:
0338: 5D 2E    MOV   A,REG[0x2E]        (0188)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0189) 
                                        (0190)                                                            ; IF buffer not full
033A: 47 11 01 TST   [0x11],0x1         (0191)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
033D: B0 23    JNZ   0x0361             (0192)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0193) 
033F: 39 0D    CMP   A,0xD              (0194)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
0341: B0 09    JNZ   0x034B             (0195)    jnz  .UARTRX_CHK_BACKSPACE
0343: 2E 11 01 OR    [0x11],0x1         (0196)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0197) 
                                        (0198) 
                                        (0199) 
                                        (0200)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0201)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0346: 56 B5 00 MOV   [X-75],0x0         (0202)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0203)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0349: 80 17    JMP   0x0361             (0204)    jmp  .RESTORE_IDX_PP
                                        (0205) 
                                        (0206) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0207) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0208)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0209)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0210)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0211)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0212)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0213)    jmp  .RESTORE_IDX_PP
                                        (0214) ENDIF                                                      ; 
                                        (0215) 
                                        (0216) .UARTRX_IGNORE:
                                        (0217) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
034B: 39 20    CMP   A,0x20             (0218)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
034D: C0 13    JC    0x0361             (0219)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0220) ENDIF
                                        (0221) 
                                        (0222) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0223) 	
                                        (0224)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
034F: 3C 12 0F CMP   [0x12],0xF         (0225)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
0352: C0 09    JC    0x035C             (0226)    jc   .UARTRX_ISR_GETDATA
                                        (0227)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0354: 56 B5 00 MOV   [X-75],0x0         (0228)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0357: 2E 11 10 OR    [0x11],0x10        (0230)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
035A: 80 06    JMP   0x0361             (0231)    jmp  .RESTORE_IDX_PP
                                        (0232) 
                                        (0233) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0234)                                                            ; X is already loaded with pointer
                                        (0235)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
035C: 54 B5    MOV   [X-75],A           (0236)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0237)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
035E: 75       INC   X                  (0238)    inc  X                                                  ; Inc the pointer
035F: 5A 12    MOV   [0x12],X           (0239)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0240)                                                            ; ENDIF max string size
                                        (0241) .RESTORE_IDX_PP:
                                        (0242)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0243)       REG_RESTORE IDX_PP
                                        (0244)    ENDIF
                                        (0245) 
                                        (0246) .END_UARTRX_ISR:
0361: 20       POP   X                  (0247)    pop  X
0362: 18       POP   A                  (0248)    pop  A
                                        (0249) 
                                        (0250) ENDIF
                                        (0251) 
                                        (0252) UART_RX_ISR_END:
0363: 7E       RETI                     (0253)    reti
                                        (0254) 
                                        (0255) ; end of file UARTINT.asm
                                        (0256) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
0364: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
0367: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2014/7/14 at 8:16:55
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
036A: 7F       RET                      (0182)    ret
036B: 41 E1 FB AND   REG[0xE1],0xFB     
036E: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
0371: 7F       RET                      (0214)    ret
0372: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
0374: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
0376: A0 07    JZ    0x037E             (0249)    jz    .SetModeRegEmpty
0378: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
037B: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
037D: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
037E: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
0381: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
0383: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
0384: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
0386: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
0388: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
038A: 91 0E    CALL  _UART_CmdReset     (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
038C: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
038D: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
0390: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
0393: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
0394: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
0396: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
0397: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
0399: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
039A: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
039C: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
039D: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
039F: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
03A0: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
03A2: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
03A4: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
03A6: A0 06    JZ    0x03AD             (0492)    jz   .SetTxCmpMode
                                        (0493) 
03A8: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
03AB: 80 04    JMP   0x03B0             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
03AD: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
03B0: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
03B2: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
03B3: 08       PUSH  A                  (0536)    push A
03B4: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
03B6: A0 06    JZ    0x03BD             (0538)    jz   .DisRxInt
03B8: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
03BB: 80 04    JMP   0x03C0             (0541)    jmp  .CheckTxInt
03BD: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
03C0: 18       POP   A                  (0547)    pop  A
03C1: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
03C3: A0 06    JZ    0x03CA             (0549)    jz   .DisTxInt
03C5: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
03C8: 80 04    JMP   0x03CD             (0552)    jmp  .End_IntCntl
03CA: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
03CD: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
03DE: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
03DF: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
03E0: 67       ASR   A                  (0603)    asr   A
03E1: 67       ASR   A                  (0604)    asr   A
03E2: 67       ASR   A                  (0605)    asr   A
03E3: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
03E5: FF E7    INDEX 0x03CE             (0607)    index UART_HEX_STR                  ; Get Hex value
03E7: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
03E9: 18       POP   A                  (0609)    pop   A                             ; Restore value
03EA: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
03EC: FF E0    INDEX 0x03CE             (0611)    index UART_HEX_STR                  ; Get Hex value
03EE: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
03F0: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
03F1: 4B       SWAP  A,X                (0645)    swap  A,X
03F2: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
03F4: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
03F5: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
03F7: 7F       RET                      (0650)    ret
03F8: 49 2B 10 TST   REG[0x2B],0x10     
03FB: AF FC    JZ    _UART_PutChar      
03FD: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
03FF: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
0400: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
0403: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
0405: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
0407: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
0408: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
040A: 08       PUSH  A                  (0756)    push A
040B: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
040D: B0 04    JNZ   0x0412             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
040F: 18       POP   A                  (0759)    pop  A
0410: 80 0B    JMP   0x041C             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
0412: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
0414: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
0415: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
0416: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
0418: B0 03    JNZ   0x041C             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
041A: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
041B: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
041C: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
041E: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
041F: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
0421: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
0423: 08       PUSH  A                  (0819)    push A
0424: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0426: B0 07    JNZ   0x042E             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
0428: 18       POP   A                  (0822)    pop  A
0429: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
042B: 4B       SWAP  A,X                (0824)    swap A,X
042C: 80 07    JMP   0x0434             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
042E: 18       POP   A                  (0828)    pop  A
042F: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
0431: 4B       SWAP  A,X                (0830)    swap A,X
0432: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
0434: 7F       RET                      (0836)    ret
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
0435: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
0437: A0 06    JZ    0x043E             (0872)    jz    End_PutString                           ; Check for end of string
0439: 9F BD    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
043B: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
043C: 8F F8    JMP   _UART_PutString    (0875)    jmp   .PutStringLoop                          ; Get next character
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
043E: 7F       RET                      (0879)    ret
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
043F: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
0440: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0442: A0 13    JZ    0x0456             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
0444: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
0446: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
0448: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
044A: 49 2B 10 TST   REG[0x2B],0x10     
044D: AF FC    JZ    0x044A             
044F: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
0451: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
0452: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
0454: 8F EB    JMP   0x0440             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
0456: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
0457: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
0458: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
045B: B0 06    JNZ   0x0462             (0980)    jnz   .CW_WRITEIT
045D: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
0460: A0 1D    JZ    0x047E             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
0462: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
0463: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
0465: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
0467: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
0468: 49 2B 10 TST   REG[0x2B],0x10     
046B: AF FC    JZ    0x0468             
046D: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
046F: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
0470: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
0473: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
0476: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
0479: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
047C: 8F DB    JMP   0x0458             (0995)    jmp   .CW_Loop
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
047E: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
047F: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
0480: 10       PUSH  X                  (1030)    push  X
0481: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
0482: A0 0B    JZ    0x048E             (1032)    jz    .End_CPutString
0484: 9F 72    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
0486: 20       POP   X                  (1034)    pop   X
0487: 18       POP   A                  (1035)    pop   A
0488: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
0489: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
048B: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
048C: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
048E: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
0490: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
0491: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
0493: 9F 63    CALL  _UART_PutChar      (1074)    call UART_PutChar
0495: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
0497: 9F 5F    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
0499: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
049A: 55 B5 00 MOV   [iData+17],0x0     (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
049D: 55 12 00 MOV   [0x12],0x0         (1124)    mov [UART_bRxCnt], 0x00
04A0: 26 11 00 AND   [0x11],0x0         (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
04A3: 55 C5 00 MOV   [iData+33],0x0     (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
04A6: 7F       RET                      (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
04A7: 51 11    MOV   A,[0x11]           (1165)    mov A,  [UART_fStatus]
04A9: 21 01    AND   A,0x1              (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
04AB: 7F       RET                      (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
04AC: 51 11    MOV   A,[0x11]           (1209)    mov A,  [UART_fStatus]
04AE: 21 F0    AND   A,0xF0             (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
04B0: 26 11 0F AND   [0x11],0xF         (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
04B3: 7F       RET                      (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
04B4: 51 12    MOV   A,[0x12]           (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
04B6: 7F       RET                      (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
04B7: 50 B5    MOV   A,0xB5             (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
04B9: 02 C5    ADD   A,[iData+33]       (1305)    add   A, [ptrParam]                      ; Add string offset
04BB: 5C       MOV   X,A                (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
04BC: 52 00    MOV   A,[X+0]            (1308)    mov   A, [X]                             ; Get character pointed by X
04BE: B0 04    JNZ   0x04C3             (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
04C0: 10       PUSH  X                  (1310)    push  X                                  ;       Yes, Save LSB of current pointer
04C1: 80 33    JMP   0x04F5             (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
04C3: 39 20    CMP   A,0x20             (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
04C5: B0 11    JNZ   0x04D7             (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
04C7: 75       INC   X                  (1317)    inc   X                                  ;   Yes, Increment both index and...
04C8: 76 C5    INC   [iData+33]         (1318)    inc   [ptrParam]                         ;          the stored pointer.
04CA: 52 00    MOV   A,[X+0]            (1319)    mov   A, [X]                             ; Get character pointed by X
04CC: 3C C5 0F CMP   [iData+33],0xF     (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
04CF: BF F3    JNZ   0x04C3             (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
04D1: 10       PUSH  X                  (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
04D2: 56 00 00 MOV   [X+0],0x0          (1326)    mov   [X], 0x00                          ; Make sure string is zero
04D5: 80 1F    JMP   0x04F5             (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
04D7: 10       PUSH  X                  (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
04D8: 75       INC   X                  (1333)    inc   X                                  ; Advance pointers.
04D9: 76 C5    INC   [iData+33]         (1334)    inc   [ptrParam]
04DB: 3C C5 0F CMP   [iData+33],0xF     (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
04DE: AF F3    JZ    0x04D2             (1336)    jz    .TerminateString
04E0: 52 00    MOV   A,[X+0]            (1337)    mov   A, [X]                             ; Get next character
04E2: A0 12    JZ    0x04F5             (1338)    jz    .End_GetNextParam
04E4: 39 20    CMP   A,0x20             (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
04E6: BF F1    JNZ   0x04D8             (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
04E8: 56 00 00 MOV   [X+0],0x0          (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
04EB: 76 C5    INC   [iData+33]         (1342)    inc   [ptrParam]
04ED: 3C C5 0F CMP   [iData+33],0xF     (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
04F0: B0 04    JNZ   0x04F5             (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
04F2: 55 C5 0F MOV   [iData+33],0xF     (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
04F5: 20       POP   X                  (1348)    pop   X
04F6: 10       PUSH  X                  (1349)    push  X
04F7: 3D 00 00 CMP   [X+0],0x0          (1350)    cmp   [X], 0x00
04FA: B0 06    JNZ   0x0501             (1351)    jnz   .NotNullString
04FC: 20       POP   X                  (1352)    pop   X
04FD: 57 00    MOV   X,0x0              (1353)    mov   X, 0x00
04FF: 5B       MOV   A,X                (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
0500: 7F       RET                      (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
0501: 20       POP   X                  (1360)    pop  X
0502: 50 00    MOV   A,0x0              (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
0504: 7F       RET                      (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
0505: 50 B5    MOV   A,0xB5             (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
0507: 02 C5    ADD   A,[iData+33]       (1397)    add  A, [ptrParam]                       ; Add string offset
0509: 5C       MOV   X,A                (1398)    mov  X,A
050A: 50 00    MOV   A,0x0              (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
050C: 7F       RET                      (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\pga_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_1.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2014/7/14 at 8:14:38
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_1.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_1_Start
                                        (0060) export _PGA_1_Start
                                        (0061) export  PGA_1_SetPower
                                        (0062) export _PGA_1_SetPower
                                        (0063) 
                                        (0064) export  PGA_1_SetGain
                                        (0065) export _PGA_1_SetGain
                                        (0066) 
                                        (0067) export  PGA_1_Stop
                                        (0068) export _PGA_1_Stop
                                        (0069) 
                                        (0070) IF (PGA_1_AGNDBUFAPI)
                                        (0071) export  PGA_1_EnableAGNDBuffer
                                        (0072) export _PGA_1_EnableAGNDBuffer
                                        (0073) export  PGA_1_DisableAGNDBuffer
                                        (0074) export _PGA_1_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_1_Start
                                        (0092) ;  FUNCTION NAME: PGA_1_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_1_Start:
                                        (0111) _PGA_1_Start:
                                        (0112)  PGA_1_SetPower:
                                        (0113) _PGA_1_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
050D: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
050F: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
0510: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0511: 5D 73    MOV   A,REG[0x73]        (0120)    mov  A, reg[PGA_1_GAIN_CR2]                             ; read power value
0513: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
0515: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
0517: 60 73    MOV   REG[0x73],A        (0123)    mov  reg[PGA_1_GAIN_CR2], A                        ; move complete value back to register
0519: 18       POP   A                  (0124)    pop  A
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
051A: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_1_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_1_SetGain:
                                        (0154) _PGA_1_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
051B: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
051D: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
051E: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
051F: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[PGA_1_GAIN_CR0]                             ; read mux settings
0521: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
0523: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
0526: B0 0A    JNZ   0x0531             (0164)    jnz  .SETHIGHGAIN
0528: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[PGA_1_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
052B: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
052D: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
052F: 18       POP   A                  (0168)    pop  A
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
0530: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
0531: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
0534: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
0536: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
0538: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[PGA_1_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
053B: 18       POP   A                  (0177)    pop  A
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
053C: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_1_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_1_Stop:
                                        (0203) _PGA_1_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
053D: 41 73 FC AND   REG[0x73],0xFC     (0206)    and REG[PGA_1_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
0540: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_1_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_1_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_1_EnableAGNDBuffer:
                                        (0233) _PGA_1_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_1_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_1_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_1_DisableAGNDBuffer:
                                        (0261) _PGA_1_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_1_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_1.asm
FILE: lib\led.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED.asm
                                        (0004) ;;  Version: 1.40, Updated on 2014/7/14 at 8:14:14
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_Start
                                        (0027) export  LED_Start
                                        (0028) 
                                        (0029) export _LED_Stop
                                        (0030) export  LED_Stop
                                        (0031) 
                                        (0032) export _LED_On
                                        (0033) export  LED_On
                                        (0034) 
                                        (0035) export _LED_Off
                                        (0036) export  LED_Off
                                        (0037) 
                                        (0038) export _LED_Switch
                                        (0039) export  LED_Switch
                                        (0040) 
                                        (0041) export _LED_Invert
                                        (0042) export  LED_Invert
                                        (0043) 
                                        (0044) export _LED_GetState
                                        (0045) export  LED_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_On:
                                        (0079)  LED_On:
0541: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
0543: 80 03    JMP   _LED_Switch        (0081)    jmp  LED_Switch 
                                        (0082) 
                                        (0083) _LED_Start:
                                        (0084)  LED_Start:
                                        (0085) _LED_Stop:
                                        (0086)  LED_Stop:
                                        (0087) _LED_Off:
                                        (0088)  LED_Off:
0545: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _LED_Switch:
                                        (0092)  LED_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0096) 
0547: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
0549: A0 06    JZ    0x0550             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
054B: 2E 13 80 OR    [0x13],0x80        (0102)    or   [Port_0_Data_SHADE],LED_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_0_Data_SHADE],~LED_PinMask
                                        (0105) ENDIF
054E: 80 04    JMP   0x0553             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
0550: 26 13 7F AND   [0x13],0x7F        (0110)    and  [Port_0_Data_SHADE],~LED_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_0_Data_SHADE],LED_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0553: 51 13    MOV   A,[0x13]           (0116)    mov  A,[Port_0_Data_SHADE]
0555: 60 00    MOV   REG[0x0],A         (0117)    mov  reg[LED_PortDR],A
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
0557: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_Invert:
                                        (0144)  LED_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0148) 
0558: 36 13 80 XOR   [0x13],0x80        (0149)    xor  [Port_0_Data_SHADE],LED_PinMask
055B: 51 13    MOV   A,[0x13]           (0150)    mov  A,[Port_0_Data_SHADE]
055D: 60 00    MOV   REG[0x0],A         (0151)    mov  reg[LED_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
055F: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_GetState:
                                        (0177)  LED_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0181) 
0560: 51 13    MOV   A,[0x13]           (0182)    mov   A,[Port_0_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
0562: 21 80    AND   A,0x80             (0188)    and   A,LED_PinMask                 ; Mask off the trash
0564: A0 03    JZ    0x0568             (0189)    jz    .End_LED_GS                   ; If zero, we're done
0566: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
0568: 7F       RET                      (0195)    ret
FILE: lib\adcincint.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINCINT.asm
                                        (0004) ;;  Version: 1.20, Updated on 2014/7/14 at 8:3:53
                                        (0005) ;;
                                        (0006) ;;  DESCRIPTION: Assembler interrupt service routine for the ADCINC
                                        (0007) ;;               A/D Converter User Module. This code works for both the
                                        (0008) ;;               first and second-order modulator topologies.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "ADCINC.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export _ADCINC_ADConversion_ISR
                                        (0024) 
                                        (0025) export _ADCINC_iResult
                                        (0026) export  ADCINC_iResult
                                        (0027) export _ADCINC_fStatus
                                        (0028) export  ADCINC_fStatus
                                        (0029) export _ADCINC_bState
                                        (0030) export  ADCINC_bState
                                        (0031) export _ADCINC_fMode
                                        (0032) export  ADCINC_fMode
                                        (0033) export _ADCINC_bNumSamples
                                        (0034) export  ADCINC_bNumSamples
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM,REL)
                                        (0040)  ADCINC_iResult:
                                        (0041) _ADCINC_iResult:                           BLK  2 ;Calculated answer
                                        (0042)   iTemp:                                   BLK  2 ;internal temp storage
                                        (0043)  ADCINC_fStatus:
                                        (0044) _ADCINC_fStatus:                           BLK  1 ;ADC Status
                                        (0045)  ADCINC_bState:
                                        (0046) _ADCINC_bState:                            BLK  1 ;State value of ADC count
                                        (0047)  ADCINC_fMode:
                                        (0048) _ADCINC_fMode:                             BLK  1 ;Integrate and reset mode.
                                        (0049)  ADCINC_bNumSamples:
                                        (0050) _ADCINC_bNumSamples:                       BLK  1 ;Number of samples to take.
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ;  EQUATES
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0057) ;---------------------------------------------------
                                        (0058) ; Insert your custom declarations below this banner
                                        (0059) ;---------------------------------------------------
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _ADCINC_ADConversion_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION: Perform final filter operations to produce output samples.
                                        (0083) ;
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;
                                        (0086) ;    The decimation rate is established by the PWM interrupt. Four timer
                                        (0087) ;    clocks elapse for each modulator output (decimator input) since the
                                        (0088) ;    phi1/phi2 generator divides by 4. This means the timer period and thus
                                        (0089) ;    it's interrupt must equal 4 times the actual decimation rate.  The
                                        (0090) ;    decimator is ru  for 2^(#bits-6).
                                        (0091) ;
                                        (0092) _ADCINC_ADConversion_ISR:
0569: 7A 19    DEC   [yn1_1+1]          (0093)     dec  [ADCINC_bState]
                                        (0094) if1:
056B: C0 02    JC    0x056E             (0095)     jc endif1 ; no underflow
056D: 7E       RETI                     (0096)     reti
                                        (0097) endif1:
056E: 3C 1A 00 CMP   [yn1_1+2],0x0      (0098)     cmp [ADCINC_fMode],0
                                        (0099) if2: 
0571: B0 12    JNZ   0x0584             (0100)     jnz endif2  ;leaving reset mode
0573: 08       PUSH  A                  (0101)     push A                            ;read decimator
0574: 5D E5    MOV   A,REG[0xE5]        (0102)     mov  A, reg[DEC_DL]
0576: 53 17    MOV   [xn1_2+3],A        (0103)     mov  [iTemp + LowByte],A
0578: 5D E4    MOV   A,REG[0xE4]        (0104)     mov  A, reg[DEC_DH]
057A: 53 16    MOV   [xn1_2+2],A        (0105)     mov  [iTemp + HighByte], A
057C: 18       POP   A                  (0106)     pop A
057D: 55 1A 01 MOV   [yn1_1+2],0x1      (0107)     mov [ADCINC_fMode],1
0580: 55 19 FF MOV   [yn1_1+1],0xFF     (0108)     mov [ADCINC_bState],((1<<(ADCINC_bNUMBITS- 6))-1)
0583: 7E       RETI                     (0109)     reti
0584: 43 82 20 OR    REG[0x82],0x20     
0587: 43 83 10 OR    REG[0x83],0x10     
058A: 43 92 20 OR    REG[0x92],0x20     
058D: 43 93 10 OR    REG[0x93],0x10     
                                        (0110) endif2:
                                        (0111)     ;This code runs at end of integrate
                                        (0112)     ADCINC_RESET_INTEGRATOR_M
0590: 08       PUSH  A                  (0113)     push A
0591: 5D E5    MOV   A,REG[0xE5]        (0114)     mov  A, reg[DEC_DL]
0593: 12 17    SUB   A,[xn1_2+3]        (0115)     sub  A,[iTemp + LowByte]
0595: 53 17    MOV   [xn1_2+3],A        (0116)     mov  [iTemp +LowByte],A
0597: 5D E4    MOV   A,REG[0xE4]        (0117)     mov  A, reg[DEC_DH]
0599: 1A 16    SBB   A,[xn1_2+2]        (0118)     sbb  A,[iTemp + HighByte]
059B: 67       ASR   A                  (0119)     asr  A
059C: 6E 17    RRC   [xn1_2+3]          (0120)     rrc  [iTemp + LowByte]
                                        (0121) 
                                        (0122)        ;Covert to Unipolar
                                        (0123) IF  ADCINC_9_OR_MORE_BITS
059E: 01 20    ADD   A,0x20             (0124)     add  A, (1<<(ADCINC_bNUMBITS - 9))
                                        (0125) ELSE
                                        (0126)     add [iTemp + LowByte], (1<<(ADCINC_bNUMBITS - 1)) ;work on lower Byte
                                        (0127)     adc A,0 
                                        (0128) ENDIF
                                        (0129)        ;check for overflow
                                        (0130) IF     ADCINC_8_OR_MORE_BITS
05A0: 39 40    CMP   A,0x40             (0131)     cmp A,(1<<(ADCINC_bNUMBITS - 8))
                                        (0132) if3: 
05A2: B0 05    JNZ   0x05A8             (0133)     jnz endif3 ;overflow
05A4: 78       DEC   A                  (0134)     dec A
05A5: 55 17 FF MOV   [xn1_2+3],0xFF     (0135)     mov [iTemp + LowByte],ffh
                                        (0136) endif3:
                                        (0137) ELSE
                                        (0138)     cmp [iTemp + LowByte],(1<<(ADCINC_bNUMBITS))
                                        (0139) if4: 
                                        (0140)     jnz endif4 ;overflow
                                        (0141)     dec [iTemp + LowByte]
                                        (0142) endif4:
                                        (0143) ENDIF
                                        (0144) IF ADCINC_SIGNED_DATA
                                        (0145) IF ADCINC_9_OR_MORE_BITS
                                        (0146)     sub A,(1<<(ADCINC_bNUMBITS - 9))
                                        (0147) ELSE
                                        (0148)     sub [iTemp +LowByte],(1<<(ADCINC_bNUMBITS - 1))
                                        (0149)     sbb A,0
                                        (0150) ENDIF
                                        (0151) ENDIF
05A8: 5F 15 17 MOV   [xn1_2+1],[xn1_2+3](0152)     mov  [ADCINC_iResult + LowByte],[iTemp +LowByte]
05AB: 53 14    MOV   [xn1_2],A          (0153)     mov  [ADCINC_iResult + HighByte],A
05AD: 55 18 01 MOV   [yn1_1],0x1        (0154)     mov  [ADCINC_fStatus],1
                                        (0155) ConversionReady:
                                        (0156)     ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0157)     ;---------------------------------------------------
                                        (0158)     ; Insert your custom code below this banner
                                        (0159)     ;---------------------------------------------------
                                        (0160)     ;  Sample data is now in iResult
                                        (0161)     ;
                                        (0162)     ;  NOTE: This interrupt service routine has already
                                        (0163)     ;  preserved the values of the A CPU register. If
                                        (0164)     ;  you need to use the X register you must preserve
                                        (0165)     ;  its value and restore it before the return from
                                        (0166)     ;  interrupt.
                                        (0167)     ;---------------------------------------------------
                                        (0168)     ; Insert your custom code above this banner
                                        (0169)     ;---------------------------------------------------
                                        (0170)     ;@PSoC_UserCode_END@ (Do not change this line.)
05B0: 18       POP   A                  (0171)     pop A
05B1: 3C 1B 00 CMP   [yn1_1+3],0x0      (0172)     cmp [ADCINC_bNumSamples],0
                                        (0173) if5: 
05B4: B0 14    JNZ   0x05C9             (0174)     jnz endif5 ; Number of samples is zero
05B6: 55 1A 00 MOV   [yn1_1+2],0x0      (0175)     mov [ADCINC_fMode],0
05B9: 55 19 00 MOV   [yn1_1+1],0x0      (0176)     mov [ADCINC_bState],0
05BC: 41 83 EF AND   REG[0x83],0xEF     
05BF: 41 82 DF AND   REG[0x82],0xDF     
05C2: 41 93 EF AND   REG[0x93],0xEF     
05C5: 41 92 DF AND   REG[0x92],0xDF     
                                        (0177)     ADCINC_ENABLE_INTEGRATOR_M
05C8: 7E       RETI                     (0178)     reti       
                                        (0179) endif5:
05C9: 7A 1B    DEC   [yn1_1+3]          (0180)     dec [ADCINC_bNumSamples]
                                        (0181) if6:
05CB: A0 14    JZ    0x05E0             (0182)     jz endif6  ; count not zero
05CD: 55 1A 00 MOV   [yn1_1+2],0x0      (0183)     mov [ADCINC_fMode],0
05D0: 55 19 00 MOV   [yn1_1+1],0x0      (0184)     mov [ADCINC_bState],0
05D3: 41 83 EF AND   REG[0x83],0xEF     
05D6: 41 82 DF AND   REG[0x82],0xDF     
05D9: 41 93 EF AND   REG[0x93],0xEF     
05DC: 41 92 DF AND   REG[0x92],0xDF     
                                        (0185)     ADCINC_ENABLE_INTEGRATOR_M
05DF: 7E       RETI                     (0186)     reti       
05E0: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0187) endif6:
                                        (0188)     ;All samples done
                                        (0189)     ADCINC_STOPADC_M
05E3: 7E       RETI                     (0190)  reti 
FILE: lib\adcinc.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINC.asm
                                        (0004) ;;   Version: 1.20, Updated on 2014/7/14 at 8:3:53
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Assembler source for the ADCINC A/D Converter
                                        (0008) ;;               User Module with 2nd-order modulator.
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API
                                        (0014) ;;        function returns. Even though these registers may be preserved now,
                                        (0015) ;;        there is no guarantee they will be preserved in future releases.
                                        (0016) ;;-----------------------------------------------------------------------------
                                        (0017) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0018) ;;*****************************************************************************
                                        (0019) ;;*****************************************************************************
                                        (0020) 
                                        (0021) include "m8c.inc"
                                        (0022) include "memory.inc"
                                        (0023) include "ADCINC.inc"
                                        (0024) 
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  ADCINC_Start
                                        (0030) export _ADCINC_Start
                                        (0031) export  ADCINC_SetPower
                                        (0032) export _ADCINC_SetPower
                                        (0033) export  ADCINC_Stop
                                        (0034) export _ADCINC_Stop
                                        (0035) export  ADCINC_GetSamples
                                        (0036) export _ADCINC_GetSamples
                                        (0037) export  ADCINC_StopADC
                                        (0038) export _ADCINC_StopADC
                                        (0039) export  ADCINC_fIsDataAvailable
                                        (0040) export _ADCINC_fIsDataAvailable
                                        (0041) export  ADCINC_iClearFlagGetData
                                        (0042) export _ADCINC_iClearFlagGetData
                                        (0043) export  ADCINC_wClearFlagGetData
                                        (0044) export _ADCINC_wClearFlagGetData
                                        (0045) export  ADCINC_cClearFlagGetData
                                        (0046) export _ADCINC_cClearFlagGetData
                                        (0047) export  ADCINC_bClearFlagGetData
                                        (0048) export _ADCINC_bClearFlagGetData
                                        (0049) export  ADCINC_iGetData
                                        (0050) export _ADCINC_iGetData
                                        (0051) export  ADCINC_wGetData
                                        (0052) export _ADCINC_wGetData
                                        (0053) export  ADCINC_bGetData
                                        (0054) export _ADCINC_bGetData
                                        (0055) export  ADCINC_cGetData
                                        (0056) export _ADCINC_cGetData
                                        (0057) export  ADCINC_fClearFlag
                                        (0058) export _ADCINC_fClearFlag
                                        (0059) export  ADCINC_WritePulseWidth
                                        (0060) export _ADCINC_WritePulseWidth
                                        (0061) 
                                        (0062) AREA bss (RAM,REL)
                                        (0063) 
                                        (0064) ;-----------------------------------------------
                                        (0065) ;  Constant Definitions
                                        (0066) ;-----------------------------------------------
                                        (0067) 
                                        (0068) ;-----------------------------------------------
                                        (0069) ; Variable Allocation
                                        (0070) ;-----------------------------------------------
                                        (0071) 
                                        (0072) 
                                        (0073) AREA UserModules (ROM, REL)
                                        (0074) 
                                        (0075) .SECTION
                                        (0076) ;-----------------------------------------------------------------------------
                                        (0077) ;  FUNCTION NAME: ADCINC_Start
                                        (0078) ;
                                        (0079) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0080) ;               and starts the PWM
                                        (0081) ;-----------------------------------------------------------------------------
                                        (0082) ;
                                        (0083) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0084) ;  RETURNS:      Nothing.
                                        (0085) ;  SIDE EFFECTS:
                                        (0086) ;    The A and X registers may be modified by this or future implementations
                                        (0087) ;    of this function.  When necessary, it is the calling function's
                                        (0088) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0089) ;    functions.
                                        (0090) ;
                                        (0091)  ADCINC_Start:
                                        (0092) _ADCINC_Start:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_1
05E4: 43 E7 C0 OR    REG[0xE7],0xC0     (0094)    or    reg[DEC_CR1],c0h
05E7: 90 13    CALL  _ADCINC_SetPower   (0095)    call  ADCINC_SetPower
05E9: 43 82 20 OR    REG[0x82],0x20     
05EC: 43 83 10 OR    REG[0x83],0x10     
05EF: 43 92 20 OR    REG[0x92],0x20     
05F2: 43 93 10 OR    REG[0x93],0x10     
                                        (0096)    ADCINC_RESET_INTEGRATOR_M
05F5: 62 25 FF MOV   REG[0x25],0xFF     (0097)    mov   reg[ADCINC_PWMdr1],ffh
05F8: 43 27 01 OR    REG[0x27],0x1      (0098)    or    reg[ADCINC_PWMcr0],01h                      ; start PWM
                                        (0099)    RAM_EPILOGUE RAM_USE_CLASS_1
05FB: 7F       RET                      (0100)  ret
                                        (0101) .ENDSECTION
                                        (0102) 
                                        (0103)    
                                        (0104) .SECTION
                                        (0105) ;-----------------------------------------------------------------------------
                                        (0106) ;  FUNCTION NAME: ADCINC_SetPower
                                        (0107) ;
                                        (0108) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0109) ;-----------------------------------------------------------------------------
                                        (0110) ;
                                        (0111) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0112) ;  RETURNS:      Nothing.
                                        (0113) ;  SIDE EFFECTS:
                                        (0114) ;    The A and X registers may be modified by this or future implementations
                                        (0115) ;    of this function.  When necessary, it is the calling function's
                                        (0116) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0117) ;    functions.
                                        (0118) ;
                                        (0119)  ADCINC_SetPower:
                                        (0120) _ADCINC_SetPower:
                                        (0121)    RAM_PROLOGUE RAM_USE_CLASS_2
05FC: 21 03    AND   A,0x3              (0122)    and  A,03h                                    ; Ensure value is legal
05FE: 08       PUSH  A                  (0123)    push A
05FF: 08       PUSH  A                  (0124)    push A
0600: 4F       MOV   X,SP               (0125)    mov  X,SP                                     ; Set up Stack frame
0601: 5D 83    MOV   A,REG[0x83]        (0126)    mov  A,reg[ADCINC_AtoD1cr3]                   ; First SC block:
0603: 21 FC    AND   A,0xFC             (0127)    and  A,~03h                                   ;   clear power bits to zero
0605: 2D FE    OR    [X-2],A            (0128)    or   [ X - 2 ],A                              ;   save new va;ue on stack
0607: 5D 93    MOV   A,REG[0x93]        (0129)    mov  A,reg[ADCINC_AtoD2cr3]                   ; Second SC block:
0609: 21 FC    AND   A,0xFC             (0130)    and  A,~03h                                   ;   clear power bits to zero
060B: 2D FF    OR    [X-1],A            (0131)    or   [ X - 1 ],A                              ;   save new va;ue on stack
060D: 18       POP   A                  (0132)    pop  A
060E: 60 93    MOV   REG[0x93],A        (0133)    mov  reg[ADCINC_AtoD2cr3],A                   ; Write Second SC block
0610: 18       POP   A                  (0134)    pop  A
0611: 60 83    MOV   REG[0x83],A        (0135)    mov  reg[ADCINC_AtoD1cr3],A                   ; Write First SC block
                                        (0136)    RAM_EPILOGUE RAM_USE_CLASS_2
0613: 7F       RET                      (0137)    ret
0614: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0138) .ENDSECTION
                                        (0139) 
                                        (0140) 
                                        (0141) .SECTION
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;  FUNCTION NAME: ADCINC_Stop
                                        (0144) ;
                                        (0145) ;  DESCRIPTION:   Removes power from the module's analog PSoc block.
                                        (0146) ;                 and turns off PWM
                                        (0147) ;-----------------------------------------------------------------------------
                                        (0148) ;
                                        (0149) ;  ARGUMENTS:     None.
                                        (0150) ;  RETURNS:       Nothing.
                                        (0151) ;  SIDE EFFECTS:
                                        (0152) ;    The A and X registers may be modified by this or future implementations
                                        (0153) ;    of this function.  When necessary, it is the calling function's
                                        (0154) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0155) ;    functions.
                                        (0156) ;
                                        (0157)  ADCINC_Stop:
                                        (0158) _ADCINC_Stop:
                                        (0159)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0160)    ADCINC_STOPADC_M 
0617: 41 83 FC AND   REG[0x83],0xFC     (0161)    and  reg[ADCINC_AtoD1cr3], ~03h
061A: 41 93 FC AND   REG[0x93],0xFC     (0162)    and  reg[ADCINC_AtoD2cr3], ~03h
061D: 41 27 FE AND   REG[0x27],0xFE     (0163)    and  reg[ADCINC_PWMcr0], ~01h ; stop PWM
                                        (0164)    RAM_EPILOGUE RAM_USE_CLASS_1
0620: 7F       RET                      (0165)    ret
0621: 41 83 EF AND   REG[0x83],0xEF     
0624: 41 82 DF AND   REG[0x82],0xDF     
0627: 41 93 EF AND   REG[0x93],0xEF     
062A: 41 92 DF AND   REG[0x92],0xDF     
                                        (0166) .ENDSECTION
                                        (0167) 
                                        (0168) 
                                        (0169) .SECTION
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;  FUNCTION NAME: ADCINC_GetSamples
                                        (0172) ;
                                        (0173) ;  DESCRIPTION: Activates interrupts for this user module and begins sampling.
                                        (0174) ;-----------------------------------------------------------------------------
                                        (0175) ;
                                        (0176) ;  ARGUMENTS:    A register contain number of samples
                                        (0177) ;  RETURNS:      Nothing.
                                        (0178) ;  SIDE EFFECTS:
                                        (0179) ;    The A and X registers may be modified by this or future implementations
                                        (0180) ;    of this function.  When necessary, it is the calling function's
                                        (0181) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0182) ;    functions.
                                        (0183) ;          
                                        (0184)  ADCINC_GetSamples:
                                        (0185) _ADCINC_GetSamples:
                                        (0186)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0187)    RAM_SETPAGE_CUR >ADCINC_fMode
                                        (0188)    ADCINC_ENABLE_INTEGRATOR_M
062D: 55 1A 00 MOV   [yn1_1+2],0x0      (0189)    mov [ADCINC_fMode],0
0630: 55 19 00 MOV   [yn1_1+1],0x0      (0190)    mov [ADCINC_bState],0
0633: 53 1B    MOV   [yn1_1+3],A        (0191)    mov [ADCINC_bNumSamples],A
0635: 5D 26    MOV   A,REG[0x26]        (0192)    mov A, reg[ADCINC_PWMdr2]
0637: B0 04    JNZ   0x063C             (0193)    jnz  .SkipPulseWrite
0639: 62 26 01 MOV   REG[0x26],0x1      (0194)    mov reg[ADCINC_PWMdr2], 1
063C: 62 DB FD MOV   REG[0xDB],0xFD     
063F: 43 E1 02 OR    REG[0xE1],0x2      
                                        (0195) .SkipPulseWrite:
                                        (0196)    ADCINC_STARTADC_M  ;enable interrupt
                                        (0197)    RAM_EPILOGUE RAM_USE_CLASS_4 
0642: 7F       RET                      (0198)    ret
0643: 41 E1 FD AND   REG[0xE1],0xFD     
0646: 43 82 20 OR    REG[0x82],0x20     
0649: 43 83 10 OR    REG[0x83],0x10     
064C: 43 92 20 OR    REG[0x92],0x20     
064F: 43 93 10 OR    REG[0x93],0x10     
                                        (0199) .ENDSECTION
                                        (0200) 
                                        (0201) 
                                        (0202) .SECTION
                                        (0203) ;-----------------------------------------------------------------------------
                                        (0204) ;  FUNCTION NAME: ADCINC_StopAD
                                        (0205) ;
                                        (0206) ;  DESCRIPTION: Shuts down the A/D is an orderly manner.  The interrupt
                                        (0207) ;               is disabled but the PWM output is still active.
                                        (0208) ;               Integrator is reset
                                        (0209) ;-----------------------------------------------------------------------------
                                        (0210) ;
                                        (0211) ;  ARGUMENTS:    None.
                                        (0212) ;  RETURNS:      Nothing.
                                        (0213) ;  SIDE EFFECTS:
                                        (0214) ;    The A and X registers may be modified by this or future implementations
                                        (0215) ;    of this function.  When necessary, it is the calling function's
                                        (0216) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0217) ;    functions.
                                        (0218) ;
                                        (0219)  ADCINC_StopADC:
                                        (0220) _ADCINC_StopADC:
                                        (0221)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0222)    ADCINC_STOPADC_M
                                        (0223)    ADCINC_RESET_INTEGRATOR_M
                                        (0224)    RAM_EPILOGUE RAM_USE_CLASS_1 
0652: 7F       RET                      (0225)    ret
0653: 51 18    MOV   A,[yn1_1]          
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) 
                                        (0229) .SECTION
                                        (0230) ;-----------------------------------------------------------------------------
                                        (0231) ;  FUNCTION NAME: ADCINC_fIsDataAvailable
                                        (0232) ;
                                        (0233) ;  DESCRIPTION: Returns the status of the A/D Data
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;  ARGUMENTS:    None.
                                        (0236) ;  RETURNS:      fastcall BOOL DataAvailable returned in the A register
                                        (0237) ;  SIDE EFFECTS:
                                        (0238) ;    The A and X registers may be modified by this or future implementations
                                        (0239) ;    of this function.  When necessary, it is the calling function's
                                        (0240) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0241) ;    functions.
                                        (0242) ;          
                                        (0243)  ADCINC_fIsDataAvailable:
                                        (0244) _ADCINC_fIsDataAvailable:
                                        (0245)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0246)    ADCINC_fIsDataAvailable_M     
                                        (0247)    RAM_EPILOGUE RAM_USE_CLASS_4
0655: 7F       RET                      (0248)    ret
0656: 55 18 00 MOV   [yn1_1],0x0        
0659: 58 14    MOV   X,[xn1_2]          
065B: 51 15    MOV   A,[xn1_2+1]        
065D: 3C 18 00 CMP   [yn1_1],0x0        
0660: BF F5    JNZ   ADCINC_wClearFlagGetData|ADCINC_iClearFlagGetData|_ADCINC_wClearFlagGetData|_ADCINC_iClearFlagGetData
                                        (0249) .ENDSECTION
                                        (0250) 
                                        (0251) 
                                        (0252) .SECTION
                                        (0253) ;-----------------------------------------------------------------------------
                                        (0254) ;  FUNCTION NAME:  ADCINC_iClearFlagGetData
                                        (0255) ;                  ADCINC_iClearFlagGetData
                                        (0256) ;
                                        (0257) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0258) ;                  Flag is checked after trandfer to insure valid data.
                                        (0259) ;                  available. Also clears the DATA_READY flag. 
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;  ARGUMENTS:    None.
                                        (0262) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0263) ;  SIDE EFFECTS:
                                        (0264) ;    The A and X registers may be modified by this or future implementations
                                        (0265) ;    of this function.  When necessary, it is the calling function's
                                        (0266) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0267) ;    functions.
                                        (0268) ;          
                                        (0269)  ADCINC_iClearFlagGetData:
                                        (0270) _ADCINC_iClearFlagGetData:
                                        (0271)  ADCINC_wClearFlagGetData:
                                        (0272) _ADCINC_wClearFlagGetData:
                                        (0273)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0274)    ADCINC_iClearFlagGetData_M    
                                        (0275)    RAM_EPILOGUE RAM_USE_CLASS_4
0662: 7F       RET                      (0276)    ret
0663: 55 18 00 MOV   [yn1_1],0x0        
0666: 51 15    MOV   A,[xn1_2+1]        
                                        (0277) 
                                        (0278) .ENDSECTION
                                        (0279) 
                                        (0280) 
                                        (0281) .SECTION
                                        (0282) ;-----------------------------------------------------------------------------
                                        (0283) ;  FUNCTION NAME:  ADCINC_cClearFlagGetData
                                        (0284) ;                  ADCINC_bClearFlagGetData
                                        (0285) ;
                                        (0286) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0287) ;-----------------------------------------------------------------------------
                                        (0288) ;  ARGUMENTS:    None.
                                        (0289) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;    The A and X registers may be modified by this or future implementations
                                        (0292) ;    of this function.  When necessary, it is the calling function's
                                        (0293) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0294) ;    functions.
                                        (0295) ;          
                                        (0296)  ADCINC_cClearFlagGetData:
                                        (0297) _ADCINC_cClearFlagGetData:
                                        (0298)  ADCINC_bClearFlagGetData:
                                        (0299) _ADCINC_bClearFlagGetData:
                                        (0300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0301)    ADCINC_bClearFlagGetData_M    
                                        (0302)    RAM_EPILOGUE RAM_USE_CLASS_4
0668: 7F       RET                      (0303)    ret
0669: 58 14    MOV   X,[xn1_2]          
066B: 51 15    MOV   A,[xn1_2+1]        
                                        (0304) .ENDSECTION
                                        (0305) 
                                        (0306) 
                                        (0307) .SECTION
                                        (0308) ;-----------------------------------------------------------------------------
                                        (0309) ;  FUNCTION NAME:  ADCINC_iGetData
                                        (0310) ;                  ADCINC_wGetData
                                        (0311) ;
                                        (0312) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0313) ;                   available.
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  ARGUMENTS:    None.
                                        (0316) ;  RETURNS:      fastcall int iResult is returned in the X,A registers
                                        (0317) ;  SIDE EFFECTS:
                                        (0318) ;    The A and X registers may be modified by this or future implementations
                                        (0319) ;    of this function.  When necessary, it is the calling function's
                                        (0320) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0321) ;    functions.
                                        (0322) ;          
                                        (0323)  ADCINC_iGetData:
                                        (0324) _ADCINC_iGetData:
                                        (0325)  ADCINC_wGetData:
                                        (0326) _ADCINC_wGetData:
                                        (0327)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0328)    ADCINC_wGetData_M              
                                        (0329)    RAM_EPILOGUE RAM_USE_CLASS_4
066D: 7F       RET                      (0330)    ret
066E: 51 15    MOV   A,[xn1_2+1]        
                                        (0331) .ENDSECTION
                                        (0332) 
                                        (0333) 
                                        (0334) .SECTION
                                        (0335) ;-----------------------------------------------------------------------------
                                        (0336) ;  FUNCTION NAME:  ADCINC_bGetData
                                        (0337) ;                  ADCINC_cGetData
                                        (0338) ;
                                        (0339) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0340) ;                   available.
                                        (0341) ;-----------------------------------------------------------------------------
                                        (0342) ;  ARGUMENTS:    None.
                                        (0343) ;  RETURNS:      fastcall CHAR cData returned in the A register
                                        (0344) ;  SIDE EFFECTS:
                                        (0345) ;    The A and X registers may be modified by this or future implementations
                                        (0346) ;    of this function.  When necessary, it is the calling function's
                                        (0347) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0348) ;    functions.
                                        (0349) ;          
                                        (0350)  ADCINC_bGetData:
                                        (0351) _ADCINC_bGetData:
                                        (0352)  ADCINC_cGetData:
                                        (0353) _ADCINC_cGetData:
                                        (0354)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0355)    ADCINC_cGetData_M              
                                        (0356)    RAM_EPILOGUE RAM_USE_CLASS_4
0670: 7F       RET                      (0357)    ret
0671: 51 18    MOV   A,[yn1_1]          
0673: 55 18 00 MOV   [yn1_1],0x0        
                                        (0358) .ENDSECTION
                                        (0359) 
                                        (0360) 
                                        (0361) .SECTION
                                        (0362) ;-----------------------------------------------------------------------------
                                        (0363) ;  FUNCTION NAME: ADCINC_ClearFlag
                                        (0364) ;
                                        (0365) ;  DESCRIPTION: Clears the data ready flag.
                                        (0366) ;-----------------------------------------------------------------------------
                                        (0367) ;  ARGUMENTS:    None.
                                        (0368) ;  RETURNS:      Nothing.
                                        (0369) ;  SIDE EFFECTS: 
                                        (0370) ;    The DATA_READY flag is cleared.
                                        (0371) ;
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  When necessary, it is the calling function's
                                        (0374) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0375) ;    functions.
                                        (0376) ;          
                                        (0377)  ADCINC_fClearFlag:
                                        (0378) _ADCINC_fClearFlag:
                                        (0379)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0380)    ADCINC_fClearFlag_M              
                                        (0381)    RAM_EPILOGUE RAM_USE_CLASS_4
0676: 7F       RET                      (0382)    ret
0677: 60 26    MOV   REG[0x26],A        
                                        (0383) .ENDSECTION
                                        (0384) 
                                        (0385) 
                                        (0386) .SECTION
                                        (0387) ;-----------------------------------------------------------------------------
                                        (0388) ;  FUNCTION NAME: ADCINC_WritePulseWidth
                                        (0389) ;
                                        (0390) ;  DESCRIPTION:
                                        (0391) ;     Write the 8-bit period value into the compare register (DR2).
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;
                                        (0394) ;  ARGUMENTS: fastcall BYTE bPeriodValue (passed in A)
                                        (0395) ;  RETURNS:   Nothing
                                        (0396) ;  SIDE EFFECTS:
                                        (0397) ;    The A and X registers may be modified by this or future implementations
                                        (0398) ;    of this function.  When necessary, it is the calling function's
                                        (0399) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0400) ;    functions.
                                        (0401) ;
                                        (0402)  ADCINC_WritePulseWidth:
                                        (0403) _ADCINC_WritePulseWidth:
                                        (0404)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0405)    ADCINC_WritePulseWidth_M
                                        (0406)    RAM_EPILOGUE RAM_USE_CLASS_1
0679: 7F       RET                      (0407)    ret
                                        (0408) .ENDSECTION
                                        (0409) 
                                        (0410) ; End of File ADCINC.asm
FILE: .\delay.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: delay.asm
                                        (0004) ;;
                                        (0005) ;;  DESCRIPTION: Delay functions implementation file
                                        (0006) ;;
                                        (0007) ;;-----------------------------------------------------------------------------
                                        (0008) ;;  Copyright (c) Cypress MicroSystems 2002-2006. All Rights Reserved.
                                        (0009) ;;*****************************************************************************
                                        (0010) ;;*****************************************************************************
                                        (0011) 
                                        (0012) ;-----------------------------------------------------------------------------
                                        (0013) ;  Include Files
                                        (0014) ;-----------------------------------------------------------------------------
                                        (0015) include "m8c.inc"
                                        (0016) include "memory.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------------------------------------
                                        (0021) export  Delay50uTimes
                                        (0022) export _Delay50uTimes
                                        (0023) 
                                        (0024) export  Delay50u
                                        (0025) export _Delay50u
                                        (0026) 
                                        (0027) export  Delay10msTimes
                                        (0028) export _Delay10msTimes
                                        (0029) 
                                        (0030) 
                                        (0031) area text(rom)
                                        (0032) .SECTION
                                        (0033) ;-----------------------------------------------------------------------------
                                        (0034) ;  FUNCTION NAME: DelaySeconds
                                        (0035) ;
                                        (0036) ;  DESCRIPTION:
                                        (0037) ;     Delay increments of 10mSeconds
                                        (0038) ;
                                        (0039) ;-----------------------------------------------------------------------------
                                        (0040) ;
                                        (0041) ;  ARGUMENTS:
                                        (0042) ;     A contains the delay multiplier
                                        (0043) ;
                                        (0044) ;  RETURNS:
                                        (0045) ;
                                        (0046) ;  SIDE EFFECTS:
                                        (0047) ;    The A and X registers may be modified by this or future implementations
                                        (0048) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0049) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0050) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0051) ;    functions.
                                        (0052) 
                                        (0053) 
                                        (0054)  Delay10msTimes:
                                        (0055) _Delay10msTimes:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_1
067A: 08       PUSH  A                  (0057) 	push A
                                        (0058) 
067B: 50 C8    MOV   A,0xC8             (0059) 	mov A, 200
                                        (0060) 	DELAY50US:
067D: 90 16    CALL  _Delay50u          (0061)     call  Delay50u
067F: 78       DEC   A                  (0062)     dec   A
0680: BF FC    JNZ   0x067D             (0063)     jnz   DELAY50US
                                        (0064) 
0682: 18       POP   A                  (0065) 	pop A
0683: 78       DEC   A                  (0066) 	dec   A
0684: BF F5    JNZ   __UserModules_end|_Delay10msTimes|Delay10msTimes|__text_start(0067)     jnz   Delay10msTimes
                                        (0068) 
                                        (0069)     RAM_EPILOGUE RAM_USE_CLASS_1
0686: 7F       RET                      (0070)     ret
                                        (0071) .ENDSECTION
                                        (0072) 
                                        (0073) 
                                        (0074) 
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: Delay50uTimes
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Delay increments of 50uSeconds
                                        (0082) ;
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:
                                        (0086) ;     A contains the delay multiplier
                                        (0087) ;
                                        (0088) ;  RETURNS:
                                        (0089) ;
                                        (0090) ;  SIDE EFFECTS:
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097) ;
                                        (0098) 
                                        (0099)  Delay50uTimes:
                                        (0100) _Delay50uTimes:
                                        (0101)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0102) 
0687: 90 0C    CALL  _Delay50u          (0103)     call  Delay50u
0689: 78       DEC   A                  (0104) 	dec A
068A: BF FC    JNZ   _Delay50uTimes     (0105)     jnz   Delay50uTimes
                                        (0106) 
                                        (0107) 	
                                        (0108)     RAM_EPILOGUE RAM_USE_CLASS_1
068C: 7F       RET                      (0109)     ret
                                        (0110) 
                                        (0111) .ENDSECTION
                                        (0112) 
                                        (0113) ;-----------------------------------------------------------------------------
                                        (0114) ;  FUNCTION NAME: Delay50u
                                        (0115) ;
                                        (0116) ;  DESCRIPTION:
                                        (0117) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0118) ;     Slower clock frequencies the delay will be;
                                        (0119) ;           1.5
                                        (0120) ;        -------------- * 50uSec
                                        (0121) ;        clock_freq(MHz)
                                        (0122) ;
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) ;  ARGUMENTS: none
                                        (0127) ;
                                        (0128) ;  RETURNS: none
                                        (0129) ;
                                        (0130) ;  SIDE EFFECTS:
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137) ;  THEORY of OPERATION or PROCEDURE:
                                        (0138) ;
                                        (0139) .LITERAL
                                        (0140)  Delay50u_Table::
                                        (0141)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0142) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0143) .ENDLITERAL
                                        (0144) .SECTION
                                        (0145) 
                                        (0146)   Delay50u:
                                        (0147)  _Delay50u:                      ; [11]  Call
                                        (0148)     RAM_PROLOGUE RAM_USE_CLASS_1
0695: 08       PUSH  A                  (0149)     push  A
0696: 71 10    OR    F,0x10             
                                        (0150)     M8C_SetBank1                       ; [4]
0698: 5D E0    MOV   A,REG[0xE0]        (0151)     mov   A, reg[OSC_CR0]              ; [6] Get delay value
069A: 70 EF    AND   F,0xEF             
                                        (0152)     M8C_SetBank0                       ; [4]
069C: 21 07    AND   A,0x7              (0153)     and   A,07h                        ; [4] Mask off only the clock bits
069E: 39 05    CMP   A,0x5              (0154)     cmp   A,05h
06A0: D0 06    JNC   0x06A7             (0155)     jnc   Delay50u_End
06A2: FF E9    INDEX Delay50u_Table     (0156)     index Delay50u_Table               ; [13] Get delay value
                                        (0157) Delay50u_Loop:                         ;
06A4: 78       DEC   A                  (0158)     dec   A                            ; [4]
06A5: BF FE    JNZ   0x06A4             (0159)     jnz   Delay50u_Loop                ; [5]
                                        (0160) Delay50u_End:
06A7: 18       POP   A                  (0161)     pop   A
                                        (0162)     RAM_EPILOGUE RAM_USE_CLASS_1
06A8: 7F       RET                      (0163)     ret
FILE: C:\Users\ser\DOCUME~1\test2\test2\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include "delay.h" 
(0008) #include "stdlib.h"
(0009) 
(0010) INT  iData; 
(0011) int nADCdata, nf_50_data, nf_50_data1, nf_50_data2, nf_50_data3, nf_50_data4, nf_50_data5, hpf_data; 
(0012) first_af = TRUE;
(0013) int nf_50 (int x) // second order nitch filter f = 50 hz 
(0014) { 
_nf_50:
  y                    --> X+4
  diff1                --> X+0
  x                    --> X-5
    06A9: 10       PUSH  X
    06AA: 4F       MOV   X,SP
    06AB: 38 0A    ADD   SP,0xA
(0015)   static long xn_1, xn_2, yn_1, yn_2;
(0016)   long diff1;
(0017)   int y;
(0018)   diff1 = (x + xn_2) <<16;   // 0.5 + 0.25  * 65536
    06AD: 52 FC    MOV   A,[X-4]
    06AF: 53 0D    MOV   [__r3],A
    06B1: 52 FB    MOV   A,[X-5]
    06B3: 53 0E    MOV   [__r2],A
    06B5: 47 0E 80 TST   [__r2],0x80
    06B8: A0 09    JZ    0x06C2
    06BA: 55 0F FF MOV   [__r1],0xFF
    06BD: 55 10 FF MOV   [__r0|xn1_1],0xFF
    06C0: 80 07    JMP   0x06C8
    06C2: 55 0F 00 MOV   [__r1],0x0
    06C5: 55 10 00 MOV   [__r0|xn1_1],0x0
    06C8: 51 23    MOV   A,[xn2_1+3]
    06CA: 04 0D    ADD   [__r3],A
    06CC: 51 22    MOV   A,[xn2_1+2]
    06CE: 0C 0E    ADC   [__r2],A
    06D0: 51 21    MOV   A,[xn2_1+1]
    06D2: 0C 0F    ADC   [__r1],A
    06D4: 51 20    MOV   A,[xn2_1]
    06D6: 0C 10    ADC   [__r0|xn1_1],A
    06D8: 50 10    MOV   A,0x10
    06DA: 65 0D    ASL   [__r3]
    06DC: 6B 0E    RLC   [__r2]
    06DE: 6B 0F    RLC   [__r1]
    06E0: 6B 10    RLC   [__r0|xn1_1]
    06E2: 78       DEC   A
    06E3: BF F6    JNZ   0x06DA
    06E5: 51 10    MOV   A,[__r0|xn1_1]
    06E7: 54 00    MOV   [X+0],A
    06E9: 51 0F    MOV   A,[__r1]
    06EB: 54 01    MOV   [X+1],A
    06ED: 51 0E    MOV   A,[__r2]
    06EF: 54 02    MOV   [X+2],A
    06F1: 51 0D    MOV   A,[__r3]
    06F3: 54 03    MOV   [X+3],A
(0019)   y = ((diff1>>1) + (diff1>>2) + 87301*(xn_1 - yn_1) - ((yn_2<<16)>>1) )>>16;
    06F5: 5F 10 28 MOV   [__r0|xn1_1],[yn2_1]
    06F8: 5F 0F 29 MOV   [__r1],[yn2_1+1]
    06FB: 5F 0E 2A MOV   [__r2],[yn2_1+2]
    06FE: 5F 0D 2B MOV   [__r3],[yn2_1+3]
    0701: 50 10    MOV   A,0x10
    0703: 65 0D    ASL   [__r3]
    0705: 6B 0E    RLC   [__r2]
    0707: 6B 0F    RLC   [__r1]
    0709: 6B 10    RLC   [__r0|xn1_1]
    070B: 78       DEC   A
    070C: BF F6    JNZ   0x0703
    070E: 68 10    ASR   [__r0|xn1_1]
    0710: 6E 0F    RRC   [__r1]
    0712: 6E 0E    RRC   [__r2]
    0714: 6E 0D    RRC   [__r3]
    0716: 51 10    MOV   A,[__r0|xn1_1]
    0718: 54 06    MOV   [X+6],A
    071A: 51 0F    MOV   A,[__r1]
    071C: 54 07    MOV   [X+7],A
    071E: 51 0E    MOV   A,[__r2]
    0720: 54 08    MOV   [X+8],A
    0722: 51 0D    MOV   A,[__r3]
    0724: 54 09    MOV   [X+9],A
    0726: 51 1F    MOV   A,[yn1_2+3]
    0728: 12 27    SUB   A,[xn2_2+3]
    072A: 53 09    MOV   [__r7],A
    072C: 51 1E    MOV   A,[yn1_2+2]
    072E: 1A 26    SBB   A,[xn2_2+2]
    0730: 53 0A    MOV   [__r6],A
    0732: 51 1D    MOV   A,[yn1_2+1]
    0734: 1A 25    SBB   A,[xn2_2+1]
    0736: 53 0B    MOV   [__r5],A
    0738: 51 1C    MOV   A,[yn1_2]
    073A: 1A 24    SBB   A,[xn2_2]
    073C: 08       PUSH  A
    073D: 51 0B    MOV   A,[__r5]
    073F: 08       PUSH  A
    0740: 51 0A    MOV   A,[__r6]
    0742: 08       PUSH  A
    0743: 51 09    MOV   A,[__r7]
    0745: 08       PUSH  A
    0746: 50 00    MOV   A,0x0
    0748: 08       PUSH  A
    0749: 50 01    MOV   A,0x1
    074B: 08       PUSH  A
    074C: 50 55    MOV   A,0x55
    074E: 08       PUSH  A
    074F: 50 05    MOV   A,0x5
    0751: 08       PUSH  A
    0752: 7C 16 93 LCALL 0x1693
    0755: 38 FC    ADD   SP,0xFC
    0757: 18       POP   A
    0758: 53 09    MOV   [__r7],A
    075A: 18       POP   A
    075B: 53 0A    MOV   [__r6],A
    075D: 18       POP   A
    075E: 53 0B    MOV   [__r5],A
    0760: 18       POP   A
    0761: 53 0C    MOV   [__r4|yn_2],A
    0763: 52 00    MOV   A,[X+0]
    0765: 53 08    MOV   [__r8|yn_1],A
    0767: 52 01    MOV   A,[X+1]
    0769: 53 07    MOV   [__r9],A
    076B: 52 02    MOV   A,[X+2]
    076D: 53 06    MOV   [__r10],A
    076F: 52 03    MOV   A,[X+3]
    0771: 53 05    MOV   [__r11],A
    0773: 50 02    MOV   A,0x2
    0775: 68 08    ASR   [__r8|yn_1]
    0777: 6E 07    RRC   [__r9]
    0779: 6E 06    RRC   [__r10]
    077B: 6E 05    RRC   [__r11]
    077D: 78       DEC   A
    077E: BF F6    JNZ   0x0775
    0780: 52 00    MOV   A,[X+0]
    0782: 53 10    MOV   [__r0|xn1_1],A
    0784: 52 01    MOV   A,[X+1]
    0786: 53 0F    MOV   [__r1],A
    0788: 52 02    MOV   A,[X+2]
    078A: 53 0E    MOV   [__r2],A
    078C: 52 03    MOV   A,[X+3]
    078E: 53 0D    MOV   [__r3],A
    0790: 68 10    ASR   [__r0|xn1_1]
    0792: 6E 0F    RRC   [__r1]
    0794: 6E 0E    RRC   [__r2]
    0796: 6E 0D    RRC   [__r3]
    0798: 51 05    MOV   A,[__r11]
    079A: 04 0D    ADD   [__r3],A
    079C: 51 06    MOV   A,[__r10]
    079E: 0C 0E    ADC   [__r2],A
    07A0: 51 07    MOV   A,[__r9]
    07A2: 0C 0F    ADC   [__r1],A
    07A4: 51 08    MOV   A,[__r8|yn_1]
    07A6: 0C 10    ADC   [__r0|xn1_1],A
    07A8: 51 09    MOV   A,[__r7]
    07AA: 04 0D    ADD   [__r3],A
    07AC: 51 0A    MOV   A,[__r6]
    07AE: 0C 0E    ADC   [__r2],A
    07B0: 51 0B    MOV   A,[__r5]
    07B2: 0C 0F    ADC   [__r1],A
    07B4: 51 0C    MOV   A,[__r4|yn_2]
    07B6: 0C 10    ADC   [__r0|xn1_1],A
    07B8: 52 09    MOV   A,[X+9]
    07BA: 14 0D    SUB   [__r3],A
    07BC: 52 08    MOV   A,[X+8]
    07BE: 1C 0E    SBB   [__r2],A
    07C0: 52 07    MOV   A,[X+7]
    07C2: 1C 0F    SBB   [__r1],A
    07C4: 52 06    MOV   A,[X+6]
    07C6: 1C 10    SBB   [__r0|xn1_1],A
    07C8: 50 10    MOV   A,0x10
    07CA: 68 10    ASR   [__r0|xn1_1]
    07CC: 6E 0F    RRC   [__r1]
    07CE: 6E 0E    RRC   [__r2]
    07D0: 6E 0D    RRC   [__r3]
    07D2: 78       DEC   A
    07D3: BF F6    JNZ   0x07CA
    07D5: 51 0D    MOV   A,[__r3]
    07D7: 54 05    MOV   [X+5],A
    07D9: 51 0E    MOV   A,[__r2]
    07DB: 54 04    MOV   [X+4],A
(0020)   xn_2 = xn_1;
    07DD: 5F 20 1C MOV   [xn2_1],[yn1_2]
    07E0: 5F 21 1D MOV   [xn2_1+1],[yn1_2+1]
    07E3: 5F 22 1E MOV   [xn2_1+2],[yn1_2+2]
    07E6: 5F 23 1F MOV   [xn2_1+3],[yn1_2+3]
(0021)   xn_1 = x;
    07E9: 52 FC    MOV   A,[X-4]
    07EB: 53 1F    MOV   [yn1_2+3],A
    07ED: 52 FB    MOV   A,[X-5]
    07EF: 53 1E    MOV   [yn1_2+2],A
    07F1: 47 1E 80 TST   [yn1_2+2],0x80
    07F4: A0 09    JZ    0x07FE
    07F6: 55 1D FF MOV   [yn1_2+1],0xFF
    07F9: 55 1C FF MOV   [yn1_2],0xFF
    07FC: 80 07    JMP   0x0804
    07FE: 55 1D 00 MOV   [yn1_2+1],0x0
    0801: 55 1C 00 MOV   [yn1_2],0x0
(0022)   yn_2 = yn_1;
    0804: 5F 28 24 MOV   [yn2_1],[xn2_2]
    0807: 5F 29 25 MOV   [yn2_1+1],[xn2_2+1]
    080A: 5F 2A 26 MOV   [yn2_1+2],[xn2_2+2]
    080D: 5F 2B 27 MOV   [yn2_1+3],[xn2_2+3]
(0023)   yn_1 = y;
    0810: 52 05    MOV   A,[X+5]
    0812: 53 27    MOV   [xn2_2+3],A
    0814: 52 04    MOV   A,[X+4]
    0816: 53 26    MOV   [xn2_2+2],A
    0818: 47 26 80 TST   [xn2_2+2],0x80
    081B: A0 09    JZ    0x0825
    081D: 55 25 FF MOV   [xn2_2+1],0xFF
    0820: 55 24 FF MOV   [xn2_2],0xFF
    0823: 80 07    JMP   0x082B
    0825: 55 25 00 MOV   [xn2_2+1],0x0
    0828: 55 24 00 MOV   [xn2_2],0x0
(0024)   return y;
    082B: 52 05    MOV   A,[X+5]
    082D: 53 0F    MOV   [__r1],A
    082F: 52 04    MOV   A,[X+4]
    0831: 53 10    MOV   [__r0|xn1_1],A
    0833: 38 F6    ADD   SP,0xF6
    0835: 20       POP   X
    0836: 7F       RET   
(0025) }
(0026) 
(0027) //----------------------------------------------------------
(0028) int nf1_50 (int x) // second order nitch filter f = 50 hz 
(0029) { 
_nf1_50:
  y                    --> X+4
  diff1                --> X+0
  x                    --> X-5
    0837: 10       PUSH  X
    0838: 4F       MOV   X,SP
    0839: 38 0A    ADD   SP,0xA
(0030)   static long xn1_1, xn1_2, yn1_1, yn1_2;
(0031)   long diff1;
(0032)   int y;
(0033)   diff1 = (x + xn1_2) <<16;   // 0.5 + 0.25  * 65536
    083B: 52 FC    MOV   A,[X-4]
    083D: 53 0D    MOV   [__r3],A
    083F: 52 FB    MOV   A,[X-5]
    0841: 53 0E    MOV   [__r2],A
    0843: 47 0E 80 TST   [__r2],0x80
    0846: A0 09    JZ    0x0850
    0848: 55 0F FF MOV   [__r1],0xFF
    084B: 55 10 FF MOV   [__r0|xn1_1],0xFF
    084E: 80 07    JMP   0x0856
    0850: 55 0F 00 MOV   [__r1],0x0
    0853: 55 10 00 MOV   [__r0|xn1_1],0x0
    0856: 51 33    MOV   A,[xn3_1+3]
    0858: 04 0D    ADD   [__r3],A
    085A: 51 32    MOV   A,[xn3_1+2]
    085C: 0C 0E    ADC   [__r2],A
    085E: 51 31    MOV   A,[xn3_1+1]
    0860: 0C 0F    ADC   [__r1],A
    0862: 51 30    MOV   A,[xn3_1]
    0864: 0C 10    ADC   [__r0|xn1_1],A
    0866: 50 10    MOV   A,0x10
    0868: 65 0D    ASL   [__r3]
    086A: 6B 0E    RLC   [__r2]
    086C: 6B 0F    RLC   [__r1]
    086E: 6B 10    RLC   [__r0|xn1_1]
    0870: 78       DEC   A
    0871: BF F6    JNZ   0x0868
    0873: 51 10    MOV   A,[__r0|xn1_1]
    0875: 54 00    MOV   [X+0],A
    0877: 51 0F    MOV   A,[__r1]
    0879: 54 01    MOV   [X+1],A
    087B: 51 0E    MOV   A,[__r2]
    087D: 54 02    MOV   [X+2],A
    087F: 51 0D    MOV   A,[__r3]
    0881: 54 03    MOV   [X+3],A
(0034)   y = ((diff1>>1) + (diff1>>2) + 87301*(xn1_1 - yn1_1) - ((yn1_2<<16)>>1) )>>16;
    0883: 5F 10 38 MOV   [__r0|xn1_1],[yn3_1]
    0886: 5F 0F 39 MOV   [__r1],[yn3_1+1]
    0889: 5F 0E 3A MOV   [__r2],[yn3_1+2]
    088C: 5F 0D 3B MOV   [__r3],[yn3_1+3]
    088F: 50 10    MOV   A,0x10
    0891: 65 0D    ASL   [__r3]
    0893: 6B 0E    RLC   [__r2]
    0895: 6B 0F    RLC   [__r1]
    0897: 6B 10    RLC   [__r0|xn1_1]
    0899: 78       DEC   A
    089A: BF F6    JNZ   0x0891
    089C: 68 10    ASR   [__r0|xn1_1]
    089E: 6E 0F    RRC   [__r1]
    08A0: 6E 0E    RRC   [__r2]
    08A2: 6E 0D    RRC   [__r3]
    08A4: 51 10    MOV   A,[__r0|xn1_1]
    08A6: 54 06    MOV   [X+6],A
    08A8: 51 0F    MOV   A,[__r1]
    08AA: 54 07    MOV   [X+7],A
    08AC: 51 0E    MOV   A,[__r2]
    08AE: 54 08    MOV   [X+8],A
    08B0: 51 0D    MOV   A,[__r3]
    08B2: 54 09    MOV   [X+9],A
    08B4: 51 2F    MOV   A,[yn2_2+3]
    08B6: 12 37    SUB   A,[xn3_2+3]
    08B8: 53 09    MOV   [__r7],A
    08BA: 51 2E    MOV   A,[yn2_2+2]
    08BC: 1A 36    SBB   A,[xn3_2+2]
    08BE: 53 0A    MOV   [__r6],A
    08C0: 51 2D    MOV   A,[yn2_2+1]
    08C2: 1A 35    SBB   A,[xn3_2+1]
    08C4: 53 0B    MOV   [__r5],A
    08C6: 51 2C    MOV   A,[yn2_2]
    08C8: 1A 34    SBB   A,[xn3_2]
    08CA: 08       PUSH  A
    08CB: 51 0B    MOV   A,[__r5]
    08CD: 08       PUSH  A
    08CE: 51 0A    MOV   A,[__r6]
    08D0: 08       PUSH  A
    08D1: 51 09    MOV   A,[__r7]
    08D3: 08       PUSH  A
    08D4: 50 00    MOV   A,0x0
    08D6: 08       PUSH  A
    08D7: 50 01    MOV   A,0x1
    08D9: 08       PUSH  A
    08DA: 50 55    MOV   A,0x55
    08DC: 08       PUSH  A
    08DD: 50 05    MOV   A,0x5
    08DF: 08       PUSH  A
    08E0: 7C 16 93 LCALL 0x1693
    08E3: 38 FC    ADD   SP,0xFC
    08E5: 18       POP   A
    08E6: 53 09    MOV   [__r7],A
    08E8: 18       POP   A
    08E9: 53 0A    MOV   [__r6],A
    08EB: 18       POP   A
    08EC: 53 0B    MOV   [__r5],A
    08EE: 18       POP   A
    08EF: 53 0C    MOV   [__r4|yn_2],A
    08F1: 52 00    MOV   A,[X+0]
    08F3: 53 08    MOV   [__r8|yn_1],A
    08F5: 52 01    MOV   A,[X+1]
    08F7: 53 07    MOV   [__r9],A
    08F9: 52 02    MOV   A,[X+2]
    08FB: 53 06    MOV   [__r10],A
    08FD: 52 03    MOV   A,[X+3]
    08FF: 53 05    MOV   [__r11],A
    0901: 50 02    MOV   A,0x2
    0903: 68 08    ASR   [__r8|yn_1]
    0905: 6E 07    RRC   [__r9]
    0907: 6E 06    RRC   [__r10]
    0909: 6E 05    RRC   [__r11]
    090B: 78       DEC   A
    090C: BF F6    JNZ   0x0903
    090E: 52 00    MOV   A,[X+0]
    0910: 53 10    MOV   [__r0|xn1_1],A
    0912: 52 01    MOV   A,[X+1]
    0914: 53 0F    MOV   [__r1],A
    0916: 52 02    MOV   A,[X+2]
    0918: 53 0E    MOV   [__r2],A
    091A: 52 03    MOV   A,[X+3]
    091C: 53 0D    MOV   [__r3],A
    091E: 68 10    ASR   [__r0|xn1_1]
    0920: 6E 0F    RRC   [__r1]
    0922: 6E 0E    RRC   [__r2]
    0924: 6E 0D    RRC   [__r3]
    0926: 51 05    MOV   A,[__r11]
    0928: 04 0D    ADD   [__r3],A
    092A: 51 06    MOV   A,[__r10]
    092C: 0C 0E    ADC   [__r2],A
    092E: 51 07    MOV   A,[__r9]
    0930: 0C 0F    ADC   [__r1],A
    0932: 51 08    MOV   A,[__r8|yn_1]
    0934: 0C 10    ADC   [__r0|xn1_1],A
    0936: 51 09    MOV   A,[__r7]
    0938: 04 0D    ADD   [__r3],A
    093A: 51 0A    MOV   A,[__r6]
    093C: 0C 0E    ADC   [__r2],A
    093E: 51 0B    MOV   A,[__r5]
    0940: 0C 0F    ADC   [__r1],A
    0942: 51 0C    MOV   A,[__r4|yn_2]
    0944: 0C 10    ADC   [__r0|xn1_1],A
    0946: 52 09    MOV   A,[X+9]
    0948: 14 0D    SUB   [__r3],A
    094A: 52 08    MOV   A,[X+8]
    094C: 1C 0E    SBB   [__r2],A
    094E: 52 07    MOV   A,[X+7]
    0950: 1C 0F    SBB   [__r1],A
    0952: 52 06    MOV   A,[X+6]
    0954: 1C 10    SBB   [__r0|xn1_1],A
    0956: 50 10    MOV   A,0x10
    0958: 68 10    ASR   [__r0|xn1_1]
    095A: 6E 0F    RRC   [__r1]
    095C: 6E 0E    RRC   [__r2]
    095E: 6E 0D    RRC   [__r3]
    0960: 78       DEC   A
    0961: BF F6    JNZ   0x0958
    0963: 51 0D    MOV   A,[__r3]
    0965: 54 05    MOV   [X+5],A
    0967: 51 0E    MOV   A,[__r2]
    0969: 54 04    MOV   [X+4],A
(0035)   xn1_2 = xn1_1;
    096B: 5F 30 2C MOV   [xn3_1],[yn2_2]
    096E: 5F 31 2D MOV   [xn3_1+1],[yn2_2+1]
    0971: 5F 32 2E MOV   [xn3_1+2],[yn2_2+2]
    0974: 5F 33 2F MOV   [xn3_1+3],[yn2_2+3]
(0036)   xn1_1 = x;
    0977: 52 FC    MOV   A,[X-4]
    0979: 53 2F    MOV   [yn2_2+3],A
    097B: 52 FB    MOV   A,[X-5]
    097D: 53 2E    MOV   [yn2_2+2],A
    097F: 47 2E 80 TST   [yn2_2+2],0x80
    0982: A0 09    JZ    0x098C
    0984: 55 2D FF MOV   [yn2_2+1],0xFF
    0987: 55 2C FF MOV   [yn2_2],0xFF
    098A: 80 07    JMP   0x0992
    098C: 55 2D 00 MOV   [yn2_2+1],0x0
    098F: 55 2C 00 MOV   [yn2_2],0x0
(0037)   yn1_2 = yn1_1;
    0992: 5F 38 34 MOV   [yn3_1],[xn3_2]
    0995: 5F 39 35 MOV   [yn3_1+1],[xn3_2+1]
    0998: 5F 3A 36 MOV   [yn3_1+2],[xn3_2+2]
    099B: 5F 3B 37 MOV   [yn3_1+3],[xn3_2+3]
(0038)   yn1_1 = y;
    099E: 52 05    MOV   A,[X+5]
    09A0: 53 37    MOV   [xn3_2+3],A
    09A2: 52 04    MOV   A,[X+4]
    09A4: 53 36    MOV   [xn3_2+2],A
    09A6: 47 36 80 TST   [xn3_2+2],0x80
    09A9: A0 09    JZ    0x09B3
    09AB: 55 35 FF MOV   [xn3_2+1],0xFF
    09AE: 55 34 FF MOV   [xn3_2],0xFF
    09B1: 80 07    JMP   0x09B9
    09B3: 55 35 00 MOV   [xn3_2+1],0x0
    09B6: 55 34 00 MOV   [xn3_2],0x0
(0039)   return y;
    09B9: 52 05    MOV   A,[X+5]
    09BB: 53 0F    MOV   [__r1],A
    09BD: 52 04    MOV   A,[X+4]
    09BF: 53 10    MOV   [__r0|xn1_1],A
    09C1: 38 F6    ADD   SP,0xF6
    09C3: 20       POP   X
    09C4: 7F       RET   
(0040) }
(0041) 
(0042) //----------------------------------------------------------
(0043) int nf2_50 (int x) // second order nitch filter f = 50 hz 
(0044) { 
_nf2_50:
  y                    --> X+4
  diff1                --> X+0
  x                    --> X-5
    09C5: 10       PUSH  X
    09C6: 4F       MOV   X,SP
    09C7: 38 0A    ADD   SP,0xA
(0045)   static long xn2_1, xn2_2, yn2_1, yn2_2;
(0046)    long diff1;
(0047)   int y;
(0048)   diff1 = (x + xn2_2) <<16;   
    09C9: 52 FC    MOV   A,[X-4]
    09CB: 53 0D    MOV   [__r3],A
    09CD: 52 FB    MOV   A,[X-5]
    09CF: 53 0E    MOV   [__r2],A
    09D1: 47 0E 80 TST   [__r2],0x80
    09D4: A0 09    JZ    0x09DE
    09D6: 55 0F FF MOV   [__r1],0xFF
    09D9: 55 10 FF MOV   [__r0|xn1_1],0xFF
    09DC: 80 07    JMP   0x09E4
    09DE: 55 0F 00 MOV   [__r1],0x0
    09E1: 55 10 00 MOV   [__r0|xn1_1],0x0
    09E4: 51 43    MOV   A,[xn4_1+3]
    09E6: 04 0D    ADD   [__r3],A
    09E8: 51 42    MOV   A,[xn4_1+2]
    09EA: 0C 0E    ADC   [__r2],A
    09EC: 51 41    MOV   A,[xn4_1+1]
    09EE: 0C 0F    ADC   [__r1],A
    09F0: 51 40    MOV   A,[xn4_1]
    09F2: 0C 10    ADC   [__r0|xn1_1],A
    09F4: 50 10    MOV   A,0x10
    09F6: 65 0D    ASL   [__r3]
    09F8: 6B 0E    RLC   [__r2]
    09FA: 6B 0F    RLC   [__r1]
    09FC: 6B 10    RLC   [__r0|xn1_1]
    09FE: 78       DEC   A
    09FF: BF F6    JNZ   0x09F6
    0A01: 51 10    MOV   A,[__r0|xn1_1]
    0A03: 54 00    MOV   [X+0],A
    0A05: 51 0F    MOV   A,[__r1]
    0A07: 54 01    MOV   [X+1],A
    0A09: 51 0E    MOV   A,[__r2]
    0A0B: 54 02    MOV   [X+2],A
    0A0D: 51 0D    MOV   A,[__r3]
    0A0F: 54 03    MOV   [X+3],A
(0049)   y = ((diff1>>1) + (diff1>>2) + 87301*(xn2_1 - yn2_1) - ((yn2_2<<16)>>1) )>>16;
    0A11: 5F 10 48 MOV   [__r0|xn1_1],[yn4_1]
    0A14: 5F 0F 49 MOV   [__r1],[yn4_1+1]
    0A17: 5F 0E 4A MOV   [__r2],[yn4_1+2]
    0A1A: 5F 0D 4B MOV   [__r3],[yn4_1+3]
    0A1D: 50 10    MOV   A,0x10
    0A1F: 65 0D    ASL   [__r3]
    0A21: 6B 0E    RLC   [__r2]
    0A23: 6B 0F    RLC   [__r1]
    0A25: 6B 10    RLC   [__r0|xn1_1]
    0A27: 78       DEC   A
    0A28: BF F6    JNZ   0x0A1F
    0A2A: 68 10    ASR   [__r0|xn1_1]
    0A2C: 6E 0F    RRC   [__r1]
    0A2E: 6E 0E    RRC   [__r2]
    0A30: 6E 0D    RRC   [__r3]
    0A32: 51 10    MOV   A,[__r0|xn1_1]
    0A34: 54 06    MOV   [X+6],A
    0A36: 51 0F    MOV   A,[__r1]
    0A38: 54 07    MOV   [X+7],A
    0A3A: 51 0E    MOV   A,[__r2]
    0A3C: 54 08    MOV   [X+8],A
    0A3E: 51 0D    MOV   A,[__r3]
    0A40: 54 09    MOV   [X+9],A
    0A42: 51 3F    MOV   A,[yn3_2+3]
    0A44: 12 47    SUB   A,[xn4_2+3]
    0A46: 53 09    MOV   [__r7],A
    0A48: 51 3E    MOV   A,[yn3_2+2]
    0A4A: 1A 46    SBB   A,[xn4_2+2]
    0A4C: 53 0A    MOV   [__r6],A
    0A4E: 51 3D    MOV   A,[yn3_2+1]
    0A50: 1A 45    SBB   A,[xn4_2+1]
    0A52: 53 0B    MOV   [__r5],A
    0A54: 51 3C    MOV   A,[yn3_2]
    0A56: 1A 44    SBB   A,[xn4_2]
    0A58: 08       PUSH  A
    0A59: 51 0B    MOV   A,[__r5]
    0A5B: 08       PUSH  A
    0A5C: 51 0A    MOV   A,[__r6]
    0A5E: 08       PUSH  A
    0A5F: 51 09    MOV   A,[__r7]
    0A61: 08       PUSH  A
    0A62: 50 00    MOV   A,0x0
    0A64: 08       PUSH  A
    0A65: 50 01    MOV   A,0x1
    0A67: 08       PUSH  A
    0A68: 50 55    MOV   A,0x55
    0A6A: 08       PUSH  A
    0A6B: 50 05    MOV   A,0x5
    0A6D: 08       PUSH  A
    0A6E: 7C 16 93 LCALL 0x1693
    0A71: 38 FC    ADD   SP,0xFC
    0A73: 18       POP   A
    0A74: 53 09    MOV   [__r7],A
    0A76: 18       POP   A
    0A77: 53 0A    MOV   [__r6],A
    0A79: 18       POP   A
    0A7A: 53 0B    MOV   [__r5],A
    0A7C: 18       POP   A
    0A7D: 53 0C    MOV   [__r4|yn_2],A
    0A7F: 52 00    MOV   A,[X+0]
    0A81: 53 08    MOV   [__r8|yn_1],A
    0A83: 52 01    MOV   A,[X+1]
    0A85: 53 07    MOV   [__r9],A
    0A87: 52 02    MOV   A,[X+2]
    0A89: 53 06    MOV   [__r10],A
    0A8B: 52 03    MOV   A,[X+3]
    0A8D: 53 05    MOV   [__r11],A
    0A8F: 50 02    MOV   A,0x2
    0A91: 68 08    ASR   [__r8|yn_1]
    0A93: 6E 07    RRC   [__r9]
    0A95: 6E 06    RRC   [__r10]
    0A97: 6E 05    RRC   [__r11]
    0A99: 78       DEC   A
    0A9A: BF F6    JNZ   0x0A91
    0A9C: 52 00    MOV   A,[X+0]
    0A9E: 53 10    MOV   [__r0|xn1_1],A
    0AA0: 52 01    MOV   A,[X+1]
    0AA2: 53 0F    MOV   [__r1],A
    0AA4: 52 02    MOV   A,[X+2]
    0AA6: 53 0E    MOV   [__r2],A
    0AA8: 52 03    MOV   A,[X+3]
    0AAA: 53 0D    MOV   [__r3],A
    0AAC: 68 10    ASR   [__r0|xn1_1]
    0AAE: 6E 0F    RRC   [__r1]
    0AB0: 6E 0E    RRC   [__r2]
    0AB2: 6E 0D    RRC   [__r3]
    0AB4: 51 05    MOV   A,[__r11]
    0AB6: 04 0D    ADD   [__r3],A
    0AB8: 51 06    MOV   A,[__r10]
    0ABA: 0C 0E    ADC   [__r2],A
    0ABC: 51 07    MOV   A,[__r9]
    0ABE: 0C 0F    ADC   [__r1],A
    0AC0: 51 08    MOV   A,[__r8|yn_1]
    0AC2: 0C 10    ADC   [__r0|xn1_1],A
    0AC4: 51 09    MOV   A,[__r7]
    0AC6: 04 0D    ADD   [__r3],A
    0AC8: 51 0A    MOV   A,[__r6]
    0ACA: 0C 0E    ADC   [__r2],A
    0ACC: 51 0B    MOV   A,[__r5]
    0ACE: 0C 0F    ADC   [__r1],A
    0AD0: 51 0C    MOV   A,[__r4|yn_2]
    0AD2: 0C 10    ADC   [__r0|xn1_1],A
    0AD4: 52 09    MOV   A,[X+9]
    0AD6: 14 0D    SUB   [__r3],A
    0AD8: 52 08    MOV   A,[X+8]
    0ADA: 1C 0E    SBB   [__r2],A
    0ADC: 52 07    MOV   A,[X+7]
    0ADE: 1C 0F    SBB   [__r1],A
    0AE0: 52 06    MOV   A,[X+6]
    0AE2: 1C 10    SBB   [__r0|xn1_1],A
    0AE4: 50 10    MOV   A,0x10
    0AE6: 68 10    ASR   [__r0|xn1_1]
    0AE8: 6E 0F    RRC   [__r1]
    0AEA: 6E 0E    RRC   [__r2]
    0AEC: 6E 0D    RRC   [__r3]
    0AEE: 78       DEC   A
    0AEF: BF F6    JNZ   0x0AE6
    0AF1: 51 0D    MOV   A,[__r3]
    0AF3: 54 05    MOV   [X+5],A
    0AF5: 51 0E    MOV   A,[__r2]
    0AF7: 54 04    MOV   [X+4],A
(0050)   xn2_2 = xn2_1;
    0AF9: 5F 40 3C MOV   [xn4_1],[yn3_2]
    0AFC: 5F 41 3D MOV   [xn4_1+1],[yn3_2+1]
    0AFF: 5F 42 3E MOV   [xn4_1+2],[yn3_2+2]
    0B02: 5F 43 3F MOV   [xn4_1+3],[yn3_2+3]
(0051)   xn2_1 = x;
    0B05: 52 FC    MOV   A,[X-4]
    0B07: 53 3F    MOV   [yn3_2+3],A
    0B09: 52 FB    MOV   A,[X-5]
    0B0B: 53 3E    MOV   [yn3_2+2],A
    0B0D: 47 3E 80 TST   [yn3_2+2],0x80
    0B10: A0 09    JZ    0x0B1A
    0B12: 55 3D FF MOV   [yn3_2+1],0xFF
    0B15: 55 3C FF MOV   [yn3_2],0xFF
    0B18: 80 07    JMP   0x0B20
    0B1A: 55 3D 00 MOV   [yn3_2+1],0x0
    0B1D: 55 3C 00 MOV   [yn3_2],0x0
(0052)   yn2_2 = yn2_1;
    0B20: 5F 48 44 MOV   [yn4_1],[xn4_2]
    0B23: 5F 49 45 MOV   [yn4_1+1],[xn4_2+1]
    0B26: 5F 4A 46 MOV   [yn4_1+2],[xn4_2+2]
    0B29: 5F 4B 47 MOV   [yn4_1+3],[xn4_2+3]
(0053)   yn2_1 = y;
    0B2C: 52 05    MOV   A,[X+5]
    0B2E: 53 47    MOV   [xn4_2+3],A
    0B30: 52 04    MOV   A,[X+4]
    0B32: 53 46    MOV   [xn4_2+2],A
    0B34: 47 46 80 TST   [xn4_2+2],0x80
    0B37: A0 09    JZ    0x0B41
    0B39: 55 45 FF MOV   [xn4_2+1],0xFF
    0B3C: 55 44 FF MOV   [xn4_2],0xFF
    0B3F: 80 07    JMP   0x0B47
    0B41: 55 45 00 MOV   [xn4_2+1],0x0
    0B44: 55 44 00 MOV   [xn4_2],0x0
(0054)   return y;
    0B47: 52 05    MOV   A,[X+5]
    0B49: 53 0F    MOV   [__r1],A
    0B4B: 52 04    MOV   A,[X+4]
    0B4D: 53 10    MOV   [__r0|xn1_1],A
    0B4F: 38 F6    ADD   SP,0xF6
    0B51: 20       POP   X
    0B52: 7F       RET   
(0055) }
(0056) //----------------------------------------------------------
(0057) int nf3_50 (int x) // second order nitch filter f = 50 hz 
(0058) { 
_nf3_50:
  y                    --> X+4
  diff1                --> X+0
  x                    --> X-5
    0B53: 10       PUSH  X
    0B54: 4F       MOV   X,SP
    0B55: 38 0A    ADD   SP,0xA
(0059)   static long xn3_1, xn3_2, yn3_1, yn3_2;
(0060)    long diff1;
(0061)   int y;
(0062)   diff1 = (x + xn3_2) <<16;   
    0B57: 52 FC    MOV   A,[X-4]
    0B59: 53 0D    MOV   [__r3],A
    0B5B: 52 FB    MOV   A,[X-5]
    0B5D: 53 0E    MOV   [__r2],A
    0B5F: 47 0E 80 TST   [__r2],0x80
    0B62: A0 09    JZ    0x0B6C
    0B64: 55 0F FF MOV   [__r1],0xFF
    0B67: 55 10 FF MOV   [__r0|xn1_1],0xFF
    0B6A: 80 07    JMP   0x0B72
    0B6C: 55 0F 00 MOV   [__r1],0x0
    0B6F: 55 10 00 MOV   [__r0|xn1_1],0x0
    0B72: 51 53    MOV   A,[xn5_1+3]
    0B74: 04 0D    ADD   [__r3],A
    0B76: 51 52    MOV   A,[xn5_1+2]
    0B78: 0C 0E    ADC   [__r2],A
    0B7A: 51 51    MOV   A,[xn5_1+1]
    0B7C: 0C 0F    ADC   [__r1],A
    0B7E: 51 50    MOV   A,[xn5_1]
    0B80: 0C 10    ADC   [__r0|xn1_1],A
    0B82: 50 10    MOV   A,0x10
    0B84: 65 0D    ASL   [__r3]
    0B86: 6B 0E    RLC   [__r2]
    0B88: 6B 0F    RLC   [__r1]
    0B8A: 6B 10    RLC   [__r0|xn1_1]
    0B8C: 78       DEC   A
    0B8D: BF F6    JNZ   0x0B84
    0B8F: 51 10    MOV   A,[__r0|xn1_1]
    0B91: 54 00    MOV   [X+0],A
    0B93: 51 0F    MOV   A,[__r1]
    0B95: 54 01    MOV   [X+1],A
    0B97: 51 0E    MOV   A,[__r2]
    0B99: 54 02    MOV   [X+2],A
    0B9B: 51 0D    MOV   A,[__r3]
    0B9D: 54 03    MOV   [X+3],A
(0063)   y = ((diff1>>1) + (diff1>>2) + 87301*(xn3_1 - yn3_1) - ((yn3_2<<16)>>1) )>>16;
    0B9F: 5F 10 58 MOV   [__r0|xn1_1],[yn5_1]
    0BA2: 5F 0F 59 MOV   [__r1],[yn5_1+1]
    0BA5: 5F 0E 5A MOV   [__r2],[yn5_1+2]
    0BA8: 5F 0D 5B MOV   [__r3],[yn5_1+3]
    0BAB: 50 10    MOV   A,0x10
    0BAD: 65 0D    ASL   [__r3]
    0BAF: 6B 0E    RLC   [__r2]
    0BB1: 6B 0F    RLC   [__r1]
    0BB3: 6B 10    RLC   [__r0|xn1_1]
    0BB5: 78       DEC   A
    0BB6: BF F6    JNZ   0x0BAD
    0BB8: 68 10    ASR   [__r0|xn1_1]
    0BBA: 6E 0F    RRC   [__r1]
    0BBC: 6E 0E    RRC   [__r2]
    0BBE: 6E 0D    RRC   [__r3]
    0BC0: 51 10    MOV   A,[__r0|xn1_1]
    0BC2: 54 06    MOV   [X+6],A
    0BC4: 51 0F    MOV   A,[__r1]
    0BC6: 54 07    MOV   [X+7],A
    0BC8: 51 0E    MOV   A,[__r2]
    0BCA: 54 08    MOV   [X+8],A
    0BCC: 51 0D    MOV   A,[__r3]
    0BCE: 54 09    MOV   [X+9],A
    0BD0: 51 4F    MOV   A,[yn4_2+3]
    0BD2: 12 57    SUB   A,[xn5_2+3]
    0BD4: 53 09    MOV   [__r7],A
    0BD6: 51 4E    MOV   A,[yn4_2+2]
    0BD8: 1A 56    SBB   A,[xn5_2+2]
    0BDA: 53 0A    MOV   [__r6],A
    0BDC: 51 4D    MOV   A,[yn4_2+1]
    0BDE: 1A 55    SBB   A,[xn5_2+1]
    0BE0: 53 0B    MOV   [__r5],A
    0BE2: 51 4C    MOV   A,[yn4_2]
    0BE4: 1A 54    SBB   A,[xn5_2]
    0BE6: 08       PUSH  A
    0BE7: 51 0B    MOV   A,[__r5]
    0BE9: 08       PUSH  A
    0BEA: 51 0A    MOV   A,[__r6]
    0BEC: 08       PUSH  A
    0BED: 51 09    MOV   A,[__r7]
    0BEF: 08       PUSH  A
    0BF0: 50 00    MOV   A,0x0
    0BF2: 08       PUSH  A
    0BF3: 50 01    MOV   A,0x1
    0BF5: 08       PUSH  A
    0BF6: 50 55    MOV   A,0x55
    0BF8: 08       PUSH  A
    0BF9: 50 05    MOV   A,0x5
    0BFB: 08       PUSH  A
    0BFC: 7C 16 93 LCALL 0x1693
    0BFF: 38 FC    ADD   SP,0xFC
    0C01: 18       POP   A
    0C02: 53 09    MOV   [__r7],A
    0C04: 18       POP   A
    0C05: 53 0A    MOV   [__r6],A
    0C07: 18       POP   A
    0C08: 53 0B    MOV   [__r5],A
    0C0A: 18       POP   A
    0C0B: 53 0C    MOV   [__r4|yn_2],A
    0C0D: 52 00    MOV   A,[X+0]
    0C0F: 53 08    MOV   [__r8|yn_1],A
    0C11: 52 01    MOV   A,[X+1]
    0C13: 53 07    MOV   [__r9],A
    0C15: 52 02    MOV   A,[X+2]
    0C17: 53 06    MOV   [__r10],A
    0C19: 52 03    MOV   A,[X+3]
    0C1B: 53 05    MOV   [__r11],A
    0C1D: 50 02    MOV   A,0x2
    0C1F: 68 08    ASR   [__r8|yn_1]
    0C21: 6E 07    RRC   [__r9]
    0C23: 6E 06    RRC   [__r10]
    0C25: 6E 05    RRC   [__r11]
    0C27: 78       DEC   A
    0C28: BF F6    JNZ   0x0C1F
    0C2A: 52 00    MOV   A,[X+0]
    0C2C: 53 10    MOV   [__r0|xn1_1],A
    0C2E: 52 01    MOV   A,[X+1]
    0C30: 53 0F    MOV   [__r1],A
    0C32: 52 02    MOV   A,[X+2]
    0C34: 53 0E    MOV   [__r2],A
    0C36: 52 03    MOV   A,[X+3]
    0C38: 53 0D    MOV   [__r3],A
    0C3A: 68 10    ASR   [__r0|xn1_1]
    0C3C: 6E 0F    RRC   [__r1]
    0C3E: 6E 0E    RRC   [__r2]
    0C40: 6E 0D    RRC   [__r3]
    0C42: 51 05    MOV   A,[__r11]
    0C44: 04 0D    ADD   [__r3],A
    0C46: 51 06    MOV   A,[__r10]
    0C48: 0C 0E    ADC   [__r2],A
    0C4A: 51 07    MOV   A,[__r9]
    0C4C: 0C 0F    ADC   [__r1],A
    0C4E: 51 08    MOV   A,[__r8|yn_1]
    0C50: 0C 10    ADC   [__r0|xn1_1],A
    0C52: 51 09    MOV   A,[__r7]
    0C54: 04 0D    ADD   [__r3],A
    0C56: 51 0A    MOV   A,[__r6]
    0C58: 0C 0E    ADC   [__r2],A
    0C5A: 51 0B    MOV   A,[__r5]
    0C5C: 0C 0F    ADC   [__r1],A
    0C5E: 51 0C    MOV   A,[__r4|yn_2]
    0C60: 0C 10    ADC   [__r0|xn1_1],A
    0C62: 52 09    MOV   A,[X+9]
    0C64: 14 0D    SUB   [__r3],A
    0C66: 52 08    MOV   A,[X+8]
    0C68: 1C 0E    SBB   [__r2],A
    0C6A: 52 07    MOV   A,[X+7]
    0C6C: 1C 0F    SBB   [__r1],A
    0C6E: 52 06    MOV   A,[X+6]
    0C70: 1C 10    SBB   [__r0|xn1_1],A
    0C72: 50 10    MOV   A,0x10
    0C74: 68 10    ASR   [__r0|xn1_1]
    0C76: 6E 0F    RRC   [__r1]
    0C78: 6E 0E    RRC   [__r2]
    0C7A: 6E 0D    RRC   [__r3]
    0C7C: 78       DEC   A
    0C7D: BF F6    JNZ   0x0C74
    0C7F: 51 0D    MOV   A,[__r3]
    0C81: 54 05    MOV   [X+5],A
    0C83: 51 0E    MOV   A,[__r2]
    0C85: 54 04    MOV   [X+4],A
(0064)   xn3_2 = xn3_1;
    0C87: 5F 50 4C MOV   [xn5_1],[yn4_2]
    0C8A: 5F 51 4D MOV   [xn5_1+1],[yn4_2+1]
    0C8D: 5F 52 4E MOV   [xn5_1+2],[yn4_2+2]
    0C90: 5F 53 4F MOV   [xn5_1+3],[yn4_2+3]
(0065)   xn3_1 = x;
    0C93: 52 FC    MOV   A,[X-4]
    0C95: 53 4F    MOV   [yn4_2+3],A
    0C97: 52 FB    MOV   A,[X-5]
    0C99: 53 4E    MOV   [yn4_2+2],A
    0C9B: 47 4E 80 TST   [yn4_2+2],0x80
    0C9E: A0 09    JZ    0x0CA8
    0CA0: 55 4D FF MOV   [yn4_2+1],0xFF
    0CA3: 55 4C FF MOV   [yn4_2],0xFF
    0CA6: 80 07    JMP   0x0CAE
    0CA8: 55 4D 00 MOV   [yn4_2+1],0x0
    0CAB: 55 4C 00 MOV   [yn4_2],0x0
(0066)   yn3_2 = yn3_1;
    0CAE: 5F 58 54 MOV   [yn5_1],[xn5_2]
    0CB1: 5F 59 55 MOV   [yn5_1+1],[xn5_2+1]
    0CB4: 5F 5A 56 MOV   [yn5_1+2],[xn5_2+2]
    0CB7: 5F 5B 57 MOV   [yn5_1+3],[xn5_2+3]
(0067)   yn3_1 = y;
    0CBA: 52 05    MOV   A,[X+5]
    0CBC: 53 57    MOV   [xn5_2+3],A
    0CBE: 52 04    MOV   A,[X+4]
    0CC0: 53 56    MOV   [xn5_2+2],A
    0CC2: 47 56 80 TST   [xn5_2+2],0x80
    0CC5: A0 09    JZ    0x0CCF
    0CC7: 55 55 FF MOV   [xn5_2+1],0xFF
    0CCA: 55 54 FF MOV   [xn5_2],0xFF
    0CCD: 80 07    JMP   0x0CD5
    0CCF: 55 55 00 MOV   [xn5_2+1],0x0
    0CD2: 55 54 00 MOV   [xn5_2],0x0
(0068)   return y;
    0CD5: 52 05    MOV   A,[X+5]
    0CD7: 53 0F    MOV   [__r1],A
    0CD9: 52 04    MOV   A,[X+4]
    0CDB: 53 10    MOV   [__r0|xn1_1],A
    0CDD: 38 F6    ADD   SP,0xF6
    0CDF: 20       POP   X
    0CE0: 7F       RET   
(0069) }
(0070) 
(0071) int nf4_50 (int x) // second order nitch filter f = 50 hz 
(0072) { 
_nf4_50:
  y                    --> X+4
  diff1                --> X+0
  x                    --> X-5
    0CE1: 10       PUSH  X
    0CE2: 4F       MOV   X,SP
    0CE3: 38 0A    ADD   SP,0xA
(0073)   static long xn4_1, xn4_2, yn4_1, yn4_2;
(0074)    long diff1;
(0075)   int y;
(0076)   diff1 = (x + xn4_2) <<16;   
    0CE5: 52 FC    MOV   A,[X-4]
    0CE7: 53 0D    MOV   [__r3],A
    0CE9: 52 FB    MOV   A,[X-5]
    0CEB: 53 0E    MOV   [__r2],A
    0CED: 47 0E 80 TST   [__r2],0x80
    0CF0: A0 09    JZ    0x0CFA
    0CF2: 55 0F FF MOV   [__r1],0xFF
    0CF5: 55 10 FF MOV   [__r0|xn1_1],0xFF
    0CF8: 80 07    JMP   0x0D00
    0CFA: 55 0F 00 MOV   [__r1],0x0
    0CFD: 55 10 00 MOV   [__r0|xn1_1],0x0
    0D00: 51 63    MOV   A,[x_af2_1+1]
    0D02: 04 0D    ADD   [__r3],A
    0D04: 51 62    MOV   A,[x_af2_1]
    0D06: 0C 0E    ADC   [__r2],A
    0D08: 51 61    MOV   A,[x_af_1+1]
    0D0A: 0C 0F    ADC   [__r1],A
    0D0C: 51 60    MOV   A,[x_af_1]
    0D0E: 0C 10    ADC   [__r0|xn1_1],A
    0D10: 50 10    MOV   A,0x10
    0D12: 65 0D    ASL   [__r3]
    0D14: 6B 0E    RLC   [__r2]
    0D16: 6B 0F    RLC   [__r1]
    0D18: 6B 10    RLC   [__r0|xn1_1]
    0D1A: 78       DEC   A
    0D1B: BF F6    JNZ   0x0D12
    0D1D: 51 10    MOV   A,[__r0|xn1_1]
    0D1F: 54 00    MOV   [X+0],A
    0D21: 51 0F    MOV   A,[__r1]
    0D23: 54 01    MOV   [X+1],A
    0D25: 51 0E    MOV   A,[__r2]
    0D27: 54 02    MOV   [X+2],A
    0D29: 51 0D    MOV   A,[__r3]
    0D2B: 54 03    MOV   [X+3],A
(0077)   y = ((diff1>>1) + (diff1>>2) + 87301*(xn4_1 - yn4_1) - ((yn4_2<<16)>>1) )>>16;
    0D2D: 5F 10 68 MOV   [__r0|xn1_1],[y_hpf1_1]
    0D30: 5F 0F 69 MOV   [__r1],[y_hpf1_1+1]
    0D33: 5F 0E 6A MOV   [__r2],[y_hpf1_1+2]
    0D36: 5F 0D 6B MOV   [__r3],[y_hpf1_1+3]
    0D39: 50 10    MOV   A,0x10
    0D3B: 65 0D    ASL   [__r3]
    0D3D: 6B 0E    RLC   [__r2]
    0D3F: 6B 0F    RLC   [__r1]
    0D41: 6B 10    RLC   [__r0|xn1_1]
    0D43: 78       DEC   A
    0D44: BF F6    JNZ   0x0D3B
    0D46: 68 10    ASR   [__r0|xn1_1]
    0D48: 6E 0F    RRC   [__r1]
    0D4A: 6E 0E    RRC   [__r2]
    0D4C: 6E 0D    RRC   [__r3]
    0D4E: 51 10    MOV   A,[__r0|xn1_1]
    0D50: 54 06    MOV   [X+6],A
    0D52: 51 0F    MOV   A,[__r1]
    0D54: 54 07    MOV   [X+7],A
    0D56: 51 0E    MOV   A,[__r2]
    0D58: 54 08    MOV   [X+8],A
    0D5A: 51 0D    MOV   A,[__r3]
    0D5C: 54 09    MOV   [X+9],A
    0D5E: 51 5F    MOV   A,[yn5_2+3]
    0D60: 12 67    SUB   A,[x_hpf1_1+3]
    0D62: 53 09    MOV   [__r7],A
    0D64: 51 5E    MOV   A,[yn5_2+2]
    0D66: 1A 66    SBB   A,[x_hpf1_1+2]
    0D68: 53 0A    MOV   [__r6],A
    0D6A: 51 5D    MOV   A,[yn5_2+1]
    0D6C: 1A 65    SBB   A,[x_hpf1_1+1]
    0D6E: 53 0B    MOV   [__r5],A
    0D70: 51 5C    MOV   A,[yn5_2]
    0D72: 1A 64    SBB   A,[x_hpf1_1]
    0D74: 08       PUSH  A
    0D75: 51 0B    MOV   A,[__r5]
    0D77: 08       PUSH  A
    0D78: 51 0A    MOV   A,[__r6]
    0D7A: 08       PUSH  A
    0D7B: 51 09    MOV   A,[__r7]
    0D7D: 08       PUSH  A
    0D7E: 50 00    MOV   A,0x0
    0D80: 08       PUSH  A
    0D81: 50 01    MOV   A,0x1
    0D83: 08       PUSH  A
    0D84: 50 55    MOV   A,0x55
    0D86: 08       PUSH  A
    0D87: 50 05    MOV   A,0x5
    0D89: 08       PUSH  A
    0D8A: 7C 16 93 LCALL 0x1693
    0D8D: 38 FC    ADD   SP,0xFC
    0D8F: 18       POP   A
    0D90: 53 09    MOV   [__r7],A
    0D92: 18       POP   A
    0D93: 53 0A    MOV   [__r6],A
    0D95: 18       POP   A
    0D96: 53 0B    MOV   [__r5],A
    0D98: 18       POP   A
    0D99: 53 0C    MOV   [__r4|yn_2],A
    0D9B: 52 00    MOV   A,[X+0]
    0D9D: 53 08    MOV   [__r8|yn_1],A
    0D9F: 52 01    MOV   A,[X+1]
    0DA1: 53 07    MOV   [__r9],A
    0DA3: 52 02    MOV   A,[X+2]
    0DA5: 53 06    MOV   [__r10],A
    0DA7: 52 03    MOV   A,[X+3]
    0DA9: 53 05    MOV   [__r11],A
    0DAB: 50 02    MOV   A,0x2
    0DAD: 68 08    ASR   [__r8|yn_1]
    0DAF: 6E 07    RRC   [__r9]
    0DB1: 6E 06    RRC   [__r10]
    0DB3: 6E 05    RRC   [__r11]
    0DB5: 78       DEC   A
    0DB6: BF F6    JNZ   0x0DAD
    0DB8: 52 00    MOV   A,[X+0]
    0DBA: 53 10    MOV   [__r0|xn1_1],A
    0DBC: 52 01    MOV   A,[X+1]
    0DBE: 53 0F    MOV   [__r1],A
    0DC0: 52 02    MOV   A,[X+2]
    0DC2: 53 0E    MOV   [__r2],A
    0DC4: 52 03    MOV   A,[X+3]
    0DC6: 53 0D    MOV   [__r3],A
    0DC8: 68 10    ASR   [__r0|xn1_1]
    0DCA: 6E 0F    RRC   [__r1]
    0DCC: 6E 0E    RRC   [__r2]
    0DCE: 6E 0D    RRC   [__r3]
    0DD0: 51 05    MOV   A,[__r11]
    0DD2: 04 0D    ADD   [__r3],A
    0DD4: 51 06    MOV   A,[__r10]
    0DD6: 0C 0E    ADC   [__r2],A
    0DD8: 51 07    MOV   A,[__r9]
    0DDA: 0C 0F    ADC   [__r1],A
    0DDC: 51 08    MOV   A,[__r8|yn_1]
    0DDE: 0C 10    ADC   [__r0|xn1_1],A
    0DE0: 51 09    MOV   A,[__r7]
    0DE2: 04 0D    ADD   [__r3],A
    0DE4: 51 0A    MOV   A,[__r6]
    0DE6: 0C 0E    ADC   [__r2],A
    0DE8: 51 0B    MOV   A,[__r5]
    0DEA: 0C 0F    ADC   [__r1],A
    0DEC: 51 0C    MOV   A,[__r4|yn_2]
    0DEE: 0C 10    ADC   [__r0|xn1_1],A
    0DF0: 52 09    MOV   A,[X+9]
    0DF2: 14 0D    SUB   [__r3],A
    0DF4: 52 08    MOV   A,[X+8]
    0DF6: 1C 0E    SBB   [__r2],A
    0DF8: 52 07    MOV   A,[X+7]
    0DFA: 1C 0F    SBB   [__r1],A
    0DFC: 52 06    MOV   A,[X+6]
    0DFE: 1C 10    SBB   [__r0|xn1_1],A
    0E00: 50 10    MOV   A,0x10
    0E02: 68 10    ASR   [__r0|xn1_1]
    0E04: 6E 0F    RRC   [__r1]
    0E06: 6E 0E    RRC   [__r2]
    0E08: 6E 0D    RRC   [__r3]
    0E0A: 78       DEC   A
    0E0B: BF F6    JNZ   0x0E02
    0E0D: 51 0D    MOV   A,[__r3]
    0E0F: 54 05    MOV   [X+5],A
    0E11: 51 0E    MOV   A,[__r2]
    0E13: 54 04    MOV   [X+4],A
(0078)   xn4_2 = xn4_1;
    0E15: 5F 60 5C MOV   [x_af_1],[yn5_2]
    0E18: 5F 61 5D MOV   [x_af_1+1],[yn5_2+1]
    0E1B: 5F 62 5E MOV   [x_af2_1],[yn5_2+2]
    0E1E: 5F 63 5F MOV   [x_af2_1+1],[yn5_2+3]
(0079)   xn4_1 = x;
    0E21: 52 FC    MOV   A,[X-4]
    0E23: 53 5F    MOV   [yn5_2+3],A
    0E25: 52 FB    MOV   A,[X-5]
    0E27: 53 5E    MOV   [yn5_2+2],A
    0E29: 47 5E 80 TST   [yn5_2+2],0x80
    0E2C: A0 09    JZ    0x0E36
    0E2E: 55 5D FF MOV   [yn5_2+1],0xFF
    0E31: 55 5C FF MOV   [yn5_2],0xFF
    0E34: 80 07    JMP   0x0E3C
    0E36: 55 5D 00 MOV   [yn5_2+1],0x0
    0E39: 55 5C 00 MOV   [yn5_2],0x0
(0080)   yn4_2 = yn4_1;
    0E3C: 5F 68 64 MOV   [y_hpf1_1],[x_hpf1_1]
    0E3F: 5F 69 65 MOV   [y_hpf1_1+1],[x_hpf1_1+1]
    0E42: 5F 6A 66 MOV   [y_hpf1_1+2],[x_hpf1_1+2]
    0E45: 5F 6B 67 MOV   [y_hpf1_1+3],[x_hpf1_1+3]
(0081)   yn4_1 = y;
    0E48: 52 05    MOV   A,[X+5]
    0E4A: 53 67    MOV   [x_hpf1_1+3],A
    0E4C: 52 04    MOV   A,[X+4]
    0E4E: 53 66    MOV   [x_hpf1_1+2],A
    0E50: 47 66 80 TST   [x_hpf1_1+2],0x80
    0E53: A0 09    JZ    0x0E5D
    0E55: 55 65 FF MOV   [x_hpf1_1+1],0xFF
    0E58: 55 64 FF MOV   [x_hpf1_1],0xFF
    0E5B: 80 07    JMP   0x0E63
    0E5D: 55 65 00 MOV   [x_hpf1_1+1],0x0
    0E60: 55 64 00 MOV   [x_hpf1_1],0x0
(0082)   return y;
    0E63: 52 05    MOV   A,[X+5]
    0E65: 53 0F    MOV   [__r1],A
    0E67: 52 04    MOV   A,[X+4]
    0E69: 53 10    MOV   [__r0|xn1_1],A
    0E6B: 38 F6    ADD   SP,0xF6
    0E6D: 20       POP   X
    0E6E: 7F       RET   
(0083) }
(0084) 
(0085) int nf5_50 (int x) // second order nitch filter f = 50 hz 
(0086) { 
_nf5_50:
  y                    --> X+4
  diff1                --> X+0
  x                    --> X-5
    0E6F: 10       PUSH  X
    0E70: 4F       MOV   X,SP
    0E71: 38 0A    ADD   SP,0xA
(0087)   static long xn5_1, xn5_2, yn5_1, yn5_2;
(0088)    long diff1;
(0089)   int y;
(0090)   diff1 = (x + xn5_2) <<16;   
    0E73: 52 FC    MOV   A,[X-4]
    0E75: 53 0D    MOV   [__r3],A
    0E77: 52 FB    MOV   A,[X-5]
    0E79: 53 0E    MOV   [__r2],A
    0E7B: 47 0E 80 TST   [__r2],0x80
    0E7E: A0 09    JZ    0x0E88
    0E80: 55 0F FF MOV   [__r1],0xFF
    0E83: 55 10 FF MOV   [__r0|xn1_1],0xFF
    0E86: 80 07    JMP   0x0E8E
    0E88: 55 0F 00 MOV   [__r1],0x0
    0E8B: 55 10 00 MOV   [__r0|xn1_1],0x0
    0E8E: 51 73    MOV   A,[y_hpf1_1+11]
    0E90: 04 0D    ADD   [__r3],A
    0E92: 51 72    MOV   A,[y_hpf1_1+10]
    0E94: 0C 0E    ADC   [__r2],A
    0E96: 51 71    MOV   A,[y_hpf1_1+9]
    0E98: 0C 0F    ADC   [__r1],A
    0E9A: 51 70    MOV   A,[y_hpf1_1+8]
    0E9C: 0C 10    ADC   [__r0|xn1_1],A
    0E9E: 50 10    MOV   A,0x10
    0EA0: 65 0D    ASL   [__r3]
    0EA2: 6B 0E    RLC   [__r2]
    0EA4: 6B 0F    RLC   [__r1]
    0EA6: 6B 10    RLC   [__r0|xn1_1]
    0EA8: 78       DEC   A
    0EA9: BF F6    JNZ   0x0EA0
    0EAB: 51 10    MOV   A,[__r0|xn1_1]
    0EAD: 54 00    MOV   [X+0],A
    0EAF: 51 0F    MOV   A,[__r1]
    0EB1: 54 01    MOV   [X+1],A
    0EB3: 51 0E    MOV   A,[__r2]
    0EB5: 54 02    MOV   [X+2],A
    0EB7: 51 0D    MOV   A,[__r3]
    0EB9: 54 03    MOV   [X+3],A
(0091)   y = ((diff1>>1) + (diff1>>2) + 87301*(xn5_1 - yn5_1) - ((yn5_2<<16)>>1) )>>16;
    0EBB: 5F 10 78 MOV   [__r0|xn1_1],[y_hpf1_1+16]
    0EBE: 5F 0F 79 MOV   [__r1],[y_hpf1_1+17]
    0EC1: 5F 0E 7A MOV   [__r2],[y_hpf1_1+18]
    0EC4: 5F 0D 7B MOV   [__r3],[y_hpf1_1+19]
    0EC7: 50 10    MOV   A,0x10
    0EC9: 65 0D    ASL   [__r3]
    0ECB: 6B 0E    RLC   [__r2]
    0ECD: 6B 0F    RLC   [__r1]
    0ECF: 6B 10    RLC   [__r0|xn1_1]
    0ED1: 78       DEC   A
    0ED2: BF F6    JNZ   0x0EC9
    0ED4: 68 10    ASR   [__r0|xn1_1]
    0ED6: 6E 0F    RRC   [__r1]
    0ED8: 6E 0E    RRC   [__r2]
    0EDA: 6E 0D    RRC   [__r3]
    0EDC: 51 10    MOV   A,[__r0|xn1_1]
    0EDE: 54 06    MOV   [X+6],A
    0EE0: 51 0F    MOV   A,[__r1]
    0EE2: 54 07    MOV   [X+7],A
    0EE4: 51 0E    MOV   A,[__r2]
    0EE6: 54 08    MOV   [X+8],A
    0EE8: 51 0D    MOV   A,[__r3]
    0EEA: 54 09    MOV   [X+9],A
    0EEC: 51 6F    MOV   A,[y_hpf1_1+7]
    0EEE: 12 77    SUB   A,[y_hpf1_1+15]
    0EF0: 53 09    MOV   [__r7],A
    0EF2: 51 6E    MOV   A,[y_hpf1_1+6]
    0EF4: 1A 76    SBB   A,[y_hpf1_1+14]
    0EF6: 53 0A    MOV   [__r6],A
    0EF8: 51 6D    MOV   A,[y_hpf1_1+5]
    0EFA: 1A 75    SBB   A,[y_hpf1_1+13]
    0EFC: 53 0B    MOV   [__r5],A
    0EFE: 51 6C    MOV   A,[y_hpf1_1+4]
    0F00: 1A 74    SBB   A,[y_hpf1_1+12]
    0F02: 08       PUSH  A
    0F03: 51 0B    MOV   A,[__r5]
    0F05: 08       PUSH  A
    0F06: 51 0A    MOV   A,[__r6]
    0F08: 08       PUSH  A
    0F09: 51 09    MOV   A,[__r7]
    0F0B: 08       PUSH  A
    0F0C: 50 00    MOV   A,0x0
    0F0E: 08       PUSH  A
    0F0F: 50 01    MOV   A,0x1
    0F11: 08       PUSH  A
    0F12: 50 55    MOV   A,0x55
    0F14: 08       PUSH  A
    0F15: 50 05    MOV   A,0x5
    0F17: 08       PUSH  A
    0F18: 7C 16 93 LCALL 0x1693
    0F1B: 38 FC    ADD   SP,0xFC
    0F1D: 18       POP   A
    0F1E: 53 09    MOV   [__r7],A
    0F20: 18       POP   A
    0F21: 53 0A    MOV   [__r6],A
    0F23: 18       POP   A
    0F24: 53 0B    MOV   [__r5],A
    0F26: 18       POP   A
    0F27: 53 0C    MOV   [__r4|yn_2],A
    0F29: 52 00    MOV   A,[X+0]
    0F2B: 53 08    MOV   [__r8|yn_1],A
    0F2D: 52 01    MOV   A,[X+1]
    0F2F: 53 07    MOV   [__r9],A
    0F31: 52 02    MOV   A,[X+2]
    0F33: 53 06    MOV   [__r10],A
    0F35: 52 03    MOV   A,[X+3]
    0F37: 53 05    MOV   [__r11],A
    0F39: 50 02    MOV   A,0x2
    0F3B: 68 08    ASR   [__r8|yn_1]
    0F3D: 6E 07    RRC   [__r9]
    0F3F: 6E 06    RRC   [__r10]
    0F41: 6E 05    RRC   [__r11]
    0F43: 78       DEC   A
    0F44: BF F6    JNZ   0x0F3B
    0F46: 52 00    MOV   A,[X+0]
    0F48: 53 10    MOV   [__r0|xn1_1],A
    0F4A: 52 01    MOV   A,[X+1]
    0F4C: 53 0F    MOV   [__r1],A
    0F4E: 52 02    MOV   A,[X+2]
    0F50: 53 0E    MOV   [__r2],A
    0F52: 52 03    MOV   A,[X+3]
    0F54: 53 0D    MOV   [__r3],A
    0F56: 68 10    ASR   [__r0|xn1_1]
    0F58: 6E 0F    RRC   [__r1]
    0F5A: 6E 0E    RRC   [__r2]
    0F5C: 6E 0D    RRC   [__r3]
    0F5E: 51 05    MOV   A,[__r11]
    0F60: 04 0D    ADD   [__r3],A
    0F62: 51 06    MOV   A,[__r10]
    0F64: 0C 0E    ADC   [__r2],A
    0F66: 51 07    MOV   A,[__r9]
    0F68: 0C 0F    ADC   [__r1],A
    0F6A: 51 08    MOV   A,[__r8|yn_1]
    0F6C: 0C 10    ADC   [__r0|xn1_1],A
    0F6E: 51 09    MOV   A,[__r7]
    0F70: 04 0D    ADD   [__r3],A
    0F72: 51 0A    MOV   A,[__r6]
    0F74: 0C 0E    ADC   [__r2],A
    0F76: 51 0B    MOV   A,[__r5]
    0F78: 0C 0F    ADC   [__r1],A
    0F7A: 51 0C    MOV   A,[__r4|yn_2]
    0F7C: 0C 10    ADC   [__r0|xn1_1],A
    0F7E: 52 09    MOV   A,[X+9]
    0F80: 14 0D    SUB   [__r3],A
    0F82: 52 08    MOV   A,[X+8]
    0F84: 1C 0E    SBB   [__r2],A
    0F86: 52 07    MOV   A,[X+7]
    0F88: 1C 0F    SBB   [__r1],A
    0F8A: 52 06    MOV   A,[X+6]
    0F8C: 1C 10    SBB   [__r0|xn1_1],A
    0F8E: 50 10    MOV   A,0x10
    0F90: 68 10    ASR   [__r0|xn1_1]
    0F92: 6E 0F    RRC   [__r1]
    0F94: 6E 0E    RRC   [__r2]
    0F96: 6E 0D    RRC   [__r3]
    0F98: 78       DEC   A
    0F99: BF F6    JNZ   0x0F90
    0F9B: 51 0D    MOV   A,[__r3]
    0F9D: 54 05    MOV   [X+5],A
    0F9F: 51 0E    MOV   A,[__r2]
    0FA1: 54 04    MOV   [X+4],A
(0092)   xn5_2 = xn5_1;
    0FA3: 5F 70 6C MOV   [y_hpf1_1+8],[y_hpf1_1+4]
    0FA6: 5F 71 6D MOV   [y_hpf1_1+9],[y_hpf1_1+5]
    0FA9: 5F 72 6E MOV   [y_hpf1_1+10],[y_hpf1_1+6]
    0FAC: 5F 73 6F MOV   [y_hpf1_1+11],[y_hpf1_1+7]
(0093)   xn5_1 = x;
    0FAF: 52 FC    MOV   A,[X-4]
    0FB1: 53 6F    MOV   [y_hpf1_1+7],A
    0FB3: 52 FB    MOV   A,[X-5]
    0FB5: 53 6E    MOV   [y_hpf1_1+6],A
    0FB7: 47 6E 80 TST   [y_hpf1_1+6],0x80
    0FBA: A0 09    JZ    0x0FC4
    0FBC: 55 6D FF MOV   [y_hpf1_1+5],0xFF
    0FBF: 55 6C FF MOV   [y_hpf1_1+4],0xFF
    0FC2: 80 07    JMP   0x0FCA
    0FC4: 55 6D 00 MOV   [y_hpf1_1+5],0x0
    0FC7: 55 6C 00 MOV   [y_hpf1_1+4],0x0
(0094)   yn5_2 = yn5_1;
    0FCA: 5F 78 74 MOV   [y_hpf1_1+16],[y_hpf1_1+12]
    0FCD: 5F 79 75 MOV   [y_hpf1_1+17],[y_hpf1_1+13]
    0FD0: 5F 7A 76 MOV   [y_hpf1_1+18],[y_hpf1_1+14]
    0FD3: 5F 7B 77 MOV   [y_hpf1_1+19],[y_hpf1_1+15]
(0095)   yn5_1 = y;
    0FD6: 52 05    MOV   A,[X+5]
    0FD8: 53 77    MOV   [y_hpf1_1+15],A
    0FDA: 52 04    MOV   A,[X+4]
    0FDC: 53 76    MOV   [y_hpf1_1+14],A
    0FDE: 47 76 80 TST   [y_hpf1_1+14],0x80
    0FE1: A0 09    JZ    0x0FEB
    0FE3: 55 75 FF MOV   [y_hpf1_1+13],0xFF
    0FE6: 55 74 FF MOV   [y_hpf1_1+12],0xFF
    0FE9: 80 07    JMP   0x0FF1
    0FEB: 55 75 00 MOV   [y_hpf1_1+13],0x0
    0FEE: 55 74 00 MOV   [y_hpf1_1+12],0x0
(0096)   return y;
    0FF1: 52 05    MOV   A,[X+5]
    0FF3: 53 0F    MOV   [__r1],A
    0FF5: 52 04    MOV   A,[X+4]
    0FF7: 53 10    MOV   [__r0|xn1_1],A
    0FF9: 38 F6    ADD   SP,0xF6
    0FFB: 20       POP   X
    0FFC: 7F       RET   
(0097) }
(0098) 
(0099) int median_filter(unsigned int *x)
(0100) {
_median_filter:
  changed              --> X+4
  buf                  --> X+2
  k                    --> X+0
  x                    --> X-5
    0FFD: 10       PUSH  X
    0FFE: 4F       MOV   X,SP
    0FFF: 38 05    ADD   SP,0x5
(0101) unsigned int k; // current element of array
(0102) unsigned int buf;// buffer for rearrangements of elements of array 
(0103) BOOL changed = TRUE; // TRUE, if in the current cycle the rearrangements are occured
    1001: 56 04 01 MOV   [X+4],0x1
    1004: 80 90    JMP   0x1095
(0104) // array sorting
(0105) 
(0106) while (changed){
(0107) 				changed = FALSE; // let there are no rearrangements in the current cycle
    1006: 56 04 00 MOV   [X+4],0x0
(0108) 				for (k=0; k<=9; k++)
    1009: 56 01 00 MOV   [X+1],0x0
    100C: 56 00 00 MOV   [X+0],0x0
    100F: 80 7B    JMP   0x108B
(0109) 									{  
(0110) 									if (x[k+1] < x[k]) {  // rearrangement of k and k+1 elements
    1011: 52 01    MOV   A,[X+1]
    1013: 64       ASL   A
    1014: 53 0F    MOV   [__r1],A
    1016: 52 FC    MOV   A,[X-4]
    1018: 04 0F    ADD   [__r1],A
    101A: 3E 0F    MVI   A,[__r1]
    101C: 53 10    MOV   [__r0|xn1_1],A
    101E: 3E 0F    MVI   A,[__r1]
    1020: 53 0F    MOV   [__r1],A
    1022: 52 01    MOV   A,[X+1]
    1024: 01 01    ADD   A,0x1
    1026: 64       ASL   A
    1027: 53 0D    MOV   [__r3],A
    1029: 52 FC    MOV   A,[X-4]
    102B: 04 0D    ADD   [__r3],A
    102D: 3E 0D    MVI   A,[__r3]
    102F: 53 0E    MOV   [__r2],A
    1031: 3E 0D    MVI   A,[__r3]
    1033: 12 0F    SUB   A,[__r1]
    1035: 51 0E    MOV   A,[__r2]
    1037: 1A 10    SBB   A,[__r0|xn1_1]
    1039: D0 4C    JNC   0x1086
(0111)   														buf = x[k];
    103B: 52 01    MOV   A,[X+1]
    103D: 64       ASL   A
    103E: 53 0F    MOV   [__r1],A
    1040: 52 FC    MOV   A,[X-4]
    1042: 04 0F    ADD   [__r1],A
    1044: 3E 0F    MVI   A,[__r1]
    1046: 54 02    MOV   [X+2],A
    1048: 3E 0F    MVI   A,[__r1]
    104A: 54 03    MOV   [X+3],A
(0112)   														x[k] = x[k+1];
    104C: 52 01    MOV   A,[X+1]
    104E: 01 01    ADD   A,0x1
    1050: 64       ASL   A
    1051: 53 0F    MOV   [__r1],A
    1053: 52 FC    MOV   A,[X-4]
    1055: 04 0F    ADD   [__r1],A
    1057: 3E 0F    MVI   A,[__r1]
    1059: 53 10    MOV   [__r0|xn1_1],A
    105B: 3E 0F    MVI   A,[__r1]
    105D: 53 0F    MOV   [__r1],A
    105F: 52 01    MOV   A,[X+1]
    1061: 64       ASL   A
    1062: 53 0D    MOV   [__r3],A
    1064: 52 FC    MOV   A,[X-4]
    1066: 04 0D    ADD   [__r3],A
    1068: 51 10    MOV   A,[__r0|xn1_1]
    106A: 3F 0D    MVI   [__r3],A
    106C: 51 0F    MOV   A,[__r1]
    106E: 3F 0D    MVI   [__r3],A
(0113)   														x[k+1] = buf;
    1070: 52 01    MOV   A,[X+1]
    1072: 01 01    ADD   A,0x1
    1074: 64       ASL   A
    1075: 53 0F    MOV   [__r1],A
    1077: 52 FC    MOV   A,[X-4]
    1079: 04 0F    ADD   [__r1],A
    107B: 52 02    MOV   A,[X+2]
    107D: 3F 0F    MVI   [__r1],A
    107F: 52 03    MOV   A,[X+3]
    1081: 3F 0F    MVI   [__r1],A
(0114)   														changed = TRUE;
    1083: 56 04 01 MOV   [X+4],0x1
(0115)   				   										}
(0116)   				   					}
    1086: 77 01    INC   [X+1]
    1088: 0F 00 00 ADC   [X+0],0x0
    108B: 50 09    MOV   A,0x9
    108D: 13 01    SUB   A,[X+1]
    108F: 50 00    MOV   A,0x0
    1091: 1B 00    SBB   A,[X+0]
    1093: DF 7D    JNC   0x1011
(0117) 				}
    1095: 3D 04 00 CMP   [X+4],0x0
    1098: BF 6D    JNZ   0x1006
(0118) 			
(0119) return (x[5]);
    109A: 52 FC    MOV   A,[X-4]
    109C: 01 0A    ADD   A,0xA
    109E: 53 0F    MOV   [__r1],A
    10A0: 3E 0F    MVI   A,[__r1]
    10A2: 53 10    MOV   [__r0|xn1_1],A
    10A4: 3E 0F    MVI   A,[__r1]
    10A6: 53 0F    MOV   [__r1],A
    10A8: 38 FB    ADD   SP,0xFB
    10AA: 20       POP   X
    10AB: 7F       RET   
(0120) }
(0121) 
(0122) //----------------------------------------------------------
(0123) int af (int xa) // four order averaging filter   
(0124) { 
_af:
  ya                   --> X+0
  xa                   --> X-5
    10AC: 10       PUSH  X
    10AD: 4F       MOV   X,SP
    10AE: 38 02    ADD   SP,0x2
(0125)   unsigned int ya = 0;
    10B0: 56 01 00 MOV   [X+1],0x0
    10B3: 56 00 00 MOV   [X+0],0x0
(0126)   static unsigned int x_af_1;
(0127)   if (first_af) { x_af_1 = xa; first_af = FALSE;}
    10B6: 3C 00 00 CMP   [first_af|xn_1],0x0
    10B9: B0 06    JNZ   0x10C0
    10BB: 3C 01 00 CMP   [first_af|xn_1+1],0x0
    10BE: A0 0F    JZ    0x10CE
    10C0: 52 FC    MOV   A,[X-4]
    10C2: 53 7D    MOV   [y_hpf1_1+21],A
    10C4: 52 FB    MOV   A,[X-5]
    10C6: 53 7C    MOV   [y_hpf1_1+20],A
    10C8: 55 01 00 MOV   [first_af|xn_1+1],0x0
    10CB: 55 00 00 MOV   [first_af|xn_1],0x0
(0128)   ya = (xa + x_af_1) >> 1;
    10CE: 52 FC    MOV   A,[X-4]
    10D0: 02 7D    ADD   A,[y_hpf1_1+21]
    10D2: 53 0F    MOV   [__r1],A
    10D4: 52 FB    MOV   A,[X-5]
    10D6: 0A 7C    ADC   A,[y_hpf1_1+20]
    10D8: 53 10    MOV   [__r0|xn1_1],A
    10DA: 70 FB    AND   F,0xFB
    10DC: 6E 10    RRC   [__r0|xn1_1]
    10DE: 6E 0F    RRC   [__r1]
    10E0: 51 0F    MOV   A,[__r1]
    10E2: 54 01    MOV   [X+1],A
    10E4: 51 10    MOV   A,[__r0|xn1_1]
    10E6: 54 00    MOV   [X+0],A
(0129)   x_af_1 = xa;
    10E8: 52 FC    MOV   A,[X-4]
    10EA: 53 7D    MOV   [y_hpf1_1+21],A
    10EC: 52 FB    MOV   A,[X-5]
    10EE: 53 7C    MOV   [y_hpf1_1+20],A
(0130)   return ya;
    10F0: 52 01    MOV   A,[X+1]
    10F2: 53 0F    MOV   [__r1],A
    10F4: 52 00    MOV   A,[X+0]
    10F6: 53 10    MOV   [__r0|xn1_1],A
    10F8: 38 FE    ADD   SP,0xFE
    10FA: 20       POP   X
    10FB: 7F       RET   
(0131) }
(0132) 
(0133) //----------------------------------------------------------
(0134) int af2 (int xa) // two order averaging filter   
(0135) { 
_af2:
  ya                   --> X+0
  xa                   --> X-5
    10FC: 10       PUSH  X
    10FD: 4F       MOV   X,SP
    10FE: 38 02    ADD   SP,0x2
(0136)  unsigned int ya = 0;
    1100: 56 01 00 MOV   [X+1],0x0
    1103: 56 00 00 MOV   [X+0],0x0
(0137)  static unsigned int x_af2_1;
(0138)  ya = (xa + x_af2_1) >> 1;
    1106: 52 FC    MOV   A,[X-4]
    1108: 02 7F    ADD   A,[y_hpf1_1+23]
    110A: 53 0F    MOV   [__r1],A
    110C: 52 FB    MOV   A,[X-5]
    110E: 0A 7E    ADC   A,[y_hpf1_1+22]
    1110: 53 10    MOV   [__r0|xn1_1],A
    1112: 70 FB    AND   F,0xFB
    1114: 6E 10    RRC   [__r0|xn1_1]
    1116: 6E 0F    RRC   [__r1]
    1118: 51 0F    MOV   A,[__r1]
    111A: 54 01    MOV   [X+1],A
    111C: 51 10    MOV   A,[__r0|xn1_1]
    111E: 54 00    MOV   [X+0],A
(0139)  x_af2_1 = xa;
    1120: 52 FC    MOV   A,[X-4]
    1122: 53 7F    MOV   [y_hpf1_1+23],A
    1124: 52 FB    MOV   A,[X-5]
    1126: 53 7E    MOV   [y_hpf1_1+22],A
(0140)  return ya;
    1128: 52 01    MOV   A,[X+1]
    112A: 53 0F    MOV   [__r1],A
    112C: 52 00    MOV   A,[X+0]
    112E: 53 10    MOV   [__r0|xn1_1],A
    1130: 38 FE    ADD   SP,0xFE
    1132: 20       POP   X
    1133: 7F       RET   
(0141) }
(0142) 
(0143) int hpf1 (int x) // first order high pass filter f = 30 hz  (differentiator)
(0144) { 
_hpf1:
  y                    --> X+4
  diff1                --> X+0
  x                    --> X-5
    1134: 10       PUSH  X
    1135: 4F       MOV   X,SP
    1136: 38 06    ADD   SP,0x6
(0145)   static long x_hpf1_1, y_hpf1_1;
(0146)   long diff1;
(0147)   int y;
(0148)   diff1 = (x - x_hpf1_1 ) << 16;
    1138: 52 FC    MOV   A,[X-4]
    113A: 53 0D    MOV   [__r3],A
    113C: 52 FB    MOV   A,[X-5]
    113E: 53 0E    MOV   [__r2],A
    1140: 47 0E 80 TST   [__r2],0x80
    1143: A0 09    JZ    0x114D
    1145: 55 0F FF MOV   [__r1],0xFF
    1148: 55 10 FF MOV   [__r0|xn1_1],0xFF
    114B: 80 07    JMP   0x1153
    114D: 55 0F 00 MOV   [__r1],0x0
    1150: 55 10 00 MOV   [__r0|xn1_1],0x0
    1153: 51 83    MOV   A,[y_hpf1_1+27]
    1155: 14 0D    SUB   [__r3],A
    1157: 51 82    MOV   A,[y_hpf1_1+26]
    1159: 1C 0E    SBB   [__r2],A
    115B: 51 81    MOV   A,[y_hpf1_1+25]
    115D: 1C 0F    SBB   [__r1],A
    115F: 51 80    MOV   A,[y_hpf1_1+24]
    1161: 1C 10    SBB   [__r0|xn1_1],A
    1163: 50 10    MOV   A,0x10
    1165: 65 0D    ASL   [__r3]
    1167: 6B 0E    RLC   [__r2]
    1169: 6B 0F    RLC   [__r1]
    116B: 6B 10    RLC   [__r0|xn1_1]
    116D: 78       DEC   A
    116E: BF F6    JNZ   0x1165
    1170: 51 10    MOV   A,[__r0|xn1_1]
    1172: 54 00    MOV   [X+0],A
    1174: 51 0F    MOV   A,[__r1]
    1176: 54 01    MOV   [X+1],A
    1178: 51 0E    MOV   A,[__r2]
    117A: 54 02    MOV   [X+2],A
    117C: 51 0D    MOV   A,[__r3]
    117E: 54 03    MOV   [X+3],A
(0149)   diff1 = diff1 >> 1;
    1180: 69 00    ASR   [X+0]
    1182: 6F 01    RRC   [X+1]
    1184: 6F 02    RRC   [X+2]
    1186: 6F 03    RRC   [X+3]
(0150)   y = (diff1 + (y_hpf1_1 << 10)) >> 16;
    1188: 5F 10 84 MOV   [__r0|xn1_1],[y_hpf1_1+28]
    118B: 5F 0F 85 MOV   [__r1],[y_hpf1_1+29]
    118E: 5F 0E 86 MOV   [__r2],[y_hpf1_1+30]
    1191: 5F 0D 87 MOV   [__r3],[y_hpf1_1+31]
    1194: 50 0A    MOV   A,0xA
    1196: 65 0D    ASL   [__r3]
    1198: 6B 0E    RLC   [__r2]
    119A: 6B 0F    RLC   [__r1]
    119C: 6B 10    RLC   [__r0|xn1_1]
    119E: 78       DEC   A
    119F: BF F6    JNZ   0x1196
    11A1: 52 03    MOV   A,[X+3]
    11A3: 02 0D    ADD   A,[__r3]
    11A5: 53 0D    MOV   [__r3],A
    11A7: 52 02    MOV   A,[X+2]
    11A9: 0A 0E    ADC   A,[__r2]
    11AB: 53 0E    MOV   [__r2],A
    11AD: 52 01    MOV   A,[X+1]
    11AF: 0A 0F    ADC   A,[__r1]
    11B1: 53 0F    MOV   [__r1],A
    11B3: 52 00    MOV   A,[X+0]
    11B5: 0A 10    ADC   A,[__r0|xn1_1]
    11B7: 53 10    MOV   [__r0|xn1_1],A
    11B9: 50 10    MOV   A,0x10
    11BB: 68 10    ASR   [__r0|xn1_1]
    11BD: 6E 0F    RRC   [__r1]
    11BF: 6E 0E    RRC   [__r2]
    11C1: 6E 0D    RRC   [__r3]
    11C3: 78       DEC   A
    11C4: BF F6    JNZ   0x11BB
    11C6: 51 0D    MOV   A,[__r3]
    11C8: 54 05    MOV   [X+5],A
    11CA: 51 0E    MOV   A,[__r2]
    11CC: 54 04    MOV   [X+4],A
(0151)   x_hpf1_1 = x;
    11CE: 52 FC    MOV   A,[X-4]
    11D0: 53 83    MOV   [y_hpf1_1+27],A
    11D2: 52 FB    MOV   A,[X-5]
    11D4: 53 82    MOV   [y_hpf1_1+26],A
    11D6: 47 82 80 TST   [y_hpf1_1+26],0x80
    11D9: A0 09    JZ    0x11E3
    11DB: 55 81 FF MOV   [y_hpf1_1+25],0xFF
    11DE: 55 80 FF MOV   [y_hpf1_1+24],0xFF
    11E1: 80 07    JMP   0x11E9
    11E3: 55 81 00 MOV   [y_hpf1_1+25],0x0
    11E6: 55 80 00 MOV   [y_hpf1_1+24],0x0
(0152)   y_hpf1_1 = y;
    11E9: 52 05    MOV   A,[X+5]
    11EB: 53 87    MOV   [y_hpf1_1+31],A
    11ED: 52 04    MOV   A,[X+4]
    11EF: 53 86    MOV   [y_hpf1_1+30],A
    11F1: 47 86 80 TST   [y_hpf1_1+30],0x80
    11F4: A0 09    JZ    0x11FE
    11F6: 55 85 FF MOV   [y_hpf1_1+29],0xFF
    11F9: 55 84 FF MOV   [y_hpf1_1+28],0xFF
    11FC: 80 07    JMP   0x1204
    11FE: 55 85 00 MOV   [y_hpf1_1+29],0x0
    1201: 55 84 00 MOV   [y_hpf1_1+28],0x0
(0153)   return y;
    1204: 52 05    MOV   A,[X+5]
    1206: 53 0F    MOV   [__r1],A
    1208: 52 04    MOV   A,[X+4]
    120A: 53 10    MOV   [__r0|xn1_1],A
    120C: 38 FA    ADD   SP,0xFA
    120E: 20       POP   X
    120F: 7F       RET   
(0154) }
(0155) 
(0156) float fVolts;			// Variable that stores the converted voltage value
(0157) float fScaleFactor;		// Variable that stores the volts/count scale factor
(0158) char *pResult;			// Pointer used to store the result returned by ftoa function
(0159) int iStatus;
(0160) 
(0161) void main(void)
(0162) {
(0163) 	LED_Start();
_main:
    1210: 10       PUSH  X
    1211: 7C 05 45 LCALL LED_Off|LED_Stop|_LED_Start|_LED_Off|_LED_Stop|LED_Start
(0164) 
(0165)    LED_Switch(1); 
    1214: 50 01    MOV   A,0x1
    1216: 7C 05 47 LCALL _LED_Switch
(0166)       
(0167)     UART_CmdReset();                      // Initialize receiver/cmd  
    1219: 7C 04 9A LCALL _UART_CmdReset
(0168)                                           // buffer  
(0169)     UART_IntCntl(UART_ENABLE_RX_INT);     // Enable RX interrupts  
    121C: 50 01    MOV   A,0x1
    121E: 7C 03 B3 LCALL _UART_IntCntl
(0170)           
(0171)     UART_Start(UART_PARITY_NONE);         // Enable UART  
    1221: 50 00    MOV   A,0x0
    1223: 7C 03 84 LCALL _UART_Start
    1226: 20       POP   X
(0172)       
(0173)     M8C_EnableGInt ;                      // Enable Global Interrupts   
    1227: 71 01    OR    F,0x1
(0174) 	
(0175) 	PGA_1_Start(PGA_1_HIGHPOWER);
    1229: 10       PUSH  X
    122A: 50 03    MOV   A,0x3
    122C: 7C 05 0D LCALL PGA_1_SetPower|_PGA_1_Start|PGA_1_Start|_PGA_1_SetPower
(0176) 	
(0177)    ADCINC_Start(ADCINC_HIGHPOWER);       // Apply power to the SC Block   
    122F: 50 03    MOV   A,0x3
    1231: 7C 05 E4 LCALL _ADCINC_Start
(0178)    ADCINC_GetSamples(0);
    1234: 50 00    MOV   A,0x0
    1236: 7C 06 21 LCALL _ADCINC_GetSamples
(0179)          
(0180)  UART_CPutString("uruchomienie");
    1239: 50 01    MOV   A,0x1
    123B: 08       PUSH  A
    123C: 50 54    MOV   A,0x54
    123E: 5C       MOV   X,A
    123F: 18       POP   A
    1240: 7C 04 7F LCALL _UART_CPutString
    1243: 20       POP   X
(0181)  fScaleFactor = (float)5/(float)16384;
    1244: 55 8C 39 MOV   [fScaleFactor],0x39
    1247: 55 8D A0 MOV   [fScaleFactor+1],0xA0
    124A: 55 8E 00 MOV   [fScaleFactor+2],0x0
    124D: 55 8F 00 MOV   [fScaleFactor+3],0x0
(0182)     for(;;) {  
    1250: 80 0D    JMP   0x125E
(0183) 	 
(0184)      while(ADCINC_fIsDataAvailable() == 0)  // Loop until value ready   
(0185) 		nADCdata=ADCINC_iGetData();                   
    1252: 10       PUSH  X
    1253: 7C 06 69 LCALL ADCINC_wGetData|ADCINC_iGetData|_ADCINC_wGetData|_ADCINC_iGetData
    1256: 5A 10    MOV   [__r0|xn1_1],X
    1258: 20       POP   X
    1259: 53 A3    MOV   [nADCdata+1],A
    125B: 5F A2 10 MOV   [nADCdata],[__r0|xn1_1]
    125E: 10       PUSH  X
    125F: 7C 06 53 LCALL _ADCINC_fIsDataAvailable
    1262: 20       POP   X
    1263: 39 00    CMP   A,0x0
    1265: AF EC    JZ    0x1252
(0186)      	 nf_50_data = nf_50(nADCdata); // 50 Hz suppression 
    1267: 51 A2    MOV   A,[nADCdata]
    1269: 08       PUSH  A
    126A: 51 A3    MOV   A,[nADCdata+1]
    126C: 08       PUSH  A
    126D: 7C 06 A9 LCALL _nf_50
    1270: 5F A1 0F MOV   [nf_50_data+1],[__r1]
    1273: 5F A0 10 MOV   [nf_50_data],[__r0|xn1_1]
(0187)    nf_50_data1 = nf1_50(nf_50_data); 
    1276: 51 A0    MOV   A,[nf_50_data]
    1278: 08       PUSH  A
    1279: 51 A1    MOV   A,[nf_50_data+1]
    127B: 08       PUSH  A
    127C: 7C 08 37 LCALL _nf1_50
    127F: 38 FC    ADD   SP,0xFC
    1281: 5F 9F 0F MOV   [nf_50_data1+1],[__r1]
    1284: 5F 9E 10 MOV   [nf_50_data1],[__r0|xn1_1]
(0188)    nf_50_data2 = nf2_50(nf_50_data1);
    1287: 51 9E    MOV   A,[nf_50_data1]
    1289: 08       PUSH  A
    128A: 51 9F    MOV   A,[nf_50_data1+1]
    128C: 08       PUSH  A
    128D: 7C 09 C5 LCALL _nf2_50
    1290: 5F 9D 0F MOV   [nf_50_data2+1],[__r1]
    1293: 5F 9C 10 MOV   [nf_50_data2],[__r0|xn1_1]
(0189)    nf_50_data3 = nf3_50(nf_50_data2);
    1296: 51 9C    MOV   A,[nf_50_data2]
    1298: 08       PUSH  A
    1299: 51 9D    MOV   A,[nf_50_data2+1]
    129B: 08       PUSH  A
    129C: 98 B5    CALL  _nf3_50
    129E: 38 FC    ADD   SP,0xFC
    12A0: 5F 9B 0F MOV   [nf_50_data3+1],[__r1]
    12A3: 5F 9A 10 MOV   [nf_50_data3],[__r0|xn1_1]
(0190)    nf_50_data4 = nf4_50(nf_50_data3);
    12A6: 51 9A    MOV   A,[nf_50_data3]
    12A8: 08       PUSH  A
    12A9: 51 9B    MOV   A,[nf_50_data3+1]
    12AB: 08       PUSH  A
    12AC: 9A 33    CALL  _nf4_50
    12AE: 5F 99 0F MOV   [nf_50_data4+1],[__r1]
    12B1: 5F 98 10 MOV   [nf_50_data4],[__r0|xn1_1]
(0191)    nf_50_data5 = nf5_50(nf_50_data4);          
    12B4: 51 98    MOV   A,[nf_50_data4]
    12B6: 08       PUSH  A
    12B7: 51 99    MOV   A,[nf_50_data4+1]
    12B9: 08       PUSH  A
    12BA: 9B B3    CALL  _nf5_50
    12BC: 38 FC    ADD   SP,0xFC
    12BE: 5F 97 0F MOV   [nf_50_data5+1],[__r1]
    12C1: 5F 96 10 MOV   [nf_50_data5],[__r0|xn1_1]
(0192) 				
(0193) 				
(0194) 		ADCINC_fClearFlag();		
    12C4: 10       PUSH  X
    12C5: 7C 06 71 LCALL _ADCINC_fClearFlag
    12C8: 20       POP   X
(0195) 				
(0196) 		fVolts = fScaleFactor*(float)hpf1(af(nf_50_data5));
    12C9: 51 96    MOV   A,[nf_50_data5]
    12CB: 08       PUSH  A
    12CC: 51 97    MOV   A,[nf_50_data5+1]
    12CE: 08       PUSH  A
    12CF: 9D DB    CALL  _af
    12D1: 51 10    MOV   A,[__r0|xn1_1]
    12D3: 08       PUSH  A
    12D4: 51 0F    MOV   A,[__r1]
    12D6: 08       PUSH  A
    12D7: 9E 5B    CALL  _hpf1
    12D9: 38 FC    ADD   SP,0xFC
    12DB: 5F 0D 0F MOV   [__r3],[__r1]
    12DE: 5F 0E 10 MOV   [__r2],[__r0|xn1_1]
    12E1: 47 0E 80 TST   [__r2],0x80
    12E4: A0 09    JZ    0x12EE
    12E6: 55 0F FF MOV   [__r1],0xFF
    12E9: 55 10 FF MOV   [__r0|xn1_1],0xFF
    12EC: 80 07    JMP   0x12F4
    12EE: 55 0F 00 MOV   [__r1],0x0
    12F1: 55 10 00 MOV   [__r0|xn1_1],0x0
    12F4: 51 10    MOV   A,[__r0|xn1_1]
    12F6: 08       PUSH  A
    12F7: 51 0F    MOV   A,[__r1]
    12F9: 08       PUSH  A
    12FA: 51 0E    MOV   A,[__r2]
    12FC: 08       PUSH  A
    12FD: 51 0D    MOV   A,[__r3]
    12FF: 08       PUSH  A
    1300: 7C 16 35 LCALL 0x1635
    1303: 18       POP   A
    1304: 53 0D    MOV   [__r3],A
    1306: 18       POP   A
    1307: 53 0E    MOV   [__r2],A
    1309: 18       POP   A
    130A: 53 0F    MOV   [__r1],A
    130C: 18       POP   A
    130D: 08       PUSH  A
    130E: 51 0F    MOV   A,[__r1]
    1310: 08       PUSH  A
    1311: 51 0E    MOV   A,[__r2]
    1313: 08       PUSH  A
    1314: 51 0D    MOV   A,[__r3]
    1316: 08       PUSH  A
    1317: 51 8C    MOV   A,[fScaleFactor]
    1319: 08       PUSH  A
    131A: 51 8D    MOV   A,[fScaleFactor+1]
    131C: 08       PUSH  A
    131D: 51 8E    MOV   A,[fScaleFactor+2]
    131F: 08       PUSH  A
    1320: 51 8F    MOV   A,[fScaleFactor+3]
    1322: 08       PUSH  A
    1323: 7C 14 82 LCALL 0x1482
    1326: 18       POP   A
    1327: 53 93    MOV   [fVolts+3],A
    1329: 18       POP   A
    132A: 53 92    MOV   [fVolts+2],A
    132C: 18       POP   A
    132D: 53 91    MOV   [fVolts+1],A
    132F: 18       POP   A
    1330: 53 90    MOV   [fVolts],A
    1332: 38 FC    ADD   SP,0xFC
(0197) 		pResult = ftoa(fVolts,&iStatus );
    1334: 50 00    MOV   A,0x0
    1336: 08       PUSH  A
    1337: 50 88    MOV   A,0x88
    1339: 08       PUSH  A
    133A: 51 90    MOV   A,[fVolts]
    133C: 08       PUSH  A
    133D: 51 91    MOV   A,[fVolts+1]
    133F: 08       PUSH  A
    1340: 51 92    MOV   A,[fVolts+2]
    1342: 08       PUSH  A
    1343: 51 93    MOV   A,[fVolts+3]
    1345: 08       PUSH  A
    1346: 7C 19 15 LCALL _ftoa
    1349: 38 FA    ADD   SP,0xFA
    134B: 5F 8B 0F MOV   [pResult+1],[__r1]
    134E: 5F 8A 10 MOV   [pResult],[__r0|xn1_1]
(0198) 				
(0199)             // UART_PutSHexInt(nf_50_data5);
(0200) 	UART_CPutString("E");
    1351: 10       PUSH  X
    1352: 50 01    MOV   A,0x1
    1354: 08       PUSH  A
    1355: 50 52    MOV   A,0x52
    1357: 5C       MOV   X,A
    1358: 18       POP   A
    1359: 7C 04 7F LCALL _UART_CPutString
(0201) 			UART_PutString(pResult);
    135C: 51 8A    MOV   A,[pResult]
    135E: 08       PUSH  A
    135F: 51 8B    MOV   A,[pResult+1]
    1361: 5C       MOV   X,A
    1362: 18       POP   A
    1363: 7C 04 35 LCALL _UART_PutString
(0202) 	UART_CPutString("\n");
    1366: 50 01    MOV   A,0x1
    1368: 08       PUSH  A
    1369: 50 50    MOV   A,0x50
    136B: 5C       MOV   X,A
    136C: 18       POP   A
    136D: 7C 04 7F LCALL _UART_CPutString
    1370: 20       POP   X
(0203) 			// UART_CPutString("\n\r");
(0204) 
(0205) 	 
(0206) 		
(0207)       
(0208)    }  
    1371: 8E EC    JMP   0x125E
(0209) 
(0210) }
    1373: 8F FF    JMP   0x1373
_ltoa:
    170C: 10       PUSH  X
    170D: 4F       MOV   X,SP
    170E: 38 0B    ADD   SP,0xB
    1710: 52 F7    MOV   A,[X-9]
    1712: 54 02    MOV   [X+2],A
    1714: 52 F8    MOV   A,[X-8]
    1716: 54 03    MOV   [X+3],A
    1718: 52 F9    MOV   A,[X-7]
    171A: 54 04    MOV   [X+4],A
    171C: 52 FA    MOV   A,[X-6]
    171E: 54 05    MOV   [X+5],A
    1720: 3D F7 00 CMP   [X-9],0x0
    1723: B0 2C    JNZ   0x1750
    1725: 3D F8 00 CMP   [X-8],0x0
    1728: B0 27    JNZ   0x1750
    172A: 3D F9 00 CMP   [X-7],0x0
    172D: B0 22    JNZ   0x1750
    172F: 3D FA 00 CMP   [X-6],0x0
    1732: B0 1D    JNZ   0x1750
    1734: 52 FC    MOV   A,[X-4]
    1736: 53 0F    MOV   [__r1],A
    1738: 50 30    MOV   A,0x30
    173A: 3F 0F    MVI   [__r1],A
    173C: 52 FC    MOV   A,[X-4]
    173E: 01 01    ADD   A,0x1
    1740: 53 0F    MOV   [__r1],A
    1742: 50 00    MOV   A,0x0
    1744: 3F 0F    MVI   [__r1],A
    1746: 52 FC    MOV   A,[X-4]
    1748: 53 0F    MOV   [__r1],A
    174A: 52 FB    MOV   A,[X-5]
    174C: 53 10    MOV   [__r0|xn1_1],A
    174E: 81 C2    JMP   0x1911
    1750: 52 FA    MOV   A,[X-6]
    1752: 11 00    SUB   A,0x0
    1754: 52 F9    MOV   A,[X-7]
    1756: 19 00    SBB   A,0x0
    1758: 52 F8    MOV   A,[X-8]
    175A: 19 00    SBB   A,0x0
    175C: 52 F7    MOV   A,[X-9]
    175E: 31 80    XOR   A,0x80
    1760: 19 80    SBB   A,0x80
    1762: D0 38    JNC   0x179B
    1764: 3D F5 00 CMP   [X-11],0x0
    1767: B0 33    JNZ   0x179B
    1769: 3D F6 0A CMP   [X-10],0xA
    176C: B0 2E    JNZ   0x179B
    176E: 56 08 01 MOV   [X+8],0x1
    1771: 52 02    MOV   A,[X+2]
    1773: 73       CPL   A
    1774: 53 10    MOV   [__r0|xn1_1],A
    1776: 52 03    MOV   A,[X+3]
    1778: 73       CPL   A
    1779: 53 0F    MOV   [__r1],A
    177B: 52 04    MOV   A,[X+4]
    177D: 73       CPL   A
    177E: 53 0E    MOV   [__r2],A
    1780: 52 05    MOV   A,[X+5]
    1782: 73       CPL   A
    1783: 01 01    ADD   A,0x1
    1785: 54 05    MOV   [X+5],A
    1787: 51 0E    MOV   A,[__r2]
    1789: 09 00    ADC   A,0x0
    178B: 54 04    MOV   [X+4],A
    178D: 51 0F    MOV   A,[__r1]
    178F: 09 00    ADC   A,0x0
    1791: 54 03    MOV   [X+3],A
    1793: 51 10    MOV   A,[__r0|xn1_1]
    1795: 09 00    ADC   A,0x0
    1797: 54 02    MOV   [X+2],A
    1799: 80 04    JMP   0x179E
    179B: 56 08 00 MOV   [X+8],0x0
    179E: 52 FC    MOV   A,[X-4]
    17A0: 54 01    MOV   [X+1],A
    17A2: 52 F6    MOV   A,[X-10]
    17A4: 53 0D    MOV   [__r3],A
    17A6: 52 F5    MOV   A,[X-11]
    17A8: 53 0E    MOV   [__r2],A
    17AA: 47 0E 80 TST   [__r2],0x80
    17AD: A0 09    JZ    0x17B7
    17AF: 55 0F FF MOV   [__r1],0xFF
    17B2: 55 10 FF MOV   [__r0|xn1_1],0xFF
    17B5: 80 07    JMP   0x17BD
    17B7: 55 0F 00 MOV   [__r1],0x0
    17BA: 55 10 00 MOV   [__r0|xn1_1],0x0
    17BD: 51 10    MOV   A,[__r0|xn1_1]
    17BF: 08       PUSH  A
    17C0: 51 0F    MOV   A,[__r1]
    17C2: 08       PUSH  A
    17C3: 51 0E    MOV   A,[__r2]
    17C5: 08       PUSH  A
    17C6: 51 0D    MOV   A,[__r3]
    17C8: 08       PUSH  A
    17C9: 52 02    MOV   A,[X+2]
    17CB: 08       PUSH  A
    17CC: 52 03    MOV   A,[X+3]
    17CE: 08       PUSH  A
    17CF: 52 04    MOV   A,[X+4]
    17D1: 08       PUSH  A
    17D2: 52 05    MOV   A,[X+5]
    17D4: 08       PUSH  A
    17D5: 7C 13 75 LCALL 0x1375
    17D8: 38 FC    ADD   SP,0xFC
    17DA: 18       POP   A
    17DB: 53 0D    MOV   [__r3],A
    17DD: 18       POP   A
    17DE: 53 0E    MOV   [__r2],A
    17E0: 18       POP   A
    17E1: 18       POP   A
    17E2: 51 0D    MOV   A,[__r3]
    17E4: 54 0A    MOV   [X+10],A
    17E6: 51 0E    MOV   A,[__r2]
    17E8: 54 09    MOV   [X+9],A
    17EA: 50 09    MOV   A,0x9
    17EC: 13 0A    SUB   A,[X+10]
    17EE: 52 09    MOV   A,[X+9]
    17F0: 31 80    XOR   A,0x80
    17F2: 53 04    MOV   [__rX|xn_2],A
    17F4: 50 80    MOV   A,0x80
    17F6: 1A 04    SBB   A,[__rX|xn_2]
    17F8: C0 1D    JC    0x1816
    17FA: 52 01    MOV   A,[X+1]
    17FC: 53 0F    MOV   [__r1],A
    17FE: 52 00    MOV   A,[X+0]
    1800: 53 10    MOV   [__r0|xn1_1],A
    1802: 51 0F    MOV   A,[__r1]
    1804: 01 01    ADD   A,0x1
    1806: 54 01    MOV   [X+1],A
    1808: 51 10    MOV   A,[__r0|xn1_1]
    180A: 09 00    ADC   A,0x0
    180C: 54 00    MOV   [X+0],A
    180E: 52 0A    MOV   A,[X+10]
    1810: 01 30    ADD   A,0x30
    1812: 3F 0F    MVI   [__r1],A
    1814: 80 1B    JMP   0x1830
    1816: 52 01    MOV   A,[X+1]
    1818: 53 0F    MOV   [__r1],A
    181A: 52 00    MOV   A,[X+0]
    181C: 53 10    MOV   [__r0|xn1_1],A
    181E: 51 0F    MOV   A,[__r1]
    1820: 01 01    ADD   A,0x1
    1822: 54 01    MOV   [X+1],A
    1824: 51 10    MOV   A,[__r0|xn1_1]
    1826: 09 00    ADC   A,0x0
    1828: 54 00    MOV   [X+0],A
    182A: 52 0A    MOV   A,[X+10]
    182C: 01 57    ADD   A,0x57
    182E: 3F 0F    MVI   [__r1],A
    1830: 52 F6    MOV   A,[X-10]
    1832: 53 0D    MOV   [__r3],A
    1834: 52 F5    MOV   A,[X-11]
    1836: 53 0E    MOV   [__r2],A
    1838: 47 0E 80 TST   [__r2],0x80
    183B: A0 09    JZ    0x1845
    183D: 55 0F FF MOV   [__r1],0xFF
    1840: 55 10 FF MOV   [__r0|xn1_1],0xFF
    1843: 80 07    JMP   0x184B
    1845: 55 0F 00 MOV   [__r1],0x0
    1848: 55 10 00 MOV   [__r0|xn1_1],0x0
    184B: 51 10    MOV   A,[__r0|xn1_1]
    184D: 08       PUSH  A
    184E: 51 0F    MOV   A,[__r1]
    1850: 08       PUSH  A
    1851: 51 0E    MOV   A,[__r2]
    1853: 08       PUSH  A
    1854: 51 0D    MOV   A,[__r3]
    1856: 08       PUSH  A
    1857: 52 02    MOV   A,[X+2]
    1859: 08       PUSH  A
    185A: 52 03    MOV   A,[X+3]
    185C: 08       PUSH  A
    185D: 52 04    MOV   A,[X+4]
    185F: 08       PUSH  A
    1860: 52 05    MOV   A,[X+5]
    1862: 08       PUSH  A
    1863: 7C 13 75 LCALL 0x1375
    1866: 18       POP   A
    1867: 54 05    MOV   [X+5],A
    1869: 18       POP   A
    186A: 54 04    MOV   [X+4],A
    186C: 18       POP   A
    186D: 54 03    MOV   [X+3],A
    186F: 18       POP   A
    1870: 54 02    MOV   [X+2],A
    1872: 38 FC    ADD   SP,0xFC
    1874: 3D 02 00 CMP   [X+2],0x0
    1877: BF 2A    JNZ   0x17A2
    1879: 3D 03 00 CMP   [X+3],0x0
    187C: BF 25    JNZ   0x17A2
    187E: 3D 04 00 CMP   [X+4],0x0
    1881: BF 20    JNZ   0x17A2
    1883: 3D 05 00 CMP   [X+5],0x0
    1886: BF 1B    JNZ   0x17A2
    1888: 3D 08 00 CMP   [X+8],0x0
    188B: A0 19    JZ    0x18A5
    188D: 52 01    MOV   A,[X+1]
    188F: 53 0F    MOV   [__r1],A
    1891: 52 00    MOV   A,[X+0]
    1893: 53 10    MOV   [__r0|xn1_1],A
    1895: 51 0F    MOV   A,[__r1]
    1897: 01 01    ADD   A,0x1
    1899: 54 01    MOV   [X+1],A
    189B: 51 10    MOV   A,[__r0|xn1_1]
    189D: 09 00    ADC   A,0x0
    189F: 54 00    MOV   [X+0],A
    18A1: 50 2D    MOV   A,0x2D
    18A3: 3F 0F    MVI   [__r1],A
    18A5: 52 01    MOV   A,[X+1]
    18A7: 53 0F    MOV   [__r1],A
    18A9: 52 00    MOV   A,[X+0]
    18AB: 53 10    MOV   [__r0|xn1_1],A
    18AD: 51 0F    MOV   A,[__r1]
    18AF: 01 FF    ADD   A,0xFF
    18B1: 54 01    MOV   [X+1],A
    18B3: 51 10    MOV   A,[__r0|xn1_1]
    18B5: 09 FF    ADC   A,0xFF
    18B7: 54 00    MOV   [X+0],A
    18B9: 50 00    MOV   A,0x0
    18BB: 3F 0F    MVI   [__r1],A
    18BD: 52 FC    MOV   A,[X-4]
    18BF: 54 07    MOV   [X+7],A
    18C1: 80 3D    JMP   0x18FF
    18C3: 52 07    MOV   A,[X+7]
    18C5: 53 0F    MOV   [__r1],A
    18C7: 3E 0F    MVI   A,[__r1]
    18C9: 54 08    MOV   [X+8],A
    18CB: 52 07    MOV   A,[X+7]
    18CD: 53 0F    MOV   [__r1],A
    18CF: 52 06    MOV   A,[X+6]
    18D1: 53 10    MOV   [__r0|xn1_1],A
    18D3: 51 0F    MOV   A,[__r1]
    18D5: 01 01    ADD   A,0x1
    18D7: 54 07    MOV   [X+7],A
    18D9: 51 10    MOV   A,[__r0|xn1_1]
    18DB: 09 00    ADC   A,0x0
    18DD: 54 06    MOV   [X+6],A
    18DF: 52 01    MOV   A,[X+1]
    18E1: 53 0D    MOV   [__r3],A
    18E3: 3E 0D    MVI   A,[__r3]
    18E5: 3F 0F    MVI   [__r1],A
    18E7: 52 01    MOV   A,[X+1]
    18E9: 53 0F    MOV   [__r1],A
    18EB: 52 00    MOV   A,[X+0]
    18ED: 53 10    MOV   [__r0|xn1_1],A
    18EF: 51 0F    MOV   A,[__r1]
    18F1: 01 FF    ADD   A,0xFF
    18F3: 54 01    MOV   [X+1],A
    18F5: 51 10    MOV   A,[__r0|xn1_1]
    18F7: 09 FF    ADC   A,0xFF
    18F9: 54 00    MOV   [X+0],A
    18FB: 52 08    MOV   A,[X+8]
    18FD: 3F 0F    MVI   [__r1],A
    18FF: 52 01    MOV   A,[X+1]
    1901: 53 10    MOV   [__r0|xn1_1],A
    1903: 52 07    MOV   A,[X+7]
    1905: 3A 10    CMP   A,[__r0|xn1_1]
    1907: CF BB    JC    0x18C3
    1909: 52 FC    MOV   A,[X-4]
    190B: 53 0F    MOV   [__r1],A
    190D: 52 FB    MOV   A,[X-5]
    190F: 53 10    MOV   [__r0|xn1_1],A
    1911: 38 F5    ADD   SP,0xF5
    1913: 20       POP   X
    1914: 7F       RET   
_ftoa:
    1915: 10       PUSH  X
    1916: 4F       MOV   X,SP
    1917: 38 16    ADD   SP,0x16
    1919: 52 F8    MOV   A,[X-8]
    191B: 53 0F    MOV   [__r1],A
    191D: 50 00    MOV   A,0x0
    191F: 3F 0F    MVI   [__r1],A
    1921: 3F 0F    MVI   [__r1],A
    1923: 08       PUSH  A
    1924: 08       PUSH  A
    1925: 08       PUSH  A
    1926: 08       PUSH  A
    1927: 52 F9    MOV   A,[X-7]
    1929: 08       PUSH  A
    192A: 52 FA    MOV   A,[X-6]
    192C: 08       PUSH  A
    192D: 52 FB    MOV   A,[X-5]
    192F: 08       PUSH  A
    1930: 52 FC    MOV   A,[X-4]
    1932: 08       PUSH  A
    1933: 7C 14 34 LCALL 0x1434
    1936: 38 F8    ADD   SP,0xF8
    1938: 39 00    CMP   A,0x0
    193A: B0 15    JNZ   0x1950
    193C: 55 A6 30 MOV   [iData+2],0x30
    193F: 55 A7 2E MOV   [iData+3],0x2E
    1942: 55 A8 30 MOV   [iData+4],0x30
    1945: 55 A9 00 MOV   [iData+5],0x0
    1948: 55 0F A6 MOV   [__r1],0xA6
    194B: 55 10 00 MOV   [__r0|xn1_1],0x0
    194E: 83 66    JMP   0x1CB5
    1950: 52 F9    MOV   A,[X-7]
    1952: 54 06    MOV   [X+6],A
    1954: 52 FA    MOV   A,[X-6]
    1956: 54 07    MOV   [X+7],A
    1958: 52 FB    MOV   A,[X-5]
    195A: 54 08    MOV   [X+8],A
    195C: 52 FC    MOV   A,[X-4]
    195E: 54 09    MOV   [X+9],A
    1960: 52 06    MOV   A,[X+6]
    1962: 53 10    MOV   [__r0|xn1_1],A
    1964: 52 07    MOV   A,[X+7]
    1966: 53 0F    MOV   [__r1],A
    1968: 52 08    MOV   A,[X+8]
    196A: 53 0E    MOV   [__r2],A
    196C: 52 09    MOV   A,[X+9]
    196E: 53 0D    MOV   [__r3],A
    1970: 50 17    MOV   A,0x17
    1972: 68 10    ASR   [__r0|xn1_1]
    1974: 6E 0F    RRC   [__r1]
    1976: 6E 0E    RRC   [__r2]
    1978: 6E 0D    RRC   [__r3]
    197A: 78       DEC   A
    197B: BF F6    JNZ   0x1972
    197D: 51 0D    MOV   A,[__r3]
    197F: 11 7F    SUB   A,0x7F
    1981: 54 0B    MOV   [X+11],A
    1983: 50 00    MOV   A,0x0
    1985: 19 00    SBB   A,0x0
    1987: 54 0A    MOV   [X+10],A
    1989: 52 09    MOV   A,[X+9]
    198B: 53 0D    MOV   [__r3],A
    198D: 52 08    MOV   A,[X+8]
    198F: 53 0E    MOV   [__r2],A
    1991: 52 07    MOV   A,[X+7]
    1993: 53 0F    MOV   [__r1],A
    1995: 51 0D    MOV   A,[__r3]
    1997: 54 13    MOV   [X+19],A
    1999: 51 0E    MOV   A,[__r2]
    199B: 54 12    MOV   [X+18],A
    199D: 51 0F    MOV   A,[__r1]
    199F: 29 80    OR    A,0x80
    19A1: 54 11    MOV   [X+17],A
    19A3: 56 10 00 MOV   [X+16],0x0
    19A6: 56 02 00 MOV   [X+2],0x0
    19A9: 56 03 00 MOV   [X+3],0x0
    19AC: 56 04 00 MOV   [X+4],0x0
    19AF: 56 05 00 MOV   [X+5],0x0
    19B2: 56 0C 00 MOV   [X+12],0x0
    19B5: 56 0D 00 MOV   [X+13],0x0
    19B8: 56 0E 00 MOV   [X+14],0x0
    19BB: 56 0F 00 MOV   [X+15],0x0
    19BE: 52 0B    MOV   A,[X+11]
    19C0: 11 1F    SUB   A,0x1F
    19C2: 52 0A    MOV   A,[X+10]
    19C4: 31 80    XOR   A,0x80
    19C6: 19 80    SBB   A,0x80
    19C8: C0 15    JC    0x19DE
    19CA: 52 F8    MOV   A,[X-8]
    19CC: 53 0F    MOV   [__r1],A
    19CE: 50 FF    MOV   A,0xFF
    19D0: 3F 0F    MVI   [__r1],A
    19D2: 50 FE    MOV   A,0xFE
    19D4: 3F 0F    MVI   [__r1],A
    19D6: 55 0F 00 MOV   [__r1],0x0
    19D9: 55 10 00 MOV   [__r0|xn1_1],0x0
    19DC: 82 D8    JMP   0x1CB5
    19DE: 52 0B    MOV   A,[X+11]
    19E0: 11 E9    SUB   A,0xE9
    19E2: 52 0A    MOV   A,[X+10]
    19E4: 31 80    XOR   A,0x80
    19E6: 19 7F    SBB   A,0x7F
    19E8: D0 13    JNC   0x19FC
    19EA: 52 F8    MOV   A,[X-8]
    19EC: 53 0F    MOV   [__r1],A
    19EE: 50 FF    MOV   A,0xFF
    19F0: 3F 0F    MVI   [__r1],A
    19F2: 3F 0F    MVI   [__r1],A
    19F4: 55 0F 00 MOV   [__r1],0x0
    19F7: 55 10 00 MOV   [__r0|xn1_1],0x0
    19FA: 82 BA    JMP   0x1CB5
    19FC: 52 0B    MOV   A,[X+11]
    19FE: 11 17    SUB   A,0x17
    1A00: 52 0A    MOV   A,[X+10]
    1A02: 31 80    XOR   A,0x80
    1A04: 19 80    SBB   A,0x80
    1A06: C0 3A    JC    0x1A41
    1A08: 52 0B    MOV   A,[X+11]
    1A0A: 11 17    SUB   A,0x17
    1A0C: 53 0F    MOV   [__r1],A
    1A0E: 52 10    MOV   A,[X+16]
    1A10: 53 0C    MOV   [__r4|yn_2],A
    1A12: 52 11    MOV   A,[X+17]
    1A14: 53 0B    MOV   [__r5],A
    1A16: 52 12    MOV   A,[X+18]
    1A18: 53 0A    MOV   [__r6],A
    1A1A: 52 13    MOV   A,[X+19]
    1A1C: 53 09    MOV   [__r7],A
    1A1E: 51 0F    MOV   A,[__r1]
    1A20: 21 1F    AND   A,0x1F
    1A22: A0 0C    JZ    0x1A2F
    1A24: 65 09    ASL   [__r7]
    1A26: 6B 0A    RLC   [__r6]
    1A28: 6B 0B    RLC   [__r5]
    1A2A: 6B 0C    RLC   [__r4|yn_2]
    1A2C: 78       DEC   A
    1A2D: BF F6    JNZ   0x1A24
    1A2F: 51 0C    MOV   A,[__r4|yn_2]
    1A31: 54 0C    MOV   [X+12],A
    1A33: 51 0B    MOV   A,[__r5]
    1A35: 54 0D    MOV   [X+13],A
    1A37: 51 0A    MOV   A,[__r6]
    1A39: 54 0E    MOV   [X+14],A
    1A3B: 51 09    MOV   A,[__r7]
    1A3D: 54 0F    MOV   [X+15],A
    1A3F: 80 B5    JMP   0x1AF5
    1A41: 52 0B    MOV   A,[X+11]
    1A43: 11 00    SUB   A,0x0
    1A45: 52 0A    MOV   A,[X+10]
    1A47: 31 80    XOR   A,0x80
    1A49: 19 80    SBB   A,0x80
    1A4B: C0 70    JC    0x1ABC
    1A4D: 50 17    MOV   A,0x17
    1A4F: 13 0B    SUB   A,[X+11]
    1A51: 53 0F    MOV   [__r1],A
    1A53: 52 10    MOV   A,[X+16]
    1A55: 53 0C    MOV   [__r4|yn_2],A
    1A57: 52 11    MOV   A,[X+17]
    1A59: 53 0B    MOV   [__r5],A
    1A5B: 52 12    MOV   A,[X+18]
    1A5D: 53 0A    MOV   [__r6],A
    1A5F: 52 13    MOV   A,[X+19]
    1A61: 53 09    MOV   [__r7],A
    1A63: 51 0F    MOV   A,[__r1]
    1A65: 21 1F    AND   A,0x1F
    1A67: A0 0C    JZ    0x1A74
    1A69: 68 0C    ASR   [__r4|yn_2]
    1A6B: 6E 0B    RRC   [__r5]
    1A6D: 6E 0A    RRC   [__r6]
    1A6F: 6E 09    RRC   [__r7]
    1A71: 78       DEC   A
    1A72: BF F6    JNZ   0x1A69
    1A74: 51 0C    MOV   A,[__r4|yn_2]
    1A76: 54 0C    MOV   [X+12],A
    1A78: 51 0B    MOV   A,[__r5]
    1A7A: 54 0D    MOV   [X+13],A
    1A7C: 51 0A    MOV   A,[__r6]
    1A7E: 54 0E    MOV   [X+14],A
    1A80: 51 09    MOV   A,[__r7]
    1A82: 54 0F    MOV   [X+15],A
    1A84: 52 0B    MOV   A,[X+11]
    1A86: 01 01    ADD   A,0x1
    1A88: 53 0F    MOV   [__r1],A
    1A8A: 52 10    MOV   A,[X+16]
    1A8C: 53 0C    MOV   [__r4|yn_2],A
    1A8E: 52 11    MOV   A,[X+17]
    1A90: 53 0B    MOV   [__r5],A
    1A92: 52 12    MOV   A,[X+18]
    1A94: 53 0A    MOV   [__r6],A
    1A96: 52 13    MOV   A,[X+19]
    1A98: 53 09    MOV   [__r7],A
    1A9A: 51 0F    MOV   A,[__r1]
    1A9C: 21 1F    AND   A,0x1F
    1A9E: A0 0C    JZ    0x1AAB
    1AA0: 65 09    ASL   [__r7]
    1AA2: 6B 0A    RLC   [__r6]
    1AA4: 6B 0B    RLC   [__r5]
    1AA6: 6B 0C    RLC   [__r4|yn_2]
    1AA8: 78       DEC   A
    1AA9: BF F6    JNZ   0x1AA0
    1AAB: 51 09    MOV   A,[__r7]
    1AAD: 54 05    MOV   [X+5],A
    1AAF: 51 0A    MOV   A,[__r6]
    1AB1: 54 04    MOV   [X+4],A
    1AB3: 51 0B    MOV   A,[__r5]
    1AB5: 54 03    MOV   [X+3],A
    1AB7: 56 02 00 MOV   [X+2],0x0
    1ABA: 80 3A    JMP   0x1AF5
    1ABC: 52 0B    MOV   A,[X+11]
    1ABE: 01 01    ADD   A,0x1
    1AC0: 73       CPL   A
    1AC1: 11 FF    SUB   A,0xFF
    1AC3: 53 0F    MOV   [__r1],A
    1AC5: 52 13    MOV   A,[X+19]
    1AC7: 53 09    MOV   [__r7],A
    1AC9: 52 12    MOV   A,[X+18]
    1ACB: 53 0A    MOV   [__r6],A
    1ACD: 52 11    MOV   A,[X+17]
    1ACF: 53 0B    MOV   [__r5],A
    1AD1: 55 0C 00 MOV   [__r4|yn_2],0x0
    1AD4: 51 0F    MOV   A,[__r1]
    1AD6: 21 1F    AND   A,0x1F
    1AD8: A0 0C    JZ    0x1AE5
    1ADA: 68 0C    ASR   [__r4|yn_2]
    1ADC: 6E 0B    RRC   [__r5]
    1ADE: 6E 0A    RRC   [__r6]
    1AE0: 6E 09    RRC   [__r7]
    1AE2: 78       DEC   A
    1AE3: BF F6    JNZ   0x1ADA
    1AE5: 51 0C    MOV   A,[__r4|yn_2]
    1AE7: 54 02    MOV   [X+2],A
    1AE9: 51 0B    MOV   A,[__r5]
    1AEB: 54 03    MOV   [X+3],A
    1AED: 51 0A    MOV   A,[__r6]
    1AEF: 54 04    MOV   [X+4],A
    1AF1: 51 09    MOV   A,[__r7]
    1AF3: 54 05    MOV   [X+5],A
    1AF5: 56 01 A6 MOV   [X+1],0xA6
    1AF8: 56 00 00 MOV   [X+0],0x0
    1AFB: 52 09    MOV   A,[X+9]
    1AFD: 11 00    SUB   A,0x0
    1AFF: 52 08    MOV   A,[X+8]
    1B01: 19 00    SBB   A,0x0
    1B03: 52 07    MOV   A,[X+7]
    1B05: 19 00    SBB   A,0x0
    1B07: 52 06    MOV   A,[X+6]
    1B09: 31 80    XOR   A,0x80
    1B0B: 19 80    SBB   A,0x80
    1B0D: D0 19    JNC   0x1B27
    1B0F: 52 01    MOV   A,[X+1]
    1B11: 53 0F    MOV   [__r1],A
    1B13: 52 00    MOV   A,[X+0]
    1B15: 53 10    MOV   [__r0|xn1_1],A
    1B17: 51 0F    MOV   A,[__r1]
    1B19: 01 01    ADD   A,0x1
    1B1B: 54 01    MOV   [X+1],A
    1B1D: 51 10    MOV   A,[__r0|xn1_1]
    1B1F: 09 00    ADC   A,0x0
    1B21: 54 00    MOV   [X+0],A
    1B23: 50 2D    MOV   A,0x2D
    1B25: 3F 0F    MVI   [__r1],A
    1B27: 3D 0C 00 CMP   [X+12],0x0
    1B2A: B0 2A    JNZ   0x1B55
    1B2C: 3D 0D 00 CMP   [X+13],0x0
    1B2F: B0 25    JNZ   0x1B55
    1B31: 3D 0E 00 CMP   [X+14],0x0
    1B34: B0 20    JNZ   0x1B55
    1B36: 3D 0F 00 CMP   [X+15],0x0
    1B39: B0 1B    JNZ   0x1B55
    1B3B: 52 01    MOV   A,[X+1]
    1B3D: 53 0F    MOV   [__r1],A
    1B3F: 52 00    MOV   A,[X+0]
    1B41: 53 10    MOV   [__r0|xn1_1],A
    1B43: 51 0F    MOV   A,[__r1]
    1B45: 01 01    ADD   A,0x1
    1B47: 54 01    MOV   [X+1],A
    1B49: 51 10    MOV   A,[__r0|xn1_1]
    1B4B: 09 00    ADC   A,0x0
    1B4D: 54 00    MOV   [X+0],A
    1B4F: 50 30    MOV   A,0x30
    1B51: 3F 0F    MVI   [__r1],A
    1B53: 80 2D    JMP   0x1B81
    1B55: 50 00    MOV   A,0x0
    1B57: 08       PUSH  A
    1B58: 50 0A    MOV   A,0xA
    1B5A: 08       PUSH  A
    1B5B: 52 0C    MOV   A,[X+12]
    1B5D: 08       PUSH  A
    1B5E: 52 0D    MOV   A,[X+13]
    1B60: 08       PUSH  A
    1B61: 52 0E    MOV   A,[X+14]
    1B63: 08       PUSH  A
    1B64: 52 0F    MOV   A,[X+15]
    1B66: 08       PUSH  A
    1B67: 52 00    MOV   A,[X+0]
    1B69: 08       PUSH  A
    1B6A: 52 01    MOV   A,[X+1]
    1B6C: 08       PUSH  A
    1B6D: 7C 17 0C LCALL _ltoa
    1B70: 38 F8    ADD   SP,0xF8
    1B72: 80 06    JMP   0x1B79
    1B74: 77 01    INC   [X+1]
    1B76: 0F 00 00 ADC   [X+0],0x0
    1B79: 52 01    MOV   A,[X+1]
    1B7B: 53 0F    MOV   [__r1],A
    1B7D: 3E 0F    MVI   A,[__r1]
    1B7F: BF F4    JNZ   0x1B74
    1B81: 52 01    MOV   A,[X+1]
    1B83: 53 0F    MOV   [__r1],A
    1B85: 52 00    MOV   A,[X+0]
    1B87: 53 10    MOV   [__r0|xn1_1],A
    1B89: 51 0F    MOV   A,[__r1]
    1B8B: 01 01    ADD   A,0x1
    1B8D: 54 01    MOV   [X+1],A
    1B8F: 51 10    MOV   A,[__r0|xn1_1]
    1B91: 09 00    ADC   A,0x0
    1B93: 54 00    MOV   [X+0],A
    1B95: 50 2E    MOV   A,0x2E
    1B97: 3F 0F    MVI   [__r1],A
    1B99: 3D 02 00 CMP   [X+2],0x0
    1B9C: B0 2A    JNZ   0x1BC7
    1B9E: 3D 03 00 CMP   [X+3],0x0
    1BA1: B0 25    JNZ   0x1BC7
    1BA3: 3D 04 00 CMP   [X+4],0x0
    1BA6: B0 20    JNZ   0x1BC7
    1BA8: 3D 05 00 CMP   [X+5],0x0
    1BAB: B0 1B    JNZ   0x1BC7
    1BAD: 52 01    MOV   A,[X+1]
    1BAF: 53 0F    MOV   [__r1],A
    1BB1: 52 00    MOV   A,[X+0]
    1BB3: 53 10    MOV   [__r0|xn1_1],A
    1BB5: 51 0F    MOV   A,[__r1]
    1BB7: 01 01    ADD   A,0x1
    1BB9: 54 01    MOV   [X+1],A
    1BBB: 51 10    MOV   A,[__r0|xn1_1]
    1BBD: 09 00    ADC   A,0x0
    1BBF: 54 00    MOV   [X+0],A
    1BC1: 50 30    MOV   A,0x30
    1BC3: 3F 0F    MVI   [__r1],A
    1BC5: 80 E1    JMP   0x1CA7
    1BC7: 55 10 A6 MOV   [__r0|xn1_1],0xA6
    1BCA: 52 01    MOV   A,[X+1]
    1BCC: 12 10    SUB   A,[__r0|xn1_1]
    1BCE: 53 10    MOV   [__r0|xn1_1],A
    1BD0: 50 0F    MOV   A,0xF
    1BD2: 12 10    SUB   A,[__r0|xn1_1]
    1BD4: 11 01    SUB   A,0x1
    1BD6: 54 15    MOV   [X+21],A
    1BD8: 50 07    MOV   A,0x7
    1BDA: 3B 15    CMP   A,[X+21]
    1BDC: D0 04    JNC   0x1BE1
    1BDE: 56 15 07 MOV   [X+21],0x7
    1BE1: 56 14 00 MOV   [X+20],0x0
    1BE4: 80 93    JMP   0x1C78
    1BE6: 52 02    MOV   A,[X+2]
    1BE8: 53 10    MOV   [__r0|xn1_1],A
    1BEA: 52 03    MOV   A,[X+3]
    1BEC: 53 0F    MOV   [__r1],A
    1BEE: 52 04    MOV   A,[X+4]
    1BF0: 53 0E    MOV   [__r2],A
    1BF2: 52 05    MOV   A,[X+5]
    1BF4: 64       ASL   A
    1BF5: 53 0D    MOV   [__r3],A
    1BF7: 6B 0E    RLC   [__r2]
    1BF9: 6B 0F    RLC   [__r1]
    1BFB: 6B 10    RLC   [__r0|xn1_1]
    1BFD: 52 02    MOV   A,[X+2]
    1BFF: 53 0C    MOV   [__r4|yn_2],A
    1C01: 52 03    MOV   A,[X+3]
    1C03: 53 0B    MOV   [__r5],A
    1C05: 52 04    MOV   A,[X+4]
    1C07: 53 0A    MOV   [__r6],A
    1C09: 52 05    MOV   A,[X+5]
    1C0B: 53 09    MOV   [__r7],A
    1C0D: 50 03    MOV   A,0x3
    1C0F: 65 09    ASL   [__r7]
    1C11: 6B 0A    RLC   [__r6]
    1C13: 6B 0B    RLC   [__r5]
    1C15: 6B 0C    RLC   [__r4|yn_2]
    1C17: 78       DEC   A
    1C18: BF F6    JNZ   0x1C0F
    1C1A: 51 09    MOV   A,[__r7]
    1C1C: 02 0D    ADD   A,[__r3]
    1C1E: 54 05    MOV   [X+5],A
    1C20: 51 0A    MOV   A,[__r6]
    1C22: 0A 0E    ADC   A,[__r2]
    1C24: 54 04    MOV   [X+4],A
    1C26: 51 0B    MOV   A,[__r5]
    1C28: 0A 0F    ADC   A,[__r1]
    1C2A: 54 03    MOV   [X+3],A
    1C2C: 51 0C    MOV   A,[__r4|yn_2]
    1C2E: 0A 10    ADC   A,[__r0|xn1_1]
    1C30: 54 02    MOV   [X+2],A
    1C32: 52 01    MOV   A,[X+1]
    1C34: 53 0F    MOV   [__r1],A
    1C36: 52 00    MOV   A,[X+0]
    1C38: 53 10    MOV   [__r0|xn1_1],A
    1C3A: 51 0F    MOV   A,[__r1]
    1C3C: 01 01    ADD   A,0x1
    1C3E: 54 01    MOV   [X+1],A
    1C40: 51 10    MOV   A,[__r0|xn1_1]
    1C42: 09 00    ADC   A,0x0
    1C44: 54 00    MOV   [X+0],A
    1C46: 52 02    MOV   A,[X+2]
    1C48: 53 0C    MOV   [__r4|yn_2],A
    1C4A: 52 03    MOV   A,[X+3]
    1C4C: 53 0B    MOV   [__r5],A
    1C4E: 52 04    MOV   A,[X+4]
    1C50: 53 0A    MOV   [__r6],A
    1C52: 52 05    MOV   A,[X+5]
    1C54: 53 09    MOV   [__r7],A
    1C56: 50 18    MOV   A,0x18
    1C58: 68 0C    ASR   [__r4|yn_2]
    1C5A: 6E 0B    RRC   [__r5]
    1C5C: 6E 0A    RRC   [__r6]
    1C5E: 6E 09    RRC   [__r7]
    1C60: 78       DEC   A
    1C61: BF F6    JNZ   0x1C58
    1C63: 06 09 30 ADD   [__r7],0x30
    1C66: 0E 0A 00 ADC   [__r6],0x0
    1C69: 0E 0B 00 ADC   [__r5],0x0
    1C6C: 0E 0C 00 ADC   [__r4|yn_2],0x0
    1C6F: 51 09    MOV   A,[__r7]
    1C71: 3F 0F    MVI   [__r1],A
    1C73: 27 02 00 AND   [X+2],0x0
    1C76: 77 14    INC   [X+20]
    1C78: 52 14    MOV   A,[X+20]
    1C7A: 3B 15    CMP   A,[X+21]
    1C7C: CF 69    JC    0x1BE6
    1C7E: 52 01    MOV   A,[X+1]
    1C80: 01 FF    ADD   A,0xFF
    1C82: 54 01    MOV   [X+1],A
    1C84: 80 07    JMP   0x1C8C
    1C86: 52 01    MOV   A,[X+1]
    1C88: 01 FF    ADD   A,0xFF
    1C8A: 54 01    MOV   [X+1],A
    1C8C: 52 01    MOV   A,[X+1]
    1C8E: 53 0F    MOV   [__r1],A
    1C90: 3E 0F    MVI   A,[__r1]
    1C92: 39 30    CMP   A,0x30
    1C94: B0 0D    JNZ   0x1CA2
    1C96: 52 01    MOV   A,[X+1]
    1C98: 01 FF    ADD   A,0xFF
    1C9A: 53 0F    MOV   [__r1],A
    1C9C: 3E 0F    MVI   A,[__r1]
    1C9E: 39 2E    CMP   A,0x2E
    1CA0: BF E5    JNZ   0x1C86
    1CA2: 77 01    INC   [X+1]
    1CA4: 0F 00 00 ADC   [X+0],0x0
    1CA7: 52 01    MOV   A,[X+1]
    1CA9: 53 0F    MOV   [__r1],A
    1CAB: 50 00    MOV   A,0x0
    1CAD: 3F 0F    MVI   [__r1],A
    1CAF: 55 0F A6 MOV   [__r1],0xA6
    1CB2: 55 10 00 MOV   [__r0|xn1_1],0x0
    1CB5: 38 EA    ADD   SP,0xEA
    1CB7: 20       POP   X
    1CB8: 7F       RET   
--------------------------------------------------------------------------------


PSoC Designer Version: 5.0.1127.0

Copyright (C) 1994 - 2011 ImageCraft Creations Inc.
ImageCraft, 2625 Middlefield Rd #685, Palo Alto, CA 94306
info@imagecraft.com, phone (650) 493-9326 FAX (866) 889-4834
http://www.imagecraft.com
lcc source code (C) 1995, by David R. Hanson and AT&T. Reproduced by permission
Version 7.05.00.
