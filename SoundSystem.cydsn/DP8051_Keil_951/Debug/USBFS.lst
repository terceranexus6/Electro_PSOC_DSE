C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USBFS
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\USBFS.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\USBFS.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\DP
                    -8051_Keil_951\Debug/USBFS.lst) CD OT(2,SIZE) OJ(.\DP8051_Keil_951\Debug\USBFS.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: USBFS.c
   3          * Version 2.70
   4          *
   5          * Description:
   6          *  API for USBFS Component.
   7          *
   8          * Note:
   9          *  Many of the functions use endpoint number.  RAM arrays are sized with 9
  10          *  elements so they are indexed directly by epNumber.  The SIE and ARB
  11          *  registers are indexed by variations of epNumber - 1.
  12          *
  13          ********************************************************************************
  14          * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  15          * You may use this file only in accordance with the license, terms, conditions,
  16          * disclaimers, and limitations in the end user license agreement accompanying
  17          * the software package with which this file was provided.
  18          *******************************************************************************/
  19          
  20          #include <CyDmac.h>
  21          #include "USBFS.h"
  22          #include "USBFS_pvt.h"
  23          #include "USBFS_hid.h"
  24          #if(USBFS_DMA1_REMOVE == 0u)
                  #include "USBFS_ep1_dma.h"
              #endif   /*  USBFS_DMA1_REMOVE */
  27          #if(USBFS_DMA2_REMOVE == 0u)
  28              #include "USBFS_ep2_dma.h"
  29          #endif   /*  USBFS_DMA2_REMOVE */
  30          #if(USBFS_DMA3_REMOVE == 0u)
                  #include "USBFS_ep3_dma.h"
              #endif   /*  USBFS_DMA3_REMOVE */
  33          #if(USBFS_DMA4_REMOVE == 0u)
                  #include "USBFS_ep4_dma.h"
              #endif   /*  USBFS_DMA4_REMOVE */
  36          #if(USBFS_DMA5_REMOVE == 0u)
                  #include "USBFS_ep5_dma.h"
              #endif   /*  USBFS_DMA5_REMOVE */
  39          #if(USBFS_DMA6_REMOVE == 0u)
                  #include "USBFS_ep6_dma.h"
              #endif   /*  USBFS_DMA6_REMOVE */
  42          #if(USBFS_DMA7_REMOVE == 0u)
                  #include "USBFS_ep7_dma.h"
              #endif   /*  USBFS_DMA7_REMOVE */
  45          #if(USBFS_DMA8_REMOVE == 0u)
                  #include "USBFS_ep8_dma.h"
              #endif   /*  USBFS_DMA8_REMOVE */
  48          #if((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u))
                  #include "USBFS_EP_DMA_Done_isr.h"
                  #include "USBFS_EP8_DMA_Done_SR.h"
                  #include "USBFS_EP17_DMA_Done_SR.h"
              #endif /* ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u)) */
  53          
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 2   

  54          
  55          /***************************************
  56          * Global data allocation
  57          ***************************************/
  58          
  59          uint8 USBFS_initVar = 0u;
  60          #if(USBFS_EP_MM != USBFS__EP_MANUAL)
  61              uint8 USBFS_DmaChan[USBFS_MAX_EP];
  62              uint8 USBFS_DmaTd[USBFS_MAX_EP];
  63          #endif /*  USBFS_EP_MM */
  64          #if((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u))
                  static uint8 clearInDataRdyStatus = USBFS_ARB_EPX_CFG_DEFAULT;
                  uint8 USBFS_DmaNextTd[USBFS_MAX_EP];
                  const uint8 USBFS_epX_TD_TERMOUT_EN[USBFS_MAX_EP] =
                  {   0u,
                      USBFS_ep1_TD_TERMOUT_EN,
                      USBFS_ep2_TD_TERMOUT_EN,
                      USBFS_ep3_TD_TERMOUT_EN,
                      USBFS_ep4_TD_TERMOUT_EN,
                      USBFS_ep5_TD_TERMOUT_EN,
                      USBFS_ep6_TD_TERMOUT_EN,
                      USBFS_ep7_TD_TERMOUT_EN,
                      USBFS_ep8_TD_TERMOUT_EN
                  };
                  volatile uint16 USBFS_inLength[USBFS_MAX_EP];
                  const uint8 *USBFS_inDataPointer[USBFS_MAX_EP];
                  volatile uint8 USBFS_inBufFull[USBFS_MAX_EP];
              #endif /* ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u)) */
  82          
  83          
  84          /*******************************************************************************
  85          * Function Name: USBFS_Start
  86          ********************************************************************************
  87          *
  88          * Summary:
  89          *  This function initialize the USB SIE, arbiter and the
  90          *  endpoint APIs, including setting the D+ Pullup
  91          *
  92          * Parameters:
  93          *  device: Contains the device number of the desired device descriptor.
  94          *          The device number can be found in the Device Descriptor Tab of
  95          *          "Configure" dialog, under the settings of desired Device Descriptor,
  96          *          in the "Device Number" field.
  97          *  mode: The operating voltage. This determines whether the voltage regulator
  98          *        is enabled for 5V operation or if pass through mode is used for 3.3V
  99          *        operation. Symbolic names and their associated values are given in the
 100          *        following table.
 101          *       USBFS_3V_OPERATION - Disable voltage regulator and pass-thru
 102          *                                       Vcc for pull-up
 103          *       USBFS_5V_OPERATION - Enable voltage regulator and use
 104          *                                       regulator for pull-up
 105          *       USBFS_DWR_VDDD_OPERATION - Enable or Disable voltage
 106          *                         regulator depend on Vddd Voltage configuration in DWR.
 107          *
 108          * Return:
 109          *   None.
 110          *
 111          * Global variables:
 112          *  The USBFS_intiVar variable is used to indicate initial
 113          *  configuration of this component. The variable is initialized to zero (0u)
 114          *  and set to one (1u) the first time USBFS_Start() is called.
 115          *  This allows for component Re-Start without unnecessary re-initialization
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 3   

 116          *  in all subsequent calls to the USBFS_Start() routine.
 117          *  If re-initialization of the component is required the variable should be set
 118          *  to zero before call of UART_Start() routine, or the user may call
 119          *  USBFS_Init() and USBFS_InitComponent() as done
 120          *  in the USBFS_Start() routine.
 121          *
 122          * Side Effects:
 123          *   This function will reset all communication states to default.
 124          *
 125          * Reentrant:
 126          *  No.
 127          *
 128          *******************************************************************************/
 129          void USBFS_Start(uint8 device, uint8 mode) 
 130          {
 131   1          /* If not Initialized then initialize all required hardware and software */
 132   1          if(USBFS_initVar == 0u)
 133   1          {
 134   2              USBFS_Init();
 135   2              USBFS_initVar = 1u;
 136   2          }
 137   1          USBFS_InitComponent(device, mode);
 138   1      }
 139          
 140          
 141          /*******************************************************************************
 142          * Function Name: USBFS_Init
 143          ********************************************************************************
 144          *
 145          * Summary:
 146          *  Initialize component's hardware. Usually called in USBFS_Start().
 147          *
 148          * Parameters:
 149          *  None.
 150          *
 151          * Return:
 152          *  None.
 153          *
 154          * Reentrant:
 155          *  No.
 156          *
 157          *******************************************************************************/
 158          void USBFS_Init(void) 
 159          {
 160   1          uint8 enableInterrupts;
 161   1          #if(USBFS_EP_MM != USBFS__EP_MANUAL)
 162   1              uint16 i;
 163   1          #endif   /*  USBFS_EP_MM != USBFS__EP_MANUAL */
 164   1      
 165   1          enableInterrupts = CyEnterCriticalSection();
 166   1      
 167   1          /* Enable USB block  */
 168   1          USBFS_PM_ACT_CFG_REG |= USBFS_PM_ACT_EN_FSUSB;
 169   1          /* Enable USB block for Standby Power Mode */
 170   1          USBFS_PM_STBY_CFG_REG |= USBFS_PM_STBY_EN_FSUSB;
 171   1      
 172   1          /* Enable core clock */
 173   1          USBFS_USB_CLK_EN_REG = USBFS_USB_CLK_ENABLE;
 174   1      
 175   1          USBFS_CR1_REG = USBFS_CR1_ENABLE_LOCK;
 176   1      
 177   1          /* ENABLING USBIO PADS IN USB MODE FROM I/O MODE */
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 4   

 178   1          /* Ensure USB transmit enable is low (USB_USBIO_CR0.ten). - Manual Transmission - Disabled */
 179   1          USBFS_USBIO_CR0_REG &= ((uint8)(~USBFS_USBIO_CR0_TEN));
 180   1          CyDelayUs(0u);  /*~50ns delay */
 181   1          /* Disable the USBIO by asserting PM.USB_CR0.fsusbio_pd_n(Inverted)
 182   1          *  high. This will have been set low by the power manger out of reset.
 183   1          *  Also confirm USBIO pull-up disabled
 184   1          */
 185   1          USBFS_PM_USB_CR0_REG &= ((uint8)(~(USBFS_PM_USB_CR0_PD_N |
 186   1                                                        USBFS_PM_USB_CR0_PD_PULLUP_N)));
 187   1      
 188   1          /* Select iomode to USB mode*/
 189   1          USBFS_USBIO_CR1_REG &= ((uint8)(~USBFS_USBIO_CR1_IOMODE));
 190   1      
 191   1          /* Enable the USBIO reference by setting PM.USB_CR0.fsusbio_ref_en.*/
 192   1          USBFS_PM_USB_CR0_REG |= USBFS_PM_USB_CR0_REF_EN;
 193   1          /* The reference will be available 1 us after the regulator is enabled */
 194   1          CyDelayUs(1u);
 195   1          /* OR 40us after power restored */
 196   1          CyDelayUs(40u);
 197   1          /* Ensure the single ended disable bits are low (PRT15.INP_DIS[7:6])(input receiver enabled). */
 198   1          USBFS_DM_INP_DIS_REG &= ((uint8)(~USBFS_DM_MASK));
 199   1          USBFS_DP_INP_DIS_REG &= ((uint8)(~USBFS_DP_MASK));
 200   1      
 201   1          /* Enable USBIO */
 202   1          USBFS_PM_USB_CR0_REG |= USBFS_PM_USB_CR0_PD_N;
 203   1          CyDelayUs(2u);
 204   1          /* Set the USBIO pull-up enable */
 205   1          USBFS_PM_USB_CR0_REG |= USBFS_PM_USB_CR0_PD_PULLUP_N;
 206   1      
 207   1          /* Write WAx */
 208   1          CY_SET_REG8(USBFS_ARB_RW1_WA_PTR,     0u);
 209   1          CY_SET_REG8(USBFS_ARB_RW1_WA_MSB_PTR, 0u);
 210   1      
 211   1          #if(USBFS_EP_MM != USBFS__EP_MANUAL)
 212   1              /* Init transfer descriptor. This will be used to detect the DMA state - initialized or not. */
 213   1              for (i = 0u; i < USBFS_MAX_EP; i++)
 214   1              {
 215   2                  USBFS_DmaTd[i] = DMA_INVALID_TD;
 216   2                  #if ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u))
                              USBFS_DmaNextTd[i] = DMA_INVALID_TD;
                          #endif /* ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u)) */
 219   2              }
 220   1          #endif   /*  USBFS_EP_MM != USBFS__EP_MANUAL */
 221   1      
 222   1          CyExitCriticalSection(enableInterrupts);
 223   1      
 224   1      
 225   1          /* Set the bus reset Interrupt. */
 226   1          (void) CyIntSetVector(USBFS_BUS_RESET_VECT_NUM,   &USBFS_BUS_RESET_ISR);
 227   1          CyIntSetPriority(USBFS_BUS_RESET_VECT_NUM, USBFS_BUS_RESET_PRIOR);
 228   1      
 229   1          /* Set the SOF Interrupt. */
 230   1          #if(USBFS_SOF_ISR_REMOVE == 0u)
 231   1              (void) CyIntSetVector(USBFS_SOF_VECT_NUM,   &USBFS_SOF_ISR);
 232   1              CyIntSetPriority(USBFS_SOF_VECT_NUM, USBFS_SOF_PRIOR);
 233   1          #endif   /*  USBFS_SOF_ISR_REMOVE */
 234   1      
 235   1          /* Set the Control Endpoint Interrupt. */
 236   1          (void) CyIntSetVector(USBFS_EP_0_VECT_NUM,   &USBFS_EP_0_ISR);
 237   1          CyIntSetPriority(USBFS_EP_0_VECT_NUM, USBFS_EP_0_PRIOR);
 238   1      
 239   1          /* Set the Data Endpoint 1 Interrupt. */
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 5   

 240   1          #if(USBFS_EP1_ISR_REMOVE == 0u)
                      (void) CyIntSetVector(USBFS_EP_1_VECT_NUM,   &USBFS_EP_1_ISR);
                      CyIntSetPriority(USBFS_EP_1_VECT_NUM, USBFS_EP_1_PRIOR);
                  #endif   /*  USBFS_EP1_ISR_REMOVE */
 244   1      
 245   1          /* Set the Data Endpoint 2 Interrupt. */
 246   1          #if(USBFS_EP2_ISR_REMOVE == 0u)
 247   1              (void) CyIntSetVector(USBFS_EP_2_VECT_NUM,   &USBFS_EP_2_ISR);
 248   1              CyIntSetPriority(USBFS_EP_2_VECT_NUM, USBFS_EP_2_PRIOR);
 249   1          #endif   /*  USBFS_EP2_ISR_REMOVE */
 250   1      
 251   1          /* Set the Data Endpoint 3 Interrupt. */
 252   1          #if(USBFS_EP3_ISR_REMOVE == 0u)
                      (void) CyIntSetVector(USBFS_EP_3_VECT_NUM,   &USBFS_EP_3_ISR);
                      CyIntSetPriority(USBFS_EP_3_VECT_NUM, USBFS_EP_3_PRIOR);
                  #endif   /*  USBFS_EP3_ISR_REMOVE */
 256   1      
 257   1          /* Set the Data Endpoint 4 Interrupt. */
 258   1          #if(USBFS_EP4_ISR_REMOVE == 0u)
                      (void) CyIntSetVector(USBFS_EP_4_VECT_NUM,   &USBFS_EP_4_ISR);
                      CyIntSetPriority(USBFS_EP_4_VECT_NUM, USBFS_EP_4_PRIOR);
                  #endif   /*  USBFS_EP4_ISR_REMOVE */
 262   1      
 263   1          /* Set the Data Endpoint 5 Interrupt. */
 264   1          #if(USBFS_EP5_ISR_REMOVE == 0u)
                      (void) CyIntSetVector(USBFS_EP_5_VECT_NUM,   &USBFS_EP_5_ISR);
                      CyIntSetPriority(USBFS_EP_5_VECT_NUM, USBFS_EP_5_PRIOR);
                  #endif   /*  USBFS_EP5_ISR_REMOVE */
 268   1      
 269   1          /* Set the Data Endpoint 6 Interrupt. */
 270   1          #if(USBFS_EP6_ISR_REMOVE == 0u)
                      (void) CyIntSetVector(USBFS_EP_6_VECT_NUM,   &USBFS_EP_6_ISR);
                      CyIntSetPriority(USBFS_EP_6_VECT_NUM, USBFS_EP_6_PRIOR);
                  #endif   /*  USBFS_EP6_ISR_REMOVE */
 274   1      
 275   1           /* Set the Data Endpoint 7 Interrupt. */
 276   1          #if(USBFS_EP7_ISR_REMOVE == 0u)
                      (void) CyIntSetVector(USBFS_EP_7_VECT_NUM,   &USBFS_EP_7_ISR);
                      CyIntSetPriority(USBFS_EP_7_VECT_NUM, USBFS_EP_7_PRIOR);
                  #endif   /*  USBFS_EP7_ISR_REMOVE */
 280   1      
 281   1          /* Set the Data Endpoint 8 Interrupt. */
 282   1          #if(USBFS_EP8_ISR_REMOVE == 0u)
                      (void) CyIntSetVector(USBFS_EP_8_VECT_NUM,   &USBFS_EP_8_ISR);
                      CyIntSetPriority(USBFS_EP_8_VECT_NUM, USBFS_EP_8_PRIOR);
                  #endif   /*  USBFS_EP8_ISR_REMOVE */
 286   1      
 287   1          #if((USBFS_EP_MM != USBFS__EP_MANUAL) && (USBFS_ARB_ISR_REMOVE == 0u))
 288   1              /* Set the ARB Interrupt. */
 289   1              (void) CyIntSetVector(USBFS_ARB_VECT_NUM,   &USBFS_ARB_ISR);
 290   1              CyIntSetPriority(USBFS_ARB_VECT_NUM, USBFS_ARB_PRIOR);
 291   1          #endif   /*  USBFS_EP_MM != USBFS__EP_MANUAL */
 292   1      
 293   1      }
 294          
 295          
 296          /*******************************************************************************
 297          * Function Name: USBFS_InitComponent
 298          ********************************************************************************
 299          *
 300          * Summary:
 301          *  Initialize the component, except for the HW which is done one time in
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 6   

 302          *  the Start function.  This function pulls up D+.
 303          *
 304          * Parameters:
 305          *  device: Contains the device number of the desired device descriptor.
 306          *          The device number can be found in the Device Descriptor Tab of
 307          *          "Configure" dialog, under the settings of desired Device Descriptor,
 308          *          in the "Device Number" field.
 309          *  mode: The operating voltage. This determines whether the voltage regulator
 310          *        is enabled for 5V operation or if pass through mode is used for 3.3V
 311          *        operation. Symbolic names and their associated values are given in the
 312          *        following table.
 313          *       USBFS_3V_OPERATION - Disable voltage regulator and pass-thru
 314          *                                       Vcc for pull-up
 315          *       USBFS_5V_OPERATION - Enable voltage regulator and use
 316          *                                       regulator for pull-up
 317          *       USBFS_DWR_VDDD_OPERATION - Enable or Disable voltage
 318          *                         regulator depend on Vddd Voltage configuration in DWR.
 319          *
 320          * Return:
 321          *   None.
 322          *
 323          * Global variables:
 324          *   USBFS_device: Contains the device number of the desired device
 325          *       descriptor. The device number can be found in the Device Descriptor Tab
 326          *       of "Configure" dialog, under the settings of desired Device Descriptor,
 327          *       in the "Device Number" field.
 328          *   USBFS_transferState: This variable used by the communication
 329          *       functions to handle current transfer state. Initialized to
 330          *       TRANS_STATE_IDLE in this API.
 331          *   USBFS_configuration: Contains current configuration number
 332          *       which is set by the Host using SET_CONFIGURATION request.
 333          *       Initialized to zero in this API.
 334          *   USBFS_deviceAddress: Contains current device address. This
 335          *       variable is initialized to zero in this API. Host starts to communicate
 336          *      to device with address 0 and then set it to whatever value using
 337          *      SET_ADDRESS request.
 338          *   USBFS_deviceStatus: initialized to 0.
 339          *       This is two bit variable which contain power status in first bit
 340          *       (DEVICE_STATUS_BUS_POWERED or DEVICE_STATUS_SELF_POWERED) and remote
 341          *       wakeup status (DEVICE_STATUS_REMOTE_WAKEUP) in second bit.
 342          *   USBFS_lastPacketSize initialized to 0;
 343          *
 344          * Reentrant:
 345          *  No.
 346          *
 347          *******************************************************************************/
 348          void USBFS_InitComponent(uint8 device, uint8 mode) 
 349          {
 350   1          /* Initialize _hidProtocol variable to comply with
 351   1          *  HID 7.2.6 Set_Protocol Request:
 352   1          *  "When initialized, all devices default to report protocol."
 353   1          */
 354   1          #if defined(USBFS_ENABLE_HID_CLASS)
                      uint8 i;
              
                      for (i = 0u; i < USBFS_MAX_INTERFACES_NUMBER; i++)
                      {
                          USBFS_hidProtocol[i] = USBFS_PROTOCOL_REPORT;
                      }
                  #endif /* USBFS_ENABLE_HID_CLASS */
 362   1      
 363   1          /* Enable Interrupts. */
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 7   

 364   1          CyIntEnable(USBFS_BUS_RESET_VECT_NUM);
 365   1          CyIntEnable(USBFS_EP_0_VECT_NUM);
 366   1          #if(USBFS_EP1_ISR_REMOVE == 0u)
                      CyIntEnable(USBFS_EP_1_VECT_NUM);
                  #endif   /*  USBFS_EP1_ISR_REMOVE */
 369   1          #if(USBFS_EP2_ISR_REMOVE == 0u)
 370   1              CyIntEnable(USBFS_EP_2_VECT_NUM);
 371   1          #endif   /*  USBFS_EP2_ISR_REMOVE */
 372   1          #if(USBFS_EP3_ISR_REMOVE == 0u)
                      CyIntEnable(USBFS_EP_3_VECT_NUM);
                  #endif   /*  USBFS_EP3_ISR_REMOVE */
 375   1          #if(USBFS_EP4_ISR_REMOVE == 0u)
                      CyIntEnable(USBFS_EP_4_VECT_NUM);
                  #endif   /*  USBFS_EP4_ISR_REMOVE */
 378   1          #if(USBFS_EP5_ISR_REMOVE == 0u)
                      CyIntEnable(USBFS_EP_5_VECT_NUM);
                  #endif   /*  USBFS_EP5_ISR_REMOVE */
 381   1          #if(USBFS_EP6_ISR_REMOVE == 0u)
                      CyIntEnable(USBFS_EP_6_VECT_NUM);
                  #endif   /*  USBFS_EP6_ISR_REMOVE */
 384   1          #if(USBFS_EP7_ISR_REMOVE == 0u)
                      CyIntEnable(USBFS_EP_7_VECT_NUM);
                  #endif   /*  USBFS_EP7_ISR_REMOVE */
 387   1          #if(USBFS_EP8_ISR_REMOVE == 0u)
                      CyIntEnable(USBFS_EP_8_VECT_NUM);
                  #endif   /*  USBFS_EP8_ISR_REMOVE */
 390   1          #if((USBFS_EP_MM != USBFS__EP_MANUAL) && (USBFS_ARB_ISR_REMOVE == 0u))
 391   1              /* usb arb interrupt enable */
 392   1              USBFS_ARB_INT_EN_REG = USBFS_ARB_INT_MASK;
 393   1              CyIntEnable(USBFS_ARB_VECT_NUM);
 394   1          #endif   /*  USBFS_EP_MM != USBFS__EP_MANUAL */
 395   1      
 396   1          /* Arbiter configuration for DMA transfers */
 397   1          #if(USBFS_EP_MM != USBFS__EP_MANUAL)
 398   1              #if(USBFS_EP_MM == USBFS__EP_DMAMANUAL)
 399   1                  USBFS_ARB_CFG_REG = USBFS_ARB_CFG_MANUAL_DMA;
 400   1              #endif   /*  USBFS_EP_MM == USBFS__EP_DMAMANUAL */
 401   1              #if(USBFS_EP_MM == USBFS__EP_DMAAUTO)
                          /*Set cfg cmplt this rises DMA request when the full configuration is done */
                          USBFS_ARB_CFG_REG = USBFS_ARB_CFG_AUTO_DMA | USBFS_ARB_CFG_AUTO_MEM;
                          #if(USBFS_EP_DMA_AUTO_OPT == 0u)
                              /* Init interrupt which handles verification of the successful DMA transaction */
                              USBFS_EP_DMA_Done_isr_StartEx(USBFS_EP_DMA_DONE_ISR);
                              USBFS_EP17_DMA_Done_SR_InterruptEnable();
                              USBFS_EP8_DMA_Done_SR_InterruptEnable();
                          #endif /* USBFS_EP_DMA_AUTO_OPT == 0u */
                      #endif   /*  USBFS_EP_MM == USBFS__EP_DMAAUTO */
 411   1          #endif   /*  USBFS_EP_MM != USBFS__EP_MANUAL */
 412   1      
 413   1          USBFS_transferState = USBFS_TRANS_STATE_IDLE;
 414   1      
 415   1          /* USB Locking: Enabled, VRegulator: depend on mode or DWR Voltage configuration*/
 416   1          switch(mode)
 417   1          {
 418   2              case USBFS_3V_OPERATION:
 419   2                  USBFS_CR1_REG = USBFS_CR1_ENABLE_LOCK;
 420   2                  break;
 421   2              case USBFS_5V_OPERATION:
 422   2                  USBFS_CR1_REG = USBFS_CR1_ENABLE_LOCK | USBFS_CR1_REG_ENABLE;
 423   2                  break;
 424   2              default:   /*USBFS_DWR_VDDD_OPERATION */
 425   2                  #if(USBFS_VDDD_MV < USBFS_3500MV)
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 8   

 426   2                      USBFS_CR1_REG = USBFS_CR1_ENABLE_LOCK;
 427   2                  #else
                              USBFS_CR1_REG = USBFS_CR1_ENABLE_LOCK | USBFS_CR1_REG_ENABLE;
                          #endif /*  USBFS_VDDD_MV < USBFS_3500MV */
 430   2                  break;
 431   2          }
 432   1      
 433   1          /* Record the descriptor selection */
 434   1          USBFS_device = device;
 435   1      
 436   1          /* Clear all of the component data */
 437   1          USBFS_configuration = 0u;
 438   1          USBFS_interfaceNumber = 0u;
 439   1          USBFS_configurationChanged = 0u;
 440   1          USBFS_deviceAddress  = 0u;
 441   1          USBFS_deviceStatus = 0u;
 442   1      
 443   1          USBFS_lastPacketSize = 0u;
 444   1      
 445   1          /*  ACK Setup, Stall IN/OUT */
 446   1          CY_SET_REG8(USBFS_EP0_CR_PTR, USBFS_MODE_STALL_IN_OUT);
 447   1      
 448   1          /* Enable the SIE with an address 0 */
 449   1          CY_SET_REG8(USBFS_CR0_PTR, USBFS_CR0_ENABLE);
 450   1      
 451   1          /* Workaround for PSOC5LP */
 452   1          CyDelayCycles(1u);
 453   1      
 454   1          /* Finally, Enable d+ pullup and select iomode to USB mode*/
 455   1          CY_SET_REG8(USBFS_USBIO_CR1_PTR, USBFS_USBIO_CR1_USBPUEN);
 456   1      }
 457          
 458          
 459          /*******************************************************************************
 460          * Function Name: USBFS_ReInitComponent
 461          ********************************************************************************
 462          *
 463          * Summary:
 464          *  This function reinitialize the component configuration and is
 465          *  intend to be called from the Reset interrupt.
 466          *
 467          * Parameters:
 468          *  None.
 469          *
 470          * Return:
 471          *   None.
 472          *
 473          * Global variables:
 474          *   USBFS_device: Contains the device number of the desired device
 475          *        descriptor. The device number can be found in the Device Descriptor Tab
 476          *       of "Configure" dialog, under the settings of desired Device Descriptor,
 477          *       in the "Device Number" field.
 478          *   USBFS_transferState: This variable used by the communication
 479          *       functions to handle current transfer state. Initialized to
 480          *       TRANS_STATE_IDLE in this API.
 481          *   USBFS_configuration: Contains current configuration number
 482          *       which is set by the Host using SET_CONFIGURATION request.
 483          *       Initialized to zero in this API.
 484          *   USBFS_deviceAddress: Contains current device address. This
 485          *       variable is initialized to zero in this API. Host starts to communicate
 486          *      to device with address 0 and then set it to whatever value using
 487          *      SET_ADDRESS request.
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 9   

 488          *   USBFS_deviceStatus: initialized to 0.
 489          *       This is two bit variable which contain power status in first bit
 490          *       (DEVICE_STATUS_BUS_POWERED or DEVICE_STATUS_SELF_POWERED) and remote
 491          *       wakeup status (DEVICE_STATUS_REMOTE_WAKEUP) in second bit.
 492          *   USBFS_lastPacketSize initialized to 0;
 493          *
 494          * Reentrant:
 495          *  No.
 496          *
 497          *******************************************************************************/
 498          void USBFS_ReInitComponent(void) 
 499          {
 500   1          /* Initialize _hidProtocol variable to comply with HID 7.2.6 Set_Protocol
 501   1          *  Request: "When initialized, all devices default to report protocol."
 502   1          */
 503   1          #if defined(USBFS_ENABLE_HID_CLASS)
                      uint8 i;
              
                      for (i = 0u; i < USBFS_MAX_INTERFACES_NUMBER; i++)
                      {
                          USBFS_hidProtocol[i] = USBFS_PROTOCOL_REPORT;
                      }
                  #endif /* USBFS_ENABLE_HID_CLASS */
 511   1      
 512   1          USBFS_transferState = USBFS_TRANS_STATE_IDLE;
 513   1      
 514   1          /* Clear all of the component data */
 515   1          USBFS_configuration = 0u;
 516   1          USBFS_interfaceNumber = 0u;
 517   1          USBFS_configurationChanged = 0u;
 518   1          USBFS_deviceAddress  = 0u;
 519   1          USBFS_deviceStatus = 0u;
 520   1      
 521   1          USBFS_lastPacketSize = 0u;
 522   1      
 523   1      
 524   1          /*  ACK Setup, Stall IN/OUT */
 525   1          CY_SET_REG8(USBFS_EP0_CR_PTR, USBFS_MODE_STALL_IN_OUT);
 526   1      
 527   1          /* Enable the SIE with an address 0 */
 528   1          CY_SET_REG8(USBFS_CR0_PTR, USBFS_CR0_ENABLE);
 529   1      
 530   1      }
 531          
 532          
 533          /*******************************************************************************
 534          * Function Name: USBFS_Stop
 535          ********************************************************************************
 536          *
 537          * Summary:
 538          *  This function shuts down the USB function including to release
 539          *  the D+ Pullup and disabling the SIE.
 540          *
 541          * Parameters:
 542          *  None.
 543          *
 544          * Return:
 545          *  None.
 546          *
 547          * Global variables:
 548          *   USBFS_configuration: Contains current configuration number
 549          *       which is set by the Host using SET_CONFIGURATION request.
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 10  

 550          *       Initialized to zero in this API.
 551          *   USBFS_deviceAddress: Contains current device address. This
 552          *       variable is initialized to zero in this API. Host starts to communicate
 553          *      to device with address 0 and then set it to whatever value using
 554          *      SET_ADDRESS request.
 555          *   USBFS_deviceStatus: initialized to 0.
 556          *       This is two bit variable which contain power status in first bit
 557          *       (DEVICE_STATUS_BUS_POWERED or DEVICE_STATUS_SELF_POWERED) and remote
 558          *       wakeup status (DEVICE_STATUS_REMOTE_WAKEUP) in second bit.
 559          *   USBFS_configurationChanged: This variable is set to one after
 560          *       SET_CONFIGURATION request and cleared in this function.
 561          *   USBFS_intiVar variable is set to zero
 562          *
 563          *******************************************************************************/
 564          void USBFS_Stop(void) 
 565          {
 566   1      
 567   1          #if(USBFS_EP_MM != USBFS__EP_MANUAL)
 568   1              USBFS_Stop_DMA(USBFS_MAX_EP);     /* Stop all DMAs */
 569   1          #endif   /*  USBFS_EP_MM != USBFS__EP_MANUAL */
 570   1      
 571   1          /* Disable the SIE */
 572   1          USBFS_CR0_REG &= (uint8)(~USBFS_CR0_ENABLE);
 573   1          /* Disable the d+ pullup */
 574   1          USBFS_USBIO_CR1_REG &= (uint8)(~USBFS_USBIO_CR1_USBPUEN);
 575   1          /* Disable USB in ACT PM */
 576   1          USBFS_PM_ACT_CFG_REG &= (uint8)(~USBFS_PM_ACT_EN_FSUSB);
 577   1          /* Disable USB block for Standby Power Mode */
 578   1          USBFS_PM_STBY_CFG_REG &= (uint8)(~USBFS_PM_STBY_EN_FSUSB);
 579   1      
 580   1          /* Disable the reset and EP interrupts */
 581   1          CyIntDisable(USBFS_BUS_RESET_VECT_NUM);
 582   1          CyIntDisable(USBFS_EP_0_VECT_NUM);
 583   1          #if(USBFS_EP1_ISR_REMOVE == 0u)
                      CyIntDisable(USBFS_EP_1_VECT_NUM);
                  #endif   /*  USBFS_EP1_ISR_REMOVE */
 586   1          #if(USBFS_EP2_ISR_REMOVE == 0u)
 587   1              CyIntDisable(USBFS_EP_2_VECT_NUM);
 588   1          #endif   /*  USBFS_EP2_ISR_REMOVE */
 589   1          #if(USBFS_EP3_ISR_REMOVE == 0u)
                      CyIntDisable(USBFS_EP_3_VECT_NUM);
                  #endif   /*  USBFS_EP3_ISR_REMOVE */
 592   1          #if(USBFS_EP4_ISR_REMOVE == 0u)
                      CyIntDisable(USBFS_EP_4_VECT_NUM);
                  #endif   /*  USBFS_EP4_ISR_REMOVE */
 595   1          #if(USBFS_EP5_ISR_REMOVE == 0u)
                      CyIntDisable(USBFS_EP_5_VECT_NUM);
                  #endif   /*  USBFS_EP5_ISR_REMOVE */
 598   1          #if(USBFS_EP6_ISR_REMOVE == 0u)
                      CyIntDisable(USBFS_EP_6_VECT_NUM);
                  #endif   /*  USBFS_EP6_ISR_REMOVE */
 601   1          #if(USBFS_EP7_ISR_REMOVE == 0u)
                      CyIntDisable(USBFS_EP_7_VECT_NUM);
                  #endif   /*  USBFS_EP7_ISR_REMOVE */
 604   1          #if(USBFS_EP8_ISR_REMOVE == 0u)
                      CyIntDisable(USBFS_EP_8_VECT_NUM);
                  #endif   /*  USBFS_EP8_ISR_REMOVE */
 607   1      
 608   1          /* Clear all of the component data */
 609   1          USBFS_configuration = 0u;
 610   1          USBFS_interfaceNumber = 0u;
 611   1          USBFS_configurationChanged = 0u;
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 11  

 612   1          USBFS_deviceAddress  = 0u;
 613   1          USBFS_deviceStatus = 0u;
 614   1          USBFS_initVar = 0u;
 615   1      
 616   1      }
 617          
 618          
 619          /*******************************************************************************
 620          * Function Name: USBFS_CheckActivity
 621          ********************************************************************************
 622          *
 623          * Summary:
 624          *  Returns the activity status of the bus.  Clears the status hardware to
 625          *  provide fresh activity status on the next call of this routine.
 626          *
 627          * Parameters:
 628          *  None.
 629          *
 630          * Return:
 631          *  1 - If bus activity was detected since the last call to this function
 632          *  0 - If bus activity not was detected since the last call to this function
 633          *
 634          *******************************************************************************/
 635          uint8 USBFS_CheckActivity(void) 
 636          {
 637   1          uint8 r;
 638   1      
 639   1          r = CY_GET_REG8(USBFS_CR1_PTR);
 640   1          CY_SET_REG8(USBFS_CR1_PTR, (r & ((uint8)(~USBFS_CR1_BUS_ACTIVITY))));
 641   1      
 642   1          return((r & USBFS_CR1_BUS_ACTIVITY) >> USBFS_CR1_BUS_ACTIVITY_SHIFT);
 643   1      }
 644          
 645          
 646          /*******************************************************************************
 647          * Function Name: USBFS_GetConfiguration
 648          ********************************************************************************
 649          *
 650          * Summary:
 651          *  Returns the current configuration setting
 652          *
 653          * Parameters:
 654          *  None.
 655          *
 656          * Return:
 657          *  configuration.
 658          *
 659          *******************************************************************************/
 660          uint8 USBFS_GetConfiguration(void) 
 661          {
 662   1          return(USBFS_configuration);
 663   1      }
 664          
 665          
 666          /*******************************************************************************
 667          * Function Name: USBFS_IsConfigurationChanged
 668          ********************************************************************************
 669          *
 670          * Summary:
 671          *  Returns the clear on read configuration state. It is usefull when PC send
 672          *  double SET_CONFIGURATION request with same configuration number.
 673          *
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 12  

 674          * Parameters:
 675          *  None.
 676          *
 677          * Return:
 678          *  Not zero value when new configuration has been changed, otherwise zero is
 679          *  returned.
 680          *
 681          * Global variables:
 682          *   USBFS_configurationChanged: This variable is set to one after
 683          *       SET_CONFIGURATION request and cleared in this function.
 684          *
 685          *******************************************************************************/
 686          uint8 USBFS_IsConfigurationChanged(void) 
 687          {
 688   1          uint8 res = 0u;
 689   1      
 690   1          if(USBFS_configurationChanged != 0u)
 691   1          {
 692   2              res = USBFS_configurationChanged;
 693   2              USBFS_configurationChanged = 0u;
 694   2          }
 695   1      
 696   1          return(res);
 697   1      }
 698          
 699          
 700          /*******************************************************************************
 701          * Function Name: USBFS_GetInterfaceSetting
 702          ********************************************************************************
 703          *
 704          * Summary:
 705          *  Returns the alternate setting from current interface
 706          *
 707          * Parameters:
 708          *  uint8 interfaceNumber, interface number
 709          *
 710          * Return:
 711          *  Alternate setting.
 712          *
 713          *******************************************************************************/
 714          uint8  USBFS_GetInterfaceSetting(uint8 interfaceNumber)
 715                                                              
 716          {
 717   1          return(USBFS_interfaceSetting[interfaceNumber]);
 718   1      }
 719          
 720          
 721          /*******************************************************************************
 722          * Function Name: USBFS_GetEPState
 723          ********************************************************************************
 724          *
 725          * Summary:
 726          *  Returned the state of the requested endpoint.
 727          *
 728          * Parameters:
 729          *  epNumber: Endpoint Number
 730          *
 731          * Return:
 732          *  State of the requested endpoint.
 733          *
 734          *******************************************************************************/
 735          uint8 USBFS_GetEPState(uint8 epNumber) 
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 13  

 736          {
 737   1          return(USBFS_EP[epNumber].apiEpState);
 738   1      }
 739          
 740          
 741          /*******************************************************************************
 742          * Function Name: USBFS_GetEPCount
 743          ********************************************************************************
 744          *
 745          * Summary:
 746          *  This function supports Data Endpoints only(EP1-EP8).
 747          *  Returns the transfer count for the requested endpoint.  The value from
 748          *  the count registers includes 2 counts for the two byte checksum of the
 749          *  packet.  This function subtracts the two counts.
 750          *
 751          * Parameters:
 752          *  epNumber: Data Endpoint Number.
 753          *            Valid values are between 1 and 8.
 754          *
 755          * Return:
 756          *  Returns the current byte count from the specified endpoint or 0 for an
 757          *  invalid endpoint.
 758          *
 759          *******************************************************************************/
 760          uint16 USBFS_GetEPCount(uint8 epNumber) 
 761          {
 762   1          uint8 ri;
 763   1          uint16 result = 0u;
 764   1      
 765   1          if((epNumber > USBFS_EP0) && (epNumber < USBFS_MAX_EP))
 766   1          {
 767   2              ri = ((epNumber - USBFS_EP1) << USBFS_EPX_CNTX_ADDR_SHIFT);
 768   2      
 769   2              result = (uint8)(CY_GET_REG8((reg8 *)(USBFS_SIE_EP1_CNT0_IND + ri)) &
 770   2                                USBFS_EPX_CNT0_MASK);
 771   2              result = (result << 8u) | CY_GET_REG8((reg8 *)(USBFS_SIE_EP1_CNT1_IND + ri));
 772   2              result -= USBFS_EPX_CNTX_CRC_COUNT;
 773   2          }
 774   1          return(result);
 775   1      }
 776          
 777          
 778          #if(USBFS_EP_MM != USBFS__EP_MANUAL)
 779          
 780          
 781              /*******************************************************************************
 782              * Function Name: USBFS_InitEP_DMA
 783              ********************************************************************************
 784              *
 785              * Summary:
 786              *  This function allocates and initializes a DMA channel to be used by the
 787              *  USBFS_LoadInEP() or USBFS_ReadOutEP() APIs for data
 788              *  transfer.
 789              *
 790              * Parameters:
 791              *  epNumber: Contains the data endpoint number.
 792              *            Valid values are between 1 and 8.
 793              *  *pData: Pointer to a data array that is related to the EP transfers.
 794              *
 795              * Return:
 796              *  None.
 797              *
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 14  

 798              * Reentrant:
 799              *  No.
 800              *
 801              *******************************************************************************/
 802              void USBFS_InitEP_DMA(uint8 epNumber, const uint8* pData)
 803                                                                              
 804              {
 805   1              uint16 src;
 806   1              uint16 dst;
 807   1              #if (CY_PSOC3)                  /* PSoC 3 */
 808   1                  src = HI16(CYDEV_SRAM_BASE);
 809   1                  dst = HI16(CYDEV_PERIPH_BASE);
 810   1                  pData = pData;
 811   1              #else                           /* PSoC 5 */
                          if((USBFS_EP[epNumber].addr & USBFS_DIR_IN) != 0u )
                          {   /* for the IN EP source is the SRAM memory buffer */
                              src = HI16(pData);
                              dst = HI16(CYDEV_PERIPH_BASE);
                          }
                          else
                          {   /* for the OUT EP source is the SIE register */
                              src = HI16(CYDEV_PERIPH_BASE);
                              dst = HI16(pData);
                          }
                      #endif  /*  C51 */
 823   1              switch(epNumber)
 824   1              {
 825   2                  case USBFS_EP1:
 826   2                      #if(USBFS_DMA1_REMOVE == 0u)
                                  USBFS_DmaChan[epNumber] = USBFS_ep1_DmaInitialize(
                                      USBFS_DMA_BYTES_PER_BURST, USBFS_DMA_REQUEST_PER_BURST, src, dst);
                              #endif   /*  USBFS_DMA1_REMOVE */
 830   2                      break;
 831   2                  case USBFS_EP2:
 832   2                      #if(USBFS_DMA2_REMOVE == 0u)
 833   2                          USBFS_DmaChan[epNumber] = USBFS_ep2_DmaInitialize(
 834   2                              USBFS_DMA_BYTES_PER_BURST, USBFS_DMA_REQUEST_PER_BURST, src, dst);
 835   2                      #endif   /*  USBFS_DMA2_REMOVE */
 836   2                      break;
 837   2                  case USBFS_EP3:
 838   2                      #if(USBFS_DMA3_REMOVE == 0u)
                                  USBFS_DmaChan[epNumber] = USBFS_ep3_DmaInitialize(
                                      USBFS_DMA_BYTES_PER_BURST, USBFS_DMA_REQUEST_PER_BURST, src, dst);
                              #endif   /*  USBFS_DMA3_REMOVE */
 842   2                      break;
 843   2                  case USBFS_EP4:
 844   2                      #if(USBFS_DMA4_REMOVE == 0u)
                                  USBFS_DmaChan[epNumber] = USBFS_ep4_DmaInitialize(
                                      USBFS_DMA_BYTES_PER_BURST, USBFS_DMA_REQUEST_PER_BURST, src, dst);
                              #endif   /*  USBFS_DMA4_REMOVE */
 848   2                      break;
 849   2                  case USBFS_EP5:
 850   2                      #if(USBFS_DMA5_REMOVE == 0u)
                                  USBFS_DmaChan[epNumber] = USBFS_ep5_DmaInitialize(
                                      USBFS_DMA_BYTES_PER_BURST, USBFS_DMA_REQUEST_PER_BURST, src, dst);
                              #endif   /*  USBFS_DMA5_REMOVE */
 854   2                      break;
 855   2                  case USBFS_EP6:
 856   2                      #if(USBFS_DMA6_REMOVE == 0u)
                                  USBFS_DmaChan[epNumber] = USBFS_ep6_DmaInitialize(
                                      USBFS_DMA_BYTES_PER_BURST, USBFS_DMA_REQUEST_PER_BURST, src, dst);
                              #endif   /*  USBFS_DMA6_REMOVE */
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 15  

 860   2                      break;
 861   2                  case USBFS_EP7:
 862   2                      #if(USBFS_DMA7_REMOVE == 0u)
                                  USBFS_DmaChan[epNumber] = USBFS_ep7_DmaInitialize(
                                      USBFS_DMA_BYTES_PER_BURST, USBFS_DMA_REQUEST_PER_BURST, src, dst);
                              #endif   /*  USBFS_DMA7_REMOVE */
 866   2                      break;
 867   2                  case USBFS_EP8:
 868   2                      #if(USBFS_DMA8_REMOVE == 0u)
                                  USBFS_DmaChan[epNumber] = USBFS_ep8_DmaInitialize(
                                      USBFS_DMA_BYTES_PER_BURST, USBFS_DMA_REQUEST_PER_BURST, src, dst);
                              #endif   /*  USBFS_DMA8_REMOVE */
 872   2                      break;
 873   2                  default:
 874   2                      /* Do not support EP0 DMA transfers */
 875   2                      break;
 876   2              }
 877   1              if((epNumber > USBFS_EP0) && (epNumber < USBFS_MAX_EP))
 878   1              {
 879   2                  USBFS_DmaTd[epNumber] = CyDmaTdAllocate();
 880   2                  #if ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u))
                              USBFS_DmaNextTd[epNumber] = CyDmaTdAllocate();
                          #endif /*  ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u)) */
 883   2      
 884   2              }
 885   1          }
 886          
 887          
 888              /*******************************************************************************
 889              * Function Name: USBFS_Stop_DMA
 890              ********************************************************************************
 891              *
 892              * Summary: Stops and free DMA
 893              *
 894              * Parameters:
 895              *  epNumber: Contains the data endpoint number or
 896              *           USBFS_MAX_EP to stop all DMAs
 897              *
 898              * Return:
 899              *  None.
 900              *
 901              * Reentrant:
 902              *  No.
 903              *
 904              *******************************************************************************/
 905              void USBFS_Stop_DMA(uint8 epNumber) 
 906              {
 907   1              uint8 i;
 908   1              i = (epNumber < USBFS_MAX_EP) ? epNumber : USBFS_EP1;
 909   1              do
 910   1              {
 911   2                  if(USBFS_DmaTd[i] != DMA_INVALID_TD)
 912   2                  {
 913   3                      (void) CyDmaChDisable(USBFS_DmaChan[i]);
 914   3                      CyDmaTdFree(USBFS_DmaTd[i]);
 915   3                      USBFS_DmaTd[i] = DMA_INVALID_TD;
 916   3                  }
 917   2                  #if ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u))
                              if(USBFS_DmaNextTd[i] != DMA_INVALID_TD)
                              {
                                  CyDmaTdFree(USBFS_DmaNextTd[i]);
                                  USBFS_DmaNextTd[i] = DMA_INVALID_TD;
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 16  

                              }
                          #endif /* ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u)) */
 924   2                  i++;
 925   2              }while((i < USBFS_MAX_EP) && (epNumber == USBFS_MAX_EP));
 926   1          }
 927          
 928          #endif /*  USBFS_EP_MM != USBFS__EP_MANUAL */
 929          
 930          
 931          #if ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u))
              
              
                  /*******************************************************************************
                  * Function Name: USBFS_LoadNextInEP
                  ********************************************************************************
                  *
                  * Summary:
                  *  This internal function is used for IN endpoint DMA reconfiguration in
                  *  Auto DMA mode.
                  *
                  * Parameters:
                  *  epNumber: Contains the data endpoint number.
                  *  mode:   0 - Configure DMA to send the the rest of data.
                  *          1 - Configure DMA to repeat 2 last bytes of the first burst.
                  *
                  * Return:
                  *  None.
                  *
                  *******************************************************************************/
                  void USBFS_LoadNextInEP(uint8 epNumber, uint8 mode) 
                  {
                      reg16 *convert;
              
                      if(mode == 0u)
                      {
                          /* Configure DMA to send the the rest of data */
                          /* CyDmaTdSetConfiguration API is optimised to change only transfer length and configure TD */
                          convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[USBFS_DmaTd[epNumber]].TD0[0u];
                          /* Set transfer length */
                          CY_SET_REG16(convert, USBFS_inLength[epNumber] - USBFS_DMA_BYTES_PER_BURST);
                          /* CyDmaTdSetAddress API is optimized to change only source address */
                          convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[USBFS_DmaTd[epNumber]].TD1[0u];
                          CY_SET_REG16(convert, LO16((uint32)USBFS_inDataPointer[epNumber] +
                                                          USBFS_DMA_BYTES_PER_BURST));
                          USBFS_inBufFull[epNumber] = 1u;
                      }
                      else
                      {
                          /* Configure DMA to repeat 2 last bytes of the first burst. */
                          /* CyDmaTdSetConfiguration API is optimised to change only transfer length and configure TD */
                          convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[USBFS_DmaTd[epNumber]].TD0[0u];
                          /* Set transfer length */
                          CY_SET_REG16(convert, USBFS_DMA_BYTES_REPEAT);
                          /* CyDmaTdSetAddress API is optimized to change only source address */
                          convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[USBFS_DmaTd[epNumber]].TD1[0u];
                          CY_SET_REG16(convert,  LO16((uint32)USBFS_inDataPointer[epNumber] +
                                                 USBFS_DMA_BYTES_PER_BURST - USBFS_DMA_BYTES_REPEAT));
                      }
              
                      /* CyDmaChSetInitialTd API is optimised to init TD */
                      CY_DMA_CH_STRUCT_PTR[USBFS_DmaChan[epNumber]].basic_status[1u] = USBFS_DmaTd[epNumber];
                  }
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 17  

              #endif /* ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u)) */
 985          
 986          
 987          /*******************************************************************************
 988          * Function Name: USBFS_LoadInEP
 989          ********************************************************************************
 990          *
 991          * Summary:
 992          *  Loads and enables the specified USB data endpoint for an IN transfer.
 993          *
 994          * Parameters:
 995          *  epNumber: Contains the data endpoint number.
 996          *            Valid values are between 1 and 8.
 997          *  *pData: A pointer to a data array from which the data for the endpoint space
 998          *          is loaded.
 999          *  length: The number of bytes to transfer from the array and then send as a
1000          *          result of an IN request. Valid values are between 0 and 512.
1001          *
1002          * Return:
1003          *  None.
1004          *
1005          * Reentrant:
1006          *  No.
1007          *
1008          *******************************************************************************/
1009          void USBFS_LoadInEP(uint8 epNumber, const uint8 pData[], uint16 length)
1010                                                                                  
1011          {
1012   1          uint8 ri;
1013   1          reg8 *p;
1014   1          #if(USBFS_EP_MM == USBFS__EP_MANUAL)
                      uint16 i;
                  #endif /*  USBFS_EP_MM == USBFS__EP_MANUAL */
1017   1      
1018   1          if((epNumber > USBFS_EP0) && (epNumber < USBFS_MAX_EP))
1019   1          {
1020   2              ri = ((epNumber - USBFS_EP1) << USBFS_EPX_CNTX_ADDR_SHIFT);
1021   2              p = (reg8 *)(USBFS_ARB_RW1_DR_IND + ri);
1022   2      
1023   2              #if(USBFS_EP_MM != USBFS__EP_DMAAUTO)
1024   2                  /* Limits length to available buffer space, auto MM could send packets up to 1024 bytes */
1025   2                  if(length > (USBFS_EPX_DATA_BUF_MAX - USBFS_EP[epNumber].buffOffset))
1026   2                  {
1027   3                      length = USBFS_EPX_DATA_BUF_MAX - USBFS_EP[epNumber].buffOffset;
1028   3                  }
1029   2              #endif /*  USBFS_EP_MM != USBFS__EP_DMAAUTO */
1030   2      
1031   2              /* Set the count and data toggle */
1032   2              CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CNT0_IND + ri),
1033   2                                  (length >> 8u) | (USBFS_EP[epNumber].epToggle));
1034   2              CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CNT1_IND + ri),  length & 0xFFu);
1035   2      
1036   2              #if(USBFS_EP_MM == USBFS__EP_MANUAL)
                          if(pData != NULL)
                          {
                              /* Copy the data using the arbiter data register */
                              for (i = 0u; i < length; i++)
                              {
                                  CY_SET_REG8(p, pData[i]);
                              }
                          }
                          USBFS_EP[epNumber].apiEpState = USBFS_NO_EVENT_PENDING;
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 18  

                          /* Write the Mode register */
                          CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ri), USBFS_EP[epNumber].epMode);
                      #else
1049   2                  /* Init DMA if it was not initialized */
1050   2                  if (USBFS_DmaTd[epNumber] == DMA_INVALID_TD)
1051   2                  {
1052   3                      USBFS_InitEP_DMA(epNumber, pData);
1053   3                  }
1054   2              #endif /*  USBFS_EP_MM == USBFS__EP_MANUAL */
1055   2      
1056   2              #if(USBFS_EP_MM == USBFS__EP_DMAMANUAL)
1057   2                  USBFS_EP[epNumber].apiEpState = USBFS_NO_EVENT_PENDING;
1058   2                  if ((pData != NULL) && (length > 0u))
1059   2                  {
1060   3                      /* Enable DMA in mode2 for transferring data */
1061   3                      (void) CyDmaChDisable(USBFS_DmaChan[epNumber]);
1062   3                      (void) CyDmaTdSetConfiguration(USBFS_DmaTd[epNumber], length, CY_DMA_DISABLE_TD,
1063   3                                                                                       TD_TERMIN_EN | TD_INC_SRC
             -_ADR);
1064   3                      (void) CyDmaTdSetAddress(USBFS_DmaTd[epNumber],  LO16((uint32)pData), LO16((uint32)p));
1065   3                      /* Enable the DMA */
1066   3                      (void) CyDmaChSetInitialTd(USBFS_DmaChan[epNumber], USBFS_DmaTd[epNumber]);
1067   3                      (void) CyDmaChEnable(USBFS_DmaChan[epNumber], 1u);
1068   3                      /* Generate DMA request */
1069   3                      * (reg8 *)(USBFS_ARB_EP1_CFG_IND + ri) |= USBFS_ARB_EPX_CFG_DMA_REQ;
1070   3                      * (reg8 *)(USBFS_ARB_EP1_CFG_IND + ri) &= ((uint8)(~USBFS_ARB_EPX_CFG_DMA_REQ));
1071   3                      /* Mode register will be written in arb ISR after DMA transfer complete */
1072   3                  }
1073   2                  else
1074   2                  {
1075   3                      /* When zero-length packet - write the Mode register directly */
1076   3                      CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ri), USBFS_EP[epNumber].epMode);
1077   3                  }
1078   2              #endif /*  USBFS_EP_MM == USBFS__EP_DMAMANUAL */
1079   2      
1080   2              #if(USBFS_EP_MM == USBFS__EP_DMAAUTO)
                          if (pData != NULL)
                          {
                              /* Enable DMA in mode3 for transferring data */
                              (void) CyDmaChDisable(USBFS_DmaChan[epNumber]);
                          #if (USBFS_EP_DMA_AUTO_OPT == 0u)
                              USBFS_inLength[epNumber] = length;
                              USBFS_inDataPointer[epNumber] = pData;
                              /* Configure DMA to send the data only for the first burst */
                              (void) CyDmaTdSetConfiguration(USBFS_DmaTd[epNumber],
                                  (length > USBFS_DMA_BYTES_PER_BURST) ? USBFS_DMA_BYTES_PER_BURST : length,
                                  USBFS_DmaNextTd[epNumber], TD_TERMIN_EN | TD_INC_SRC_ADR);
                              (void) CyDmaTdSetAddress(USBFS_DmaTd[epNumber],  LO16((uint32)pData), LO16((uint32)p));
                              /* The second TD will be executed only when the first one fails.
                              *  The intention of this TD is to generate NRQ interrupt
                              *  and repeat 2 last bytes of the first burst.
                              */
                              (void) CyDmaTdSetConfiguration(USBFS_DmaNextTd[epNumber], 1u,
                                                             USBFS_DmaNextTd[epNumber],
                                                             USBFS_epX_TD_TERMOUT_EN[epNumber]);
                              /* Configure DmaNextTd to clear Data ready status */
                              (void) CyDmaTdSetAddress(USBFS_DmaNextTd[epNumber],  LO16((uint32)&clearInDataRdyStatus),
                                                                              LO16((uint32)(USBFS_ARB_EP1_CFG_IND + ri))
             -);
                          #else /* Configure DMA to send all data*/
                              (void) CyDmaTdSetConfiguration(USBFS_DmaTd[epNumber], length,
                                                             USBFS_DmaTd[epNumber], TD_TERMIN_EN | TD_INC_SRC_ADR);
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 19  

                              (void) CyDmaTdSetAddress(USBFS_DmaTd[epNumber],  LO16((uint32)pData), LO16((uint32)p));
                          #endif /* USBFS_EP_DMA_AUTO_OPT == 0u */    
              
                              /* Clear Any potential pending DMA requests before starting the DMA channel to transfer da
             -ta */
                              (void) CyDmaClearPendingDrq(USBFS_DmaChan[epNumber]);
                              /* Enable the DMA */
                              (void) CyDmaChSetInitialTd(USBFS_DmaChan[epNumber], USBFS_DmaTd[epNumber]);
                              (void) CyDmaChEnable(USBFS_DmaChan[epNumber], 1u);
                          }
                          else
                          {
                              USBFS_EP[epNumber].apiEpState = USBFS_NO_EVENT_PENDING;
                              if(length > 0u)
                              {
                              #if (USBFS_EP_DMA_AUTO_OPT == 0u)
                                  USBFS_inLength[epNumber] = length;
                                  USBFS_inBufFull[epNumber] = 0u;
                                  (void) CyDmaChDisable(USBFS_DmaChan[epNumber]);
                                  /* Configure DMA to send the data only for the first burst */
                                  (void) CyDmaTdSetConfiguration(
                                      USBFS_DmaTd[epNumber], (length > USBFS_DMA_BYTES_PER_BURST) ?
                                      USBFS_DMA_BYTES_PER_BURST : length,
                                      USBFS_DmaNextTd[epNumber], TD_TERMIN_EN | TD_INC_SRC_ADR );
                                  (void) CyDmaTdSetAddress(USBFS_DmaTd[epNumber],
                                                           LO16((uint32)USBFS_inDataPointer[epNumber]), LO16((uint32)p))
             -;
                                  /* Clear Any potential pending DMA requests before starting the DMA channel to transfe
             -r data */
                                  (void) CyDmaClearPendingDrq(USBFS_DmaChan[epNumber]);
                                  /* Enable the DMA */
                                  (void) CyDmaChSetInitialTd(USBFS_DmaChan[epNumber], USBFS_DmaTd[epNumber]);
                                  (void) CyDmaChEnable(USBFS_DmaChan[epNumber], 1u);
                              #endif /* (USBFS_EP_DMA_AUTO_OPT == 0u) */
              
                                  /* Set Data ready status, This will generate DMA request */
                                  #ifndef USBFS_MANUAL_IN_EP_ARM
                                      * (reg8 *)(USBFS_ARB_EP1_CFG_IND + ri) |= USBFS_ARB_EPX_CFG_IN_DATA_RDY;
                                  #endif  /* USBFS_MANUAL_IN_EP_ARM */
                                  /* Mode register will be written in arb ISR(In Buffer Full) after first DMA transfer c
             -omplete */
                              }
                              else
                              {
                                  /* When zero-length packet - write the Mode register directly */
                                  CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ri), USBFS_EP[epNumber].epMode);
                              }
                          }
                      #endif /*  USBFS_EP_MM == USBFS__EP_DMAAUTO */
1151   2          }
1152   1      }
1153          
1154          
1155          /*******************************************************************************
1156          * Function Name: USBFS_ReadOutEP
1157          ********************************************************************************
1158          *
1159          * Summary:
1160          *  Read data from an endpoint.  The application must call
1161          *  USBFS_GetEPState to see if an event is pending.
1162          *
1163          * Parameters:
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 20  

1164          *  epNumber: Contains the data endpoint number.
1165          *            Valid values are between 1 and 8.
1166          *  pData: A pointer to a data array from which the data for the endpoint space
1167          *         is loaded.
1168          *  length: The number of bytes to transfer from the USB Out endpoint and loads
1169          *          it into data array. Valid values are between 0 and 1023. The function
1170          *          moves fewer than the requested number of bytes if the host sends
1171          *          fewer bytes than requested.
1172          *
1173          * Returns:
1174          *  Number of bytes received, 0 for an invalid endpoint.
1175          *
1176          * Reentrant:
1177          *  No.
1178          *
1179          *******************************************************************************/
1180          uint16 USBFS_ReadOutEP(uint8 epNumber, uint8 pData[], uint16 length)
1181                                                                                  
1182          {
1183   1          uint8 ri;
1184   1          reg8 *p;
1185   1          #if(USBFS_EP_MM == USBFS__EP_MANUAL)
                      uint16 i;
                  #endif /*  USBFS_EP_MM == USBFS__EP_MANUAL */
1188   1          #if(USBFS_EP_MM != USBFS__EP_DMAAUTO)
1189   1              uint16 xferCount;
1190   1          #endif /*  USBFS_EP_MM != USBFS__EP_DMAAUTO */
1191   1      
1192   1          if((epNumber > USBFS_EP0) && (epNumber < USBFS_MAX_EP) && (pData != NULL))
1193   1          {
1194   2              ri = ((epNumber - USBFS_EP1) << USBFS_EPX_CNTX_ADDR_SHIFT);
1195   2              p = (reg8 *)(USBFS_ARB_RW1_DR_IND + ri);
1196   2      
1197   2              #if(USBFS_EP_MM != USBFS__EP_DMAAUTO)
1198   2                  /* Determine which is smaller the requested data or the available data */
1199   2                  xferCount = USBFS_GetEPCount(epNumber);
1200   2                  if (length > xferCount)
1201   2                  {
1202   3                      length = xferCount;
1203   3                  }
1204   2              #endif /*  USBFS_EP_MM != USBFS__EP_DMAAUTO */
1205   2      
1206   2              #if(USBFS_EP_MM == USBFS__EP_MANUAL)
                          /* Copy the data using the arbiter data register */
                          for (i = 0u; i < length; i++)
                          {
                              pData[i] = CY_GET_REG8(p);
                          }
              
                          /* (re)arming of OUT endpoint */
                          USBFS_EnableOutEP(epNumber);
                      #else
1216   2                  /*Init DMA if it was not initialized */
1217   2                  if(USBFS_DmaTd[epNumber] == DMA_INVALID_TD)
1218   2                  {
1219   3                      USBFS_InitEP_DMA(epNumber, pData);
1220   3                  }
1221   2      
1222   2              #endif /*  USBFS_EP_MM == USBFS__EP_MANUAL */
1223   2      
1224   2              #if(USBFS_EP_MM == USBFS__EP_DMAMANUAL)
1225   2                  /* Enable DMA in mode2 for transferring data */
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 21  

1226   2                  (void) CyDmaChDisable(USBFS_DmaChan[epNumber]);
1227   2                  (void) CyDmaTdSetConfiguration(USBFS_DmaTd[epNumber], length, CY_DMA_DISABLE_TD,
1228   2                                                                                      TD_TERMIN_EN | TD_INC_DST_
             -ADR);
1229   2                  (void) CyDmaTdSetAddress(USBFS_DmaTd[epNumber],  LO16((uint32)p), LO16((uint32)pData));
1230   2                  /* Enable the DMA */
1231   2                  (void) CyDmaChSetInitialTd(USBFS_DmaChan[epNumber], USBFS_DmaTd[epNumber]);
1232   2                  (void) CyDmaChEnable(USBFS_DmaChan[epNumber], 1u);
1233   2      
1234   2                  /* Generate DMA request */
1235   2                  * (reg8 *)(USBFS_ARB_EP1_CFG_IND + ri) |= USBFS_ARB_EPX_CFG_DMA_REQ;
1236   2                  * (reg8 *)(USBFS_ARB_EP1_CFG_IND + ri) &= ((uint8)(~USBFS_ARB_EPX_CFG_DMA_REQ));
1237   2                  /* Out EP will be (re)armed in arb ISR after transfer complete */
1238   2              #endif /*  USBFS_EP_MM == USBFS__EP_DMAMANUAL */
1239   2      
1240   2              #if(USBFS_EP_MM == USBFS__EP_DMAAUTO)
                          /* Enable DMA in mode3 for transferring data */
                          (void) CyDmaChDisable(USBFS_DmaChan[epNumber]);
                          (void) CyDmaTdSetConfiguration(USBFS_DmaTd[epNumber], length, USBFS_DmaTd[epNumber],
                                                                                              TD_TERMIN_EN | TD_INC_DST_
             -ADR);
                          (void) CyDmaTdSetAddress(USBFS_DmaTd[epNumber],  LO16((uint32)p), LO16((uint32)pData));
              
                          /* Clear Any potential pending DMA requests before starting the DMA channel to transfer data *
             -/
                          (void) CyDmaClearPendingDrq(USBFS_DmaChan[epNumber]);
                          /* Enable the DMA */
                          (void) CyDmaChSetInitialTd(USBFS_DmaChan[epNumber], USBFS_DmaTd[epNumber]);
                          (void) CyDmaChEnable(USBFS_DmaChan[epNumber], 1u);
                          /* Out EP will be (re)armed in arb ISR after transfer complete */
                      #endif /*  USBFS_EP_MM == USBFS__EP_DMAAUTO */
1254   2      
1255   2          }
1256   1          else
1257   1          {
1258   2              length = 0u;
1259   2          }
1260   1      
1261   1          return(length);
1262   1      }
1263          
1264          
1265          /*******************************************************************************
1266          * Function Name: USBFS_EnableOutEP
1267          ********************************************************************************
1268          *
1269          * Summary:
1270          *  This function enables an OUT endpoint.  It should not be
1271          *  called for an IN endpoint.
1272          *
1273          * Parameters:
1274          *  epNumber: Endpoint Number
1275          *            Valid values are between 1 and 8.
1276          *
1277          * Return:
1278          *   None.
1279          *
1280          * Global variables:
1281          *  USBFS_EP[epNumber].apiEpState - set to NO_EVENT_PENDING
1282          *
1283          * Reentrant:
1284          *  No.
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 22  

1285          *
1286          *******************************************************************************/
1287          void USBFS_EnableOutEP(uint8 epNumber) 
1288          {
1289   1          uint8 ri;
1290   1      
1291   1          if((epNumber > USBFS_EP0) && (epNumber < USBFS_MAX_EP))
1292   1          {
1293   2              ri = ((epNumber - USBFS_EP1) << USBFS_EPX_CNTX_ADDR_SHIFT);
1294   2              USBFS_EP[epNumber].apiEpState = USBFS_NO_EVENT_PENDING;
1295   2              /* Write the Mode register */
1296   2              CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ri), USBFS_EP[epNumber].epMode);
1297   2          }
1298   1      }
1299          
1300          
1301          /*******************************************************************************
1302          * Function Name: USBFS_DisableOutEP
1303          ********************************************************************************
1304          *
1305          * Summary:
1306          *  This function disables an OUT endpoint.  It should not be
1307          *  called for an IN endpoint.
1308          *
1309          * Parameters:
1310          *  epNumber: Endpoint Number
1311          *            Valid values are between 1 and 8.
1312          *
1313          * Return:
1314          *  None.
1315          *
1316          *******************************************************************************/
1317          void USBFS_DisableOutEP(uint8 epNumber) 
1318          {
1319   1          uint8 ri ;
1320   1      
1321   1          if((epNumber > USBFS_EP0) && (epNumber < USBFS_MAX_EP))
1322   1          {
1323   2              ri = ((epNumber - USBFS_EP1) << USBFS_EPX_CNTX_ADDR_SHIFT);
1324   2              /* Write the Mode register */
1325   2              CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ri), USBFS_MODE_NAK_OUT);
1326   2          }
1327   1      }
1328          
1329          
1330          /*******************************************************************************
1331          * Function Name: USBFS_Force
1332          ********************************************************************************
1333          *
1334          * Summary:
1335          *  Forces the bus state
1336          *
1337          * Parameters:
1338          *  bState
1339          *    USBFS_FORCE_J
1340          *    USBFS_FORCE_K
1341          *    USBFS_FORCE_SE0
1342          *    USBFS_FORCE_NONE
1343          *
1344          * Return:
1345          *  None.
1346          *
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 23  

1347          *******************************************************************************/
1348          void USBFS_Force(uint8 bState) 
1349          {
1350   1          CY_SET_REG8(USBFS_USBIO_CR0_PTR, bState);
1351   1      }
1352          
1353          
1354          /*******************************************************************************
1355          * Function Name: USBFS_GetEPAckState
1356          ********************************************************************************
1357          *
1358          * Summary:
1359          *  Returns the ACK of the CR0 Register (ACKD)
1360          *
1361          * Parameters:
1362          *  epNumber: Endpoint Number
1363          *            Valid values are between 1 and 8.
1364          *
1365          * Returns
1366          *  0 if nothing has been ACKD, non-=zero something has been ACKD
1367          *
1368          *******************************************************************************/
1369          uint8 USBFS_GetEPAckState(uint8 epNumber) 
1370          {
1371   1          uint8 ri;
1372   1          uint8 cr = 0u;
1373   1      
1374   1          if((epNumber > USBFS_EP0) && (epNumber < USBFS_MAX_EP))
1375   1          {
1376   2              ri = ((epNumber - USBFS_EP1) << USBFS_EPX_CNTX_ADDR_SHIFT);
1377   2              cr = CY_GET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ri)) & USBFS_MODE_ACKD;
1378   2          }
1379   1      
1380   1          return(cr);
1381   1      }
1382          
1383          
1384          /*******************************************************************************
1385          * Function Name: USBFS_SetPowerStatus
1386          ********************************************************************************
1387          *
1388          * Summary:
1389          *  Sets the device power status for reporting in the Get Device Status
1390          *  request
1391          *
1392          * Parameters:
1393          *  powerStatus: USBFS_DEVICE_STATUS_BUS_POWERED(0) - Bus Powered,
1394          *               USBFS_DEVICE_STATUS_SELF_POWERED(1) - Self Powered
1395          *
1396          * Return:
1397          *   None.
1398          *
1399          * Global variables:
1400          *  USBFS_deviceStatus - set power status
1401          *
1402          * Reentrant:
1403          *  No.
1404          *
1405          *******************************************************************************/
1406          void USBFS_SetPowerStatus(uint8 powerStatus) 
1407          {
1408   1          if (powerStatus != USBFS_DEVICE_STATUS_BUS_POWERED)
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 24  

1409   1          {
1410   2              USBFS_deviceStatus |=  USBFS_DEVICE_STATUS_SELF_POWERED;
1411   2          }
1412   1          else
1413   1          {
1414   2              USBFS_deviceStatus &=  ((uint8)(~USBFS_DEVICE_STATUS_SELF_POWERED));
1415   2          }
1416   1      }
1417          
1418          
1419          #if (USBFS_MON_VBUS == 1u)
              
                  /*******************************************************************************
                  * Function Name: USBFS_VBusPresent
                  ********************************************************************************
                  *
                  * Summary:
                  *  Determines VBUS presence for Self Powered Devices.
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  1 if VBUS is present, otherwise 0.
                  *
                  *******************************************************************************/
                  uint8 USBFS_VBusPresent(void) 
                  {
                      return((0u != (CY_GET_REG8(USBFS_VBUS_PS_PTR) & USBFS_VBUS_MASK)) ? 1u : 0u);
                  }
              
              #endif /* USBFS_MON_VBUS */
1441          
1442          
1443          /*******************************************************************************
1444          * Function Name: USBFS_RWUEnabled
1445          ********************************************************************************
1446          *
1447          * Summary:
1448          *  Returns TRUE if Remote Wake Up is enabled, otherwise FALSE
1449          *
1450          * Parameters:
1451          *   None.
1452          *
1453          * Return:
1454          *  TRUE -  Remote Wake Up Enabled
1455          *  FALSE - Remote Wake Up Disabled
1456          *
1457          * Global variables:
1458          *  USBFS_deviceStatus - checked to determine remote status
1459          *
1460          *******************************************************************************/
1461          uint8 USBFS_RWUEnabled(void) 
1462          {
1463   1          uint8 result = USBFS_FALSE;
1464   1          if((USBFS_deviceStatus & USBFS_DEVICE_STATUS_REMOTE_WAKEUP) != 0u)
1465   1          {
1466   2              result = USBFS_TRUE;
1467   2          }
1468   1      
1469   1          return(result);
1470   1      }
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 25  

1471          
1472          
1473          /* [] END OF FILE */
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 26  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _USBFS_Start (BEGIN)
                                           ; SOURCE LINE # 129
0000 900000      R     MOV     DPTR,#device
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#mode
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 132
000A 900000      R     MOV     DPTR,#USBFS_initVar
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 7009              JNZ     ?C0001
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
0012 120000      R     LCALL   USBFS_Init
                                           ; SOURCE LINE # 135
0015 900000      R     MOV     DPTR,#USBFS_initVar
0018 7401              MOV     A,#01H
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
001B         ?C0001:
                                           ; SOURCE LINE # 137
001B 900000      R     MOV     DPTR,#device
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#mode
0023 E0                MOVX    A,@DPTR
0024 FD                MOV     R5,A
0025 120000      R     LCALL   _USBFS_InitComponent
                                           ; SOURCE LINE # 138
0028 22                RET     
             ; FUNCTION _USBFS_Start (END)

             ; FUNCTION USBFS_Init (BEGIN)
                                           ; SOURCE LINE # 158
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 165
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#enableInterrupts
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 168
0008 9043A5            MOV     DPTR,#043A5H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 4401              ORL     A,#01H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 170
0013 9043B5            MOV     DPTR,#043B5H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 4401              ORL     A,#01H
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 27  

001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
001E 90609D            MOV     DPTR,#0609DH
0021 7401              MOV     A,#01H
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 175
0024 906009            MOV     DPTR,#06009H
0027 7402              MOV     A,#02H
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
002A 906010            MOV     DPTR,#06010H
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 547F              ANL     A,#07FH
0032 FF                MOV     R7,A
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 180
0035 7F00              MOV     R7,#00H
0037 7E00              MOV     R6,#00H
0039 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 185
003C 904394            MOV     DPTR,#04394H
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 EF                MOV     A,R7
0042 54F9              ANL     A,#0F9H
0044 FF                MOV     R7,A
0045 EF                MOV     A,R7
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
0047 906012            MOV     DPTR,#06012H
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C EF                MOV     A,R7
004D 54DF              ANL     A,#0DFH
004F FF                MOV     R7,A
0050 EF                MOV     A,R7
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 192
0052 904394            MOV     DPTR,#04394H
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
0057 EF                MOV     A,R7
0058 4401              ORL     A,#01H
005A FF                MOV     R7,A
005B EF                MOV     A,R7
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 194
005D 7F01              MOV     R7,#01H
005F 7E00              MOV     R6,#00H
0061 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 196
0064 7F28              MOV     R7,#028H
0066 7E00              MOV     R6,#00H
0068 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 198
006B 9051F8            MOV     DPTR,#051F8H
006E E0                MOVX    A,@DPTR
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 28  

006F FF                MOV     R7,A
0070 EF                MOV     A,R7
0071 547F              ANL     A,#07FH
0073 FF                MOV     R7,A
0074 EF                MOV     A,R7
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 199
0076 9051F8            MOV     DPTR,#051F8H
0079 E0                MOVX    A,@DPTR
007A FF                MOV     R7,A
007B EF                MOV     A,R7
007C 54BF              ANL     A,#0BFH
007E FF                MOV     R7,A
007F EF                MOV     A,R7
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
0081 904394            MOV     DPTR,#04394H
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 EF                MOV     A,R7
0087 4402              ORL     A,#02H
0089 FF                MOV     R7,A
008A EF                MOV     A,R7
008B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 203
008C 7F02              MOV     R7,#02H
008E 7E00              MOV     R6,#00H
0090 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 205
0093 904394            MOV     DPTR,#04394H
0096 E0                MOVX    A,@DPTR
0097 FF                MOV     R7,A
0098 EF                MOV     A,R7
0099 4404              ORL     A,#04H
009B FF                MOV     R7,A
009C EF                MOV     A,R7
009D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 208
009E 906084            MOV     DPTR,#06084H
00A1 E4                CLR     A
00A2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 209
00A3 906085            MOV     DPTR,#06085H
00A6 E4                CLR     A
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 213
00A8 900000      R     MOV     DPTR,#i
00AB E4                CLR     A
00AC F0                MOVX    @DPTR,A
00AD A3                INC     DPTR
00AE E4                CLR     A
00AF F0                MOVX    @DPTR,A
00B0         ?C0003:
00B0 900000      R     MOV     DPTR,#i
00B3 E0                MOVX    A,@DPTR
00B4 FE                MOV     R6,A
00B5 A3                INC     DPTR
00B6 E0                MOVX    A,@DPTR
00B7 FF                MOV     R7,A
00B8 C3                CLR     C
00B9 EF                MOV     A,R7
00BA 9409              SUBB    A,#09H
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 29  

00BC EE                MOV     A,R6
00BD 9400              SUBB    A,#00H
00BF 5021              JNC     ?C0004
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
00C1 900000      R     MOV     DPTR,#i
00C4 E0                MOVX    A,@DPTR
00C5 FE                MOV     R6,A
00C6 A3                INC     DPTR
00C7 E0                MOVX    A,@DPTR
00C8 FF                MOV     R7,A
00C9 7400        R     MOV     A,#LOW USBFS_DmaTd
00CB 2F                ADD     A,R7
00CC F582              MOV     DPL,A
00CE 7400        R     MOV     A,#HIGH USBFS_DmaTd
00D0 3E                ADDC    A,R6
00D1 F583              MOV     DPH,A
00D3 74FF              MOV     A,#0FFH
00D5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 219
00D6 900000      R     MOV     DPTR,#i
00D9 E4                CLR     A
00DA 75F001            MOV     B,#01H
00DD 120000      E     LCALL   ?C?IILDX
00E0 80CE              SJMP    ?C0003
00E2         ?C0004:
                                           ; SOURCE LINE # 222
00E2 900000      R     MOV     DPTR,#enableInterrupts
00E5 E0                MOVX    A,@DPTR
00E6 FF                MOV     R7,A
00E7 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 226
00EA 7C00        E     MOV     R4,#HIGH USBFS_BUS_RESET_ISR
00EC 7D00        E     MOV     R5,#LOW USBFS_BUS_RESET_ISR
00EE 7F17              MOV     R7,#017H
00F0 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 227
00F3 7D07              MOV     R5,#07H
00F5 7F17              MOV     R7,#017H
00F7 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 231
00FA 7C00        E     MOV     R4,#HIGH USBFS_SOF_ISR
00FC 7D00        E     MOV     R5,#LOW USBFS_SOF_ISR
00FE 7F15              MOV     R7,#015H
0100 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 232
0103 7D07              MOV     R5,#07H
0105 7F15              MOV     R7,#015H
0107 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 236
010A 7C00        E     MOV     R4,#HIGH USBFS_EP_0_ISR
010C 7D00        E     MOV     R5,#LOW USBFS_EP_0_ISR
010E 7F18              MOV     R7,#018H
0110 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 237
0113 7D07              MOV     R5,#07H
0115 7F18              MOV     R7,#018H
0117 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 247
011A 7C00        E     MOV     R4,#HIGH USBFS_EP_2_ISR
011C 7D00        E     MOV     R5,#LOW USBFS_EP_2_ISR
011E 7F01              MOV     R7,#01H
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 30  

0120 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 248
0123 7D07              MOV     R5,#07H
0125 7F01              MOV     R7,#01H
0127 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 289
012A 7C00        E     MOV     R4,#HIGH USBFS_ARB_ISR
012C 7D00        E     MOV     R5,#LOW USBFS_ARB_ISR
012E 7F16              MOV     R7,#016H
0130 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 290
0133 7D00              MOV     R5,#00H
0135 7F16              MOV     R7,#016H
0137 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 293
013A 22                RET     
             ; FUNCTION USBFS_Init (END)

             ; FUNCTION _USBFS_InitComponent (BEGIN)
                                           ; SOURCE LINE # 348
0000 900000      R     MOV     DPTR,#device
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#mode
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 364
000A 9044C2            MOV     DPTR,#044C2H
000D 7480              MOV     A,#080H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 365
0010 9044C3            MOV     DPTR,#044C3H
0013 7401              MOV     A,#01H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
0016 9044C0            MOV     DPTR,#044C0H
0019 7402              MOV     A,#02H
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 392
001C 90609E            MOV     DPTR,#0609EH
001F 7402              MOV     A,#02H
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 393
0022 9044C2            MOV     DPTR,#044C2H
0025 7440              MOV     A,#040H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 399
0028 90609C            MOV     DPTR,#0609CH
002B 7420              MOV     A,#020H
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 413
002E 900000      E     MOV     DPTR,#USBFS_transferState
0031 E4                CLR     A
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 416
0033 900000      R     MOV     DPTR,#mode
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 120000      E     LCALL   ?C?CCASE
003C 0000        R     DW      ?C0008
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 31  

003E 00                DB      00H
003F 0000        R     DW      ?C0009
0041 01                DB      01H
0042 0000              DW      00H
0044 0000        R     DW      ?C0010
                                           ; SOURCE LINE # 417
                                           ; SOURCE LINE # 418
0046         ?C0008:
                                           ; SOURCE LINE # 419
0046 906009            MOV     DPTR,#06009H
0049 7402              MOV     A,#02H
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 420
004C 800E              SJMP    ?C0007
                                           ; SOURCE LINE # 421
004E         ?C0009:
                                           ; SOURCE LINE # 422
004E 906009            MOV     DPTR,#06009H
0051 7403              MOV     A,#03H
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 423
0054 8006              SJMP    ?C0007
                                           ; SOURCE LINE # 424
0056         ?C0010:
                                           ; SOURCE LINE # 426
0056 906009            MOV     DPTR,#06009H
0059 7402              MOV     A,#02H
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 430
                                           ; SOURCE LINE # 431
005C         ?C0007:
                                           ; SOURCE LINE # 434
005C 900000      R     MOV     DPTR,#device
005F E0                MOVX    A,@DPTR
0060 FF                MOV     R7,A
0061 900000      E     MOV     DPTR,#USBFS_device
0064 EF                MOV     A,R7
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 437
0066 900000      E     MOV     DPTR,#USBFS_configuration
0069 E4                CLR     A
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 438
006B 900000      E     MOV     DPTR,#USBFS_interfaceNumber
006E E4                CLR     A
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 439
0070 900000      E     MOV     DPTR,#USBFS_configurationChanged
0073 E4                CLR     A
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 440
0075 900000      E     MOV     DPTR,#USBFS_deviceAddress
0078 E4                CLR     A
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 441
007A 900000      E     MOV     DPTR,#USBFS_deviceStatus
007D E4                CLR     A
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 443
007F 900000      E     MOV     DPTR,#USBFS_lastPacketSize
0082 E4                CLR     A
0083 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 32  

                                           ; SOURCE LINE # 446
0084 906028            MOV     DPTR,#06028H
0087 7403              MOV     A,#03H
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 449
008A 906008            MOV     DPTR,#06008H
008D 7480              MOV     A,#080H
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 452
0090 7F01              MOV     R7,#01H
0092 7E00              MOV     R6,#00H
0094 7D00              MOV     R5,#00H
0096 7C00              MOV     R4,#00H
0098 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 455
009B 906012            MOV     DPTR,#06012H
009E 7404              MOV     A,#04H
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 456
00A1 22                RET     
             ; FUNCTION _USBFS_InitComponent (END)

             ; FUNCTION USBFS_ReInitComponent (BEGIN)
                                           ; SOURCE LINE # 498
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 512
0000 900000      E     MOV     DPTR,#USBFS_transferState
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 515
0005 900000      E     MOV     DPTR,#USBFS_configuration
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 516
000A 900000      E     MOV     DPTR,#USBFS_interfaceNumber
000D E4                CLR     A
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 517
000F 900000      E     MOV     DPTR,#USBFS_configurationChanged
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 518
0014 900000      E     MOV     DPTR,#USBFS_deviceAddress
0017 E4                CLR     A
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 519
0019 900000      E     MOV     DPTR,#USBFS_deviceStatus
001C E4                CLR     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 521
001E 900000      E     MOV     DPTR,#USBFS_lastPacketSize
0021 E4                CLR     A
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 525
0023 906028            MOV     DPTR,#06028H
0026 7403              MOV     A,#03H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 528
0029 906008            MOV     DPTR,#06008H
002C 7480              MOV     A,#080H
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 530
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 33  

002F 22                RET     
             ; FUNCTION USBFS_ReInitComponent (END)

             ; FUNCTION USBFS_Stop (BEGIN)
                                           ; SOURCE LINE # 564
                                           ; SOURCE LINE # 565
                                           ; SOURCE LINE # 568
0000 7F09              MOV     R7,#09H
0002 120000      R     LCALL   _USBFS_Stop_DMA
                                           ; SOURCE LINE # 572
0005 906008            MOV     DPTR,#06008H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 547F              ANL     A,#07FH
000D FF                MOV     R7,A
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 574
0010 906012            MOV     DPTR,#06012H
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 54FB              ANL     A,#0FBH
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 576
001B 9043A5            MOV     DPTR,#043A5H
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 54FE              ANL     A,#0FEH
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 578
0026 9043B5            MOV     DPTR,#043B5H
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B EF                MOV     A,R7
002C 54FE              ANL     A,#0FEH
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 581
0031 9044CA            MOV     DPTR,#044CAH
0034 7480              MOV     A,#080H
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 582
0037 9044CB            MOV     DPTR,#044CBH
003A 7401              MOV     A,#01H
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 587
003D 9044C8            MOV     DPTR,#044C8H
0040 7402              MOV     A,#02H
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 609
0043 900000      E     MOV     DPTR,#USBFS_configuration
0046 E4                CLR     A
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 610
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 34  

0048 900000      E     MOV     DPTR,#USBFS_interfaceNumber
004B E4                CLR     A
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 611
004D 900000      E     MOV     DPTR,#USBFS_configurationChanged
0050 E4                CLR     A
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 612
0052 900000      E     MOV     DPTR,#USBFS_deviceAddress
0055 E4                CLR     A
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 613
0057 900000      E     MOV     DPTR,#USBFS_deviceStatus
005A E4                CLR     A
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 614
005C 900000      R     MOV     DPTR,#USBFS_initVar
005F E4                CLR     A
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 616
0061 22                RET     
             ; FUNCTION USBFS_Stop (END)

             ; FUNCTION USBFS_CheckActivity (BEGIN)
                                           ; SOURCE LINE # 635
                                           ; SOURCE LINE # 636
                                           ; SOURCE LINE # 639
0000 906009            MOV     DPTR,#06009H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#r
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 640
000A 900000      R     MOV     DPTR,#r
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 54FB              ANL     A,#0FBH
0012 FF                MOV     R7,A
0013 906009            MOV     DPTR,#06009H
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 642
0018 900000      R     MOV     DPTR,#r
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 5404              ANL     A,#04H
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 13                RRC     A
0023 13                RRC     A
0024 543F              ANL     A,#03FH
0026 FF                MOV     R7,A
                                           ; SOURCE LINE # 643
0027         ?C0014:
0027 22                RET     
             ; FUNCTION USBFS_CheckActivity (END)

             ; FUNCTION USBFS_GetConfiguration (BEGIN)
                                           ; SOURCE LINE # 660
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 35  

                                           ; SOURCE LINE # 661
                                           ; SOURCE LINE # 662
0000 900000      E     MOV     DPTR,#USBFS_configuration
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 663
0005         ?C0015:
0005 22                RET     
             ; FUNCTION USBFS_GetConfiguration (END)

             ; FUNCTION USBFS_IsConfigurationChanged (BEGIN)
                                           ; SOURCE LINE # 686
                                           ; SOURCE LINE # 687
                                           ; SOURCE LINE # 688
0000 900000      R     MOV     DPTR,#res
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 690
0005 900000      E     MOV     DPTR,#USBFS_configurationChanged
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 600F              JZ      ?C0016
                                           ; SOURCE LINE # 691
                                           ; SOURCE LINE # 692
000D 900000      E     MOV     DPTR,#USBFS_configurationChanged
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 900000      R     MOV     DPTR,#res
0015 EF                MOV     A,R7
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 693
0017 900000      E     MOV     DPTR,#USBFS_configurationChanged
001A E4                CLR     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 694
001C         ?C0016:
                                           ; SOURCE LINE # 696
001C 900000      R     MOV     DPTR,#res
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
                                           ; SOURCE LINE # 697
0021         ?C0017:
0021 22                RET     
             ; FUNCTION USBFS_IsConfigurationChanged (END)

             ; FUNCTION _USBFS_GetInterfaceSetting (BEGIN)
                                           ; SOURCE LINE # 714
0000 900000      R     MOV     DPTR,#interfaceNumber
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 716
                                           ; SOURCE LINE # 717
0005 900000      R     MOV     DPTR,#interfaceNumber
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 7400        E     MOV     A,#LOW USBFS_interfaceSetting
000C 2F                ADD     A,R7
000D F582              MOV     DPL,A
000F E4                CLR     A
0010 3400        E     ADDC    A,#HIGH USBFS_interfaceSetting
0012 F583              MOV     DPH,A
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 36  

0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
                                           ; SOURCE LINE # 718
0016         ?C0018:
0016 22                RET     
             ; FUNCTION _USBFS_GetInterfaceSetting (END)

             ; FUNCTION _USBFS_GetEPState (BEGIN)
                                           ; SOURCE LINE # 735
0000 900000      R     MOV     DPTR,#epNumber
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 736
                                           ; SOURCE LINE # 737
0005 900000      R     MOV     DPTR,#epNumber
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 75F00B            MOV     B,#0BH
000E A4                MUL     AB
000F 2400        E     ADD     A,#LOW USBFS_EP+01H
0011 F582              MOV     DPL,A
0013 E4                CLR     A
0014 3400        E     ADDC    A,#HIGH USBFS_EP+01H
0016 F583              MOV     DPH,A
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
                                           ; SOURCE LINE # 738
001A         ?C0019:
001A 22                RET     
             ; FUNCTION _USBFS_GetEPState (END)

             ; FUNCTION _USBFS_GetEPCount (BEGIN)
                                           ; SOURCE LINE # 760
0000 900000      R     MOV     DPTR,#epNumber
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 761
                                           ; SOURCE LINE # 763
0005 900000      R     MOV     DPTR,#result
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B E4                CLR     A
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 765
000D 900000      R     MOV     DPTR,#epNumber
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 EF                MOV     A,R7
0013 D3                SETB    C
0014 9400              SUBB    A,#00H
0016 5003              JNC     $ + 5H
0018 020000      R     LJMP    ?C0020
001B 900000      R     MOV     DPTR,#epNumber
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 C3                CLR     C
0022 9409              SUBB    A,#09H
0024 4003              JC      $ + 5H
0026 020000      R     LJMP    ?C0020
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 37  

                                           ; SOURCE LINE # 766
                                           ; SOURCE LINE # 767
0029 900000      R     MOV     DPTR,#epNumber
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E 7E00              MOV     R6,#00H
0030 EF                MOV     A,R7
0031 24FF              ADD     A,#0FFH
0033 FF                MOV     R7,A
0034 EE                MOV     A,R6
0035 34FF              ADDC    A,#0FFH
0037 FE                MOV     R6,A
0038 EF                MOV     A,R7
0039 C4                SWAP    A
003A F8                MOV     R0,A
003B 540F              ANL     A,#0FH
003D C8                XCH     A,R0
003E 68                XRL     A,R0
003F FF                MOV     R7,A
0040 EE                MOV     A,R6
0041 C4                SWAP    A
0042 54F0              ANL     A,#0F0H
0044 48                ORL     A,R0
0045 FE                MOV     R6,A
0046 900000      R     MOV     DPTR,#ri
0049 EF                MOV     A,R7
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 769
004B 900000      R     MOV     DPTR,#ri
004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
0050 7E00              MOV     R6,#00H
0052 EF                MOV     A,R7
0053 240C              ADD     A,#0CH
0055 FF                MOV     R7,A
0056 EE                MOV     A,R6
0057 3460              ADDC    A,#060H
0059 FE                MOV     R6,A
005A 8F82              MOV     DPL,R7
005C 8E83              MOV     DPH,R6
005E E0                MOVX    A,@DPTR
005F FF                MOV     R7,A
0060 EF                MOV     A,R7
0061 540F              ANL     A,#0FH
0063 FF                MOV     R7,A
0064 7E00              MOV     R6,#00H
0066 900000      R     MOV     DPTR,#result
0069 EE                MOV     A,R6
006A F0                MOVX    @DPTR,A
006B A3                INC     DPTR
006C EF                MOV     A,R7
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 771
006E 900000      R     MOV     DPTR,#ri
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
0073 7E00              MOV     R6,#00H
0075 EF                MOV     A,R7
0076 240D              ADD     A,#0DH
0078 FF                MOV     R7,A
0079 EE                MOV     A,R6
007A 3460              ADDC    A,#060H
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 38  

007C FE                MOV     R6,A
007D 8F82              MOV     DPL,R7
007F 8E83              MOV     DPH,R6
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
0083 EF                MOV     A,R7
0084 FD                MOV     R5,A
0085 7C00              MOV     R4,#00H
0087 900000      R     MOV     DPTR,#result
008A E0                MOVX    A,@DPTR
008B FE                MOV     R6,A
008C A3                INC     DPTR
008D E0                MOVX    A,@DPTR
008E FF                MOV     R7,A
008F EF                MOV     A,R7
0090 7F00              MOV     R7,#00H
0092 FE                MOV     R6,A
0093 EE                MOV     A,R6
0094 4C                ORL     A,R4
0095 FE                MOV     R6,A
0096 EF                MOV     A,R7
0097 4D                ORL     A,R5
0098 FF                MOV     R7,A
0099 900000      R     MOV     DPTR,#result
009C EE                MOV     A,R6
009D F0                MOVX    @DPTR,A
009E A3                INC     DPTR
009F EF                MOV     A,R7
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 772
00A1 900000      R     MOV     DPTR,#result
00A4 74FF              MOV     A,#0FFH
00A6 75F0FE            MOV     B,#0FEH
00A9 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 773
00AC         ?C0020:
                                           ; SOURCE LINE # 774
00AC 900000      R     MOV     DPTR,#result
00AF E0                MOVX    A,@DPTR
00B0 FE                MOV     R6,A
00B1 A3                INC     DPTR
00B2 E0                MOVX    A,@DPTR
00B3 FF                MOV     R7,A
                                           ; SOURCE LINE # 775
00B4         ?C0021:
00B4 22                RET     
             ; FUNCTION _USBFS_GetEPCount (END)

             ; FUNCTION _USBFS_InitEP_DMA (BEGIN)
                                           ; SOURCE LINE # 802
0000 900000      R     MOV     DPTR,#epNumber
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#pData
0008 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 804
                                           ; SOURCE LINE # 808
000B 900000      R     MOV     DPTR,#src
000E E4                CLR     A
000F F0                MOVX    @DPTR,A
0010 A3                INC     DPTR
0011 E4                CLR     A
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 39  

0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 809
0013 900000      R     MOV     DPTR,#dst
0016 E4                CLR     A
0017 F0                MOVX    @DPTR,A
0018 A3                INC     DPTR
0019 E4                CLR     A
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 810
001B 900000      R     MOV     DPTR,#pData
001E 120000      E     LCALL   ?C?PLDXDATA
0021 900000      R     MOV     DPTR,#pData
0024 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 823
0027 900000      R     MOV     DPTR,#epNumber
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 120000      E     LCALL   ?C?CCASE
0030 0000        R     DW      ?C0022
0032 01                DB      01H
0033 0000        R     DW      ?C0024
0035 02                DB      02H
0036 0000        R     DW      ?C0022
0038 03                DB      03H
0039 0000        R     DW      ?C0022
003B 04                DB      04H
003C 0000        R     DW      ?C0022
003E 05                DB      05H
003F 0000        R     DW      ?C0022
0041 06                DB      06H
0042 0000        R     DW      ?C0022
0044 07                DB      07H
0045 0000        R     DW      ?C0022
0047 08                DB      08H
0048 0000              DW      00H
004A 0000        R     DW      ?C0022
                                           ; SOURCE LINE # 824
                                           ; SOURCE LINE # 825
                                           ; SOURCE LINE # 830
                                           ; SOURCE LINE # 831
004C         ?C0024:
                                           ; SOURCE LINE # 833
004C 900000      R     MOV     DPTR,#src
004F E0                MOVX    A,@DPTR
0050 FA                MOV     R2,A
0051 A3                INC     DPTR
0052 E0                MOVX    A,@DPTR
0053 FB                MOV     R3,A
0054 900000      R     MOV     DPTR,#dst
0057 E0                MOVX    A,@DPTR
0058 FE                MOV     R6,A
0059 A3                INC     DPTR
005A E0                MOVX    A,@DPTR
005B FF                MOV     R7,A
005C 900000      E     MOV     DPTR,#?_USBFS_ep2_DmaInitialize?BYTE+04H
005F EE                MOV     A,R6
0060 F0                MOVX    @DPTR,A
0061 A3                INC     DPTR
0062 EF                MOV     A,R7
0063 F0                MOVX    @DPTR,A
0064 7D00              MOV     R5,#00H
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 40  

0066 7F00              MOV     R7,#00H
0068 120000      E     LCALL   _USBFS_ep2_DmaInitialize
006B 900000      R     MOV     DPTR,#epNumber
006E E0                MOVX    A,@DPTR
006F FE                MOV     R6,A
0070 7400        R     MOV     A,#LOW USBFS_DmaChan
0072 2E                ADD     A,R6
0073 F582              MOV     DPL,A
0075 E4                CLR     A
0076 3400        R     ADDC    A,#HIGH USBFS_DmaChan
0078 F583              MOV     DPH,A
007A EF                MOV     A,R7
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 836
                                           ; SOURCE LINE # 837
                                           ; SOURCE LINE # 842
                                           ; SOURCE LINE # 843
                                           ; SOURCE LINE # 848
                                           ; SOURCE LINE # 849
                                           ; SOURCE LINE # 854
                                           ; SOURCE LINE # 855
                                           ; SOURCE LINE # 860
                                           ; SOURCE LINE # 861
                                           ; SOURCE LINE # 866
                                           ; SOURCE LINE # 867
                                           ; SOURCE LINE # 872
                                           ; SOURCE LINE # 873
                                           ; SOURCE LINE # 875
                                           ; SOURCE LINE # 876
007C         ?C0022:
                                           ; SOURCE LINE # 877
007C 900000      R     MOV     DPTR,#epNumber
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 EF                MOV     A,R7
0082 D3                SETB    C
0083 9400              SUBB    A,#00H
0085 401F              JC      ?C0033
0087 900000      R     MOV     DPTR,#epNumber
008A E0                MOVX    A,@DPTR
008B FF                MOV     R7,A
008C EF                MOV     A,R7
008D C3                CLR     C
008E 9409              SUBB    A,#09H
0090 5014              JNC     ?C0033
                                           ; SOURCE LINE # 878
                                           ; SOURCE LINE # 879
0092 120000      E     LCALL   CyDmaTdAllocate
0095 900000      R     MOV     DPTR,#epNumber
0098 E0                MOVX    A,@DPTR
0099 FE                MOV     R6,A
009A 7400        R     MOV     A,#LOW USBFS_DmaTd
009C 2E                ADD     A,R6
009D F582              MOV     DPL,A
009F E4                CLR     A
00A0 3400        R     ADDC    A,#HIGH USBFS_DmaTd
00A2 F583              MOV     DPH,A
00A4 EF                MOV     A,R7
00A5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 884
                                           ; SOURCE LINE # 885
00A6         ?C0033:
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 41  

00A6 22                RET     
             ; FUNCTION _USBFS_InitEP_DMA (END)

             ; FUNCTION _USBFS_Stop_DMA (BEGIN)
                                           ; SOURCE LINE # 905
0000 900000      R     MOV     DPTR,#epNumber
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 906
                                           ; SOURCE LINE # 908
0005 900000      R     MOV     DPTR,#epNumber
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 9409              SUBB    A,#09H
000E 5007              JNC     ?C0034
0010 900000      R     MOV     DPTR,#epNumber
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 8002              SJMP    ?C0035
0017         ?C0034:
0017 7F01              MOV     R7,#01H
0019         ?C0035:
0019 900000      R     MOV     DPTR,#i
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
001E         ?C0038:
                                           ; SOURCE LINE # 910
                                           ; SOURCE LINE # 911
001E 900000      R     MOV     DPTR,#i
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 7400        R     MOV     A,#LOW USBFS_DmaTd
0025 2F                ADD     A,R7
0026 F582              MOV     DPL,A
0028 E4                CLR     A
0029 3400        R     ADDC    A,#HIGH USBFS_DmaTd
002B F583              MOV     DPH,A
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 64FF              XRL     A,#0FFH
0032 603A              JZ      ?C0039
                                           ; SOURCE LINE # 912
                                           ; SOURCE LINE # 913
0034 900000      R     MOV     DPTR,#i
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 7400        R     MOV     A,#LOW USBFS_DmaChan
003B 2F                ADD     A,R7
003C F582              MOV     DPL,A
003E E4                CLR     A
003F 3400        R     ADDC    A,#HIGH USBFS_DmaChan
0041 F583              MOV     DPH,A
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 120000      E     LCALL   _?CyDmaChDisable
                                           ; SOURCE LINE # 914
0048 900000      R     MOV     DPTR,#i
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 42  

004D 7400        R     MOV     A,#LOW USBFS_DmaTd
004F 2F                ADD     A,R7
0050 F582              MOV     DPL,A
0052 E4                CLR     A
0053 3400        R     ADDC    A,#HIGH USBFS_DmaTd
0055 F583              MOV     DPH,A
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 120000      E     LCALL   _CyDmaTdFree
                                           ; SOURCE LINE # 915
005C 900000      R     MOV     DPTR,#i
005F E0                MOVX    A,@DPTR
0060 FF                MOV     R7,A
0061 7400        R     MOV     A,#LOW USBFS_DmaTd
0063 2F                ADD     A,R7
0064 F582              MOV     DPL,A
0066 E4                CLR     A
0067 3400        R     ADDC    A,#HIGH USBFS_DmaTd
0069 F583              MOV     DPH,A
006B 74FF              MOV     A,#0FFH
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 916
006E         ?C0039:
                                           ; SOURCE LINE # 924
006E 900000      R     MOV     DPTR,#i
0071 E0                MOVX    A,@DPTR
0072 04                INC     A
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 925
0074 900000      R     MOV     DPTR,#i
0077 E0                MOVX    A,@DPTR
0078 FF                MOV     R7,A
0079 EF                MOV     A,R7
007A C3                CLR     C
007B 9409              SUBB    A,#09H
007D 500A              JNC     ?C0041
007F 900000      R     MOV     DPTR,#epNumber
0082 E0                MOVX    A,@DPTR
0083 FF                MOV     R7,A
0084 EF                MOV     A,R7
0085 6409              XRL     A,#09H
0087 6095              JZ      ?C0038
                                           ; SOURCE LINE # 926
0089         ?C0041:
0089 22                RET     
             ; FUNCTION _USBFS_Stop_DMA (END)

             ; FUNCTION _USBFS_LoadInEP (BEGIN)
                                           ; SOURCE LINE # 1009
0000 900000      R     MOV     DPTR,#epNumber
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#pData
0008 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 1011
                                           ; SOURCE LINE # 1018
000B 900000      R     MOV     DPTR,#epNumber
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 D3                SETB    C
0012 9400              SUBB    A,#00H
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 43  

0014 5003              JNC     $ + 5H
0016 020000      R     LJMP    ?C0047
0019 900000      R     MOV     DPTR,#epNumber
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E EF                MOV     A,R7
001F C3                CLR     C
0020 9409              SUBB    A,#09H
0022 4003              JC      $ + 5H
0024 020000      R     LJMP    ?C0047
                                           ; SOURCE LINE # 1019
                                           ; SOURCE LINE # 1020
0027 900000      R     MOV     DPTR,#epNumber
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C 7E00              MOV     R6,#00H
002E EF                MOV     A,R7
002F 24FF              ADD     A,#0FFH
0031 FF                MOV     R7,A
0032 EE                MOV     A,R6
0033 34FF              ADDC    A,#0FFH
0035 FE                MOV     R6,A
0036 EF                MOV     A,R7
0037 C4                SWAP    A
0038 F8                MOV     R0,A
0039 540F              ANL     A,#0FH
003B C8                XCH     A,R0
003C 68                XRL     A,R0
003D FF                MOV     R7,A
003E EE                MOV     A,R6
003F C4                SWAP    A
0040 54F0              ANL     A,#0F0H
0042 48                ORL     A,R0
0043 FE                MOV     R6,A
0044 900000      R     MOV     DPTR,#ri
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1021
0049 900000      R     MOV     DPTR,#ri
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 7E00              MOV     R6,#00H
0050 EF                MOV     A,R7
0051 2488              ADD     A,#088H
0053 FF                MOV     R7,A
0054 EE                MOV     A,R6
0055 3460              ADDC    A,#060H
0057 FE                MOV     R6,A
0058 900000      R     MOV     DPTR,#p
005B EE                MOV     A,R6
005C F0                MOVX    @DPTR,A
005D A3                INC     DPTR
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1025
0060 900000      R     MOV     DPTR,#epNumber
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 EF                MOV     A,R7
0066 75F00B            MOV     B,#0BH
0069 A4                MUL     AB
006A 2400        E     ADD     A,#LOW USBFS_EP+06H
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 44  

006C F582              MOV     DPL,A
006E E4                CLR     A
006F 3400        E     ADDC    A,#HIGH USBFS_EP+06H
0071 F583              MOV     DPH,A
0073 E0                MOVX    A,@DPTR
0074 FE                MOV     R6,A
0075 A3                INC     DPTR
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
0078 C3                CLR     C
0079 E4                CLR     A
007A 9F                SUBB    A,R7
007B FF                MOV     R7,A
007C 7402              MOV     A,#02H
007E 9E                SUBB    A,R6
007F FE                MOV     R6,A
0080 900000      R     MOV     DPTR,#length
0083 E0                MOVX    A,@DPTR
0084 FC                MOV     R4,A
0085 A3                INC     DPTR
0086 E0                MOVX    A,@DPTR
0087 FD                MOV     R5,A
0088 D3                SETB    C
0089 ED                MOV     A,R5
008A 9F                SUBB    A,R7
008B EC                MOV     A,R4
008C 9E                SUBB    A,R6
008D 4028              JC      ?C0043
                                           ; SOURCE LINE # 1026
                                           ; SOURCE LINE # 1027
008F 900000      R     MOV     DPTR,#epNumber
0092 E0                MOVX    A,@DPTR
0093 FF                MOV     R7,A
0094 EF                MOV     A,R7
0095 75F00B            MOV     B,#0BH
0098 A4                MUL     AB
0099 2400        E     ADD     A,#LOW USBFS_EP+06H
009B F582              MOV     DPL,A
009D E4                CLR     A
009E 3400        E     ADDC    A,#HIGH USBFS_EP+06H
00A0 F583              MOV     DPH,A
00A2 E0                MOVX    A,@DPTR
00A3 FE                MOV     R6,A
00A4 A3                INC     DPTR
00A5 E0                MOVX    A,@DPTR
00A6 FF                MOV     R7,A
00A7 C3                CLR     C
00A8 E4                CLR     A
00A9 9F                SUBB    A,R7
00AA FF                MOV     R7,A
00AB 7402              MOV     A,#02H
00AD 9E                SUBB    A,R6
00AE FE                MOV     R6,A
00AF 900000      R     MOV     DPTR,#length
00B2 EE                MOV     A,R6
00B3 F0                MOVX    @DPTR,A
00B4 A3                INC     DPTR
00B5 EF                MOV     A,R7
00B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1028
00B7         ?C0043:
                                           ; SOURCE LINE # 1033
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 45  

00B7 900000      R     MOV     DPTR,#length
00BA E0                MOVX    A,@DPTR
00BB FE                MOV     R6,A
00BC A3                INC     DPTR
00BD E0                MOVX    A,@DPTR
00BE FF                MOV     R7,A
00BF EE                MOV     A,R6
00C0 FF                MOV     R7,A
00C1 7E00              MOV     R6,#00H
00C3 900000      R     MOV     DPTR,#epNumber
00C6 E0                MOVX    A,@DPTR
00C7 FE                MOV     R6,A
00C8 EE                MOV     A,R6
00C9 75F00B            MOV     B,#0BH
00CC A4                MUL     AB
00CD 2400        E     ADD     A,#LOW USBFS_EP+03H
00CF F582              MOV     DPL,A
00D1 E4                CLR     A
00D2 3400        E     ADDC    A,#HIGH USBFS_EP+03H
00D4 F583              MOV     DPH,A
00D6 E0                MOVX    A,@DPTR
00D7 FE                MOV     R6,A
00D8 EF                MOV     A,R7
00D9 4E                ORL     A,R6
00DA FF                MOV     R7,A
00DB 900000      R     MOV     DPTR,#ri
00DE E0                MOVX    A,@DPTR
00DF FE                MOV     R6,A
00E0 EE                MOV     A,R6
00E1 FD                MOV     R5,A
00E2 7C00              MOV     R4,#00H
00E4 ED                MOV     A,R5
00E5 240C              ADD     A,#0CH
00E7 FD                MOV     R5,A
00E8 EC                MOV     A,R4
00E9 3460              ADDC    A,#060H
00EB FC                MOV     R4,A
00EC 8D82              MOV     DPL,R5
00EE 8C83              MOV     DPH,R4
00F0 EF                MOV     A,R7
00F1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1034
00F2 900000      R     MOV     DPTR,#length
00F5 E0                MOVX    A,@DPTR
00F6 FE                MOV     R6,A
00F7 A3                INC     DPTR
00F8 E0                MOVX    A,@DPTR
00F9 FF                MOV     R7,A
00FA EF                MOV     A,R7
00FB 54FF              ANL     A,#0FFH
00FD FF                MOV     R7,A
00FE 900000      R     MOV     DPTR,#ri
0101 E0                MOVX    A,@DPTR
0102 FE                MOV     R6,A
0103 EE                MOV     A,R6
0104 FD                MOV     R5,A
0105 7C00              MOV     R4,#00H
0107 ED                MOV     A,R5
0108 240D              ADD     A,#0DH
010A FD                MOV     R5,A
010B EC                MOV     A,R4
010C 3460              ADDC    A,#060H
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 46  

010E FC                MOV     R4,A
010F 8D82              MOV     DPL,R5
0111 8C83              MOV     DPH,R4
0113 EF                MOV     A,R7
0114 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1050
0115 900000      R     MOV     DPTR,#epNumber
0118 E0                MOVX    A,@DPTR
0119 FF                MOV     R7,A
011A 7400        R     MOV     A,#LOW USBFS_DmaTd
011C 2F                ADD     A,R7
011D F582              MOV     DPL,A
011F E4                CLR     A
0120 3400        R     ADDC    A,#HIGH USBFS_DmaTd
0122 F583              MOV     DPH,A
0124 E0                MOVX    A,@DPTR
0125 FF                MOV     R7,A
0126 EF                MOV     A,R7
0127 B4FF0E            CJNE    A,#0FFH,?C0044
                                           ; SOURCE LINE # 1051
                                           ; SOURCE LINE # 1052
012A 900000      R     MOV     DPTR,#epNumber
012D E0                MOVX    A,@DPTR
012E FF                MOV     R7,A
012F 900000      R     MOV     DPTR,#pData
0132 120000      E     LCALL   ?C?PLDXDATA
0135 120000      R     LCALL   _USBFS_InitEP_DMA
                                           ; SOURCE LINE # 1053
0138         ?C0044:
                                           ; SOURCE LINE # 1057
0138 900000      R     MOV     DPTR,#epNumber
013B E0                MOVX    A,@DPTR
013C FF                MOV     R7,A
013D EF                MOV     A,R7
013E 75F00B            MOV     B,#0BH
0141 A4                MUL     AB
0142 2400        E     ADD     A,#LOW USBFS_EP+01H
0144 F582              MOV     DPL,A
0146 E4                CLR     A
0147 3400        E     ADDC    A,#HIGH USBFS_EP+01H
0149 F583              MOV     DPH,A
014B E4                CLR     A
014C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1058
014D 7B00              MOV     R3,#00H
014F 7A00              MOV     R2,#00H
0151 7900              MOV     R1,#00H
0153 C003              PUSH    AR3
0155 C002              PUSH    AR2
0157 C001              PUSH    AR1
0159 900000      R     MOV     DPTR,#pData
015C 120000      E     LCALL   ?C?PLDXDATA
015F D082              POP     DPL
0161 D083              POP     DPH
0163 D0E0              POP     ACC
0165 6B                XRL     A,R3
0166 7008              JNZ     ?C0065
0168 E9                MOV     A,R1
0169 6582              XRL     A,DPL
016B 7003              JNZ     ?C0065
016D EA                MOV     A,R2
016E 6583              XRL     A,DPH
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 47  

0170         ?C0065:
0170 7003              JNZ     $ + 5H
0172 020000      R     LJMP    ?C0045
0175 900000      R     MOV     DPTR,#length
0178 E0                MOVX    A,@DPTR
0179 FE                MOV     R6,A
017A A3                INC     DPTR
017B E0                MOVX    A,@DPTR
017C FF                MOV     R7,A
017D D3                SETB    C
017E EF                MOV     A,R7
017F 9400              SUBB    A,#00H
0181 EE                MOV     A,R6
0182 9400              SUBB    A,#00H
0184 5003              JNC     $ + 5H
0186 020000      R     LJMP    ?C0045
                                           ; SOURCE LINE # 1059
                                           ; SOURCE LINE # 1061
0189 900000      R     MOV     DPTR,#epNumber
018C E0                MOVX    A,@DPTR
018D FF                MOV     R7,A
018E 7400        R     MOV     A,#LOW USBFS_DmaChan
0190 2F                ADD     A,R7
0191 F582              MOV     DPL,A
0193 E4                CLR     A
0194 3400        R     ADDC    A,#HIGH USBFS_DmaChan
0196 F583              MOV     DPH,A
0198 E0                MOVX    A,@DPTR
0199 FF                MOV     R7,A
019A 120000      E     LCALL   _?CyDmaChDisable
                                           ; SOURCE LINE # 1062
019D 900000      R     MOV     DPTR,#epNumber
01A0 E0                MOVX    A,@DPTR
01A1 FF                MOV     R7,A
01A2 7400        R     MOV     A,#LOW USBFS_DmaTd
01A4 2F                ADD     A,R7
01A5 F582              MOV     DPL,A
01A7 E4                CLR     A
01A8 3400        R     ADDC    A,#HIGH USBFS_DmaTd
01AA F583              MOV     DPH,A
01AC E0                MOVX    A,@DPTR
01AD FF                MOV     R7,A
01AE 900000      R     MOV     DPTR,#length
01B1 E0                MOVX    A,@DPTR
01B2 FC                MOV     R4,A
01B3 A3                INC     DPTR
01B4 E0                MOVX    A,@DPTR
01B5 FD                MOV     R5,A
01B6 900000      E     MOV     DPTR,#?_CyDmaTdSetConfiguration?BYTE+04H
01B9 7411              MOV     A,#011H
01BB F0                MOVX    @DPTR,A
01BC 7BFE              MOV     R3,#0FEH
01BE 120000      E     LCALL   _CyDmaTdSetConfiguration
                                           ; SOURCE LINE # 1064
01C1 900000      R     MOV     DPTR,#epNumber
01C4 E0                MOVX    A,@DPTR
01C5 FF                MOV     R7,A
01C6 7400        R     MOV     A,#LOW USBFS_DmaTd
01C8 2F                ADD     A,R7
01C9 F582              MOV     DPL,A
01CB E4                CLR     A
01CC 3400        R     ADDC    A,#HIGH USBFS_DmaTd
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 48  

01CE F583              MOV     DPH,A
01D0 E0                MOVX    A,@DPTR
01D1 FF                MOV     R7,A
01D2 C007              PUSH    AR7
01D4 900000      R     MOV     DPTR,#pData
01D7 120000      E     LCALL   ?C?PLDXDATA
01DA AF01              MOV     R7,AR1
01DC AE02              MOV     R6,AR2
01DE AD03              MOV     R5,AR3
01E0 7C00              MOV     R4,#00H
01E2 EF                MOV     A,R7
01E3 54FF              ANL     A,#0FFH
01E5 FF                MOV     R7,A
01E6 EE                MOV     A,R6
01E7 54FF              ANL     A,#0FFH
01E9 FE                MOV     R6,A
01EA ED                MOV     A,R5
01EB 5400              ANL     A,#00H
01ED FD                MOV     R5,A
01EE EC                MOV     A,R4
01EF 5400              ANL     A,#00H
01F1 FC                MOV     R4,A
01F2 AD07              MOV     R5,AR7
01F4 AC06              MOV     R4,AR6
01F6 C004              PUSH    AR4
01F8 C005              PUSH    AR5
01FA 900000      R     MOV     DPTR,#p
01FD E0                MOVX    A,@DPTR
01FE FE                MOV     R6,A
01FF A3                INC     DPTR
0200 E0                MOVX    A,@DPTR
0201 FF                MOV     R7,A
0202 E4                CLR     A
0203 FC                MOV     R4,A
0204 FD                MOV     R5,A
0205 EF                MOV     A,R7
0206 54FF              ANL     A,#0FFH
0208 FF                MOV     R7,A
0209 EE                MOV     A,R6
020A 54FF              ANL     A,#0FFH
020C FE                MOV     R6,A
020D ED                MOV     A,R5
020E 5400              ANL     A,#00H
0210 FD                MOV     R5,A
0211 EC                MOV     A,R4
0212 5400              ANL     A,#00H
0214 FC                MOV     R4,A
0215 AB07              MOV     R3,AR7
0217 AA06              MOV     R2,AR6
0219 D005              POP     AR5
021B D004              POP     AR4
021D D007              POP     AR7
021F 120000      E     LCALL   _CyDmaTdSetAddress
                                           ; SOURCE LINE # 1066
0222 900000      R     MOV     DPTR,#epNumber
0225 E0                MOVX    A,@DPTR
0226 FF                MOV     R7,A
0227 7400        R     MOV     A,#LOW USBFS_DmaChan
0229 2F                ADD     A,R7
022A F582              MOV     DPL,A
022C E4                CLR     A
022D 3400        R     ADDC    A,#HIGH USBFS_DmaChan
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 49  

022F F583              MOV     DPH,A
0231 E0                MOVX    A,@DPTR
0232 FF                MOV     R7,A
0233 900000      R     MOV     DPTR,#epNumber
0236 E0                MOVX    A,@DPTR
0237 FE                MOV     R6,A
0238 7400        R     MOV     A,#LOW USBFS_DmaTd
023A 2E                ADD     A,R6
023B F582              MOV     DPL,A
023D E4                CLR     A
023E 3400        R     ADDC    A,#HIGH USBFS_DmaTd
0240 F583              MOV     DPH,A
0242 E0                MOVX    A,@DPTR
0243 FD                MOV     R5,A
0244 120000      E     LCALL   _CyDmaChSetInitialTd
                                           ; SOURCE LINE # 1067
0247 900000      R     MOV     DPTR,#epNumber
024A E0                MOVX    A,@DPTR
024B FF                MOV     R7,A
024C 7400        R     MOV     A,#LOW USBFS_DmaChan
024E 2F                ADD     A,R7
024F F582              MOV     DPL,A
0251 E4                CLR     A
0252 3400        R     ADDC    A,#HIGH USBFS_DmaChan
0254 F583              MOV     DPH,A
0256 E0                MOVX    A,@DPTR
0257 FF                MOV     R7,A
0258 7D01              MOV     R5,#01H
025A 120000      E     LCALL   _CyDmaChEnable
                                           ; SOURCE LINE # 1069
025D 900000      R     MOV     DPTR,#ri
0260 E0                MOVX    A,@DPTR
0261 FF                MOV     R7,A
0262 7E00              MOV     R6,#00H
0264 EF                MOV     A,R7
0265 2480              ADD     A,#080H
0267 FF                MOV     R7,A
0268 EE                MOV     A,R6
0269 3460              ADDC    A,#060H
026B FE                MOV     R6,A
026C 8F82              MOV     DPL,R7
026E 8E83              MOV     DPH,R6
0270 E0                MOVX    A,@DPTR
0271 FF                MOV     R7,A
0272 EF                MOV     A,R7
0273 4402              ORL     A,#02H
0275 FF                MOV     R7,A
0276 EF                MOV     A,R7
0277 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1070
0278 900000      R     MOV     DPTR,#ri
027B E0                MOVX    A,@DPTR
027C FF                MOV     R7,A
027D 7E00              MOV     R6,#00H
027F EF                MOV     A,R7
0280 2480              ADD     A,#080H
0282 FF                MOV     R7,A
0283 EE                MOV     A,R6
0284 3460              ADDC    A,#060H
0286 FE                MOV     R6,A
0287 8F82              MOV     DPL,R7
0289 8E83              MOV     DPH,R6
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 50  

028B E0                MOVX    A,@DPTR
028C FF                MOV     R7,A
028D EF                MOV     A,R7
028E 54FD              ANL     A,#0FDH
0290 FF                MOV     R7,A
0291 EF                MOV     A,R7
0292 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1072
0293 22                RET     
0294         ?C0045:
                                           ; SOURCE LINE # 1074
                                           ; SOURCE LINE # 1076
0294 900000      R     MOV     DPTR,#epNumber
0297 E0                MOVX    A,@DPTR
0298 FF                MOV     R7,A
0299 EF                MOV     A,R7
029A 75F00B            MOV     B,#0BH
029D A4                MUL     AB
029E 2400        E     ADD     A,#LOW USBFS_EP+05H
02A0 F582              MOV     DPL,A
02A2 E4                CLR     A
02A3 3400        E     ADDC    A,#HIGH USBFS_EP+05H
02A5 F583              MOV     DPH,A
02A7 E0                MOVX    A,@DPTR
02A8 FF                MOV     R7,A
02A9 900000      R     MOV     DPTR,#ri
02AC E0                MOVX    A,@DPTR
02AD FE                MOV     R6,A
02AE EE                MOV     A,R6
02AF FD                MOV     R5,A
02B0 7C00              MOV     R4,#00H
02B2 ED                MOV     A,R5
02B3 240E              ADD     A,#0EH
02B5 FD                MOV     R5,A
02B6 EC                MOV     A,R4
02B7 3460              ADDC    A,#060H
02B9 FC                MOV     R4,A
02BA 8D82              MOV     DPL,R5
02BC 8C83              MOV     DPH,R4
02BE EF                MOV     A,R7
02BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1077
                                           ; SOURCE LINE # 1151
                                           ; SOURCE LINE # 1152
02C0         ?C0047:
02C0 22                RET     
             ; FUNCTION _USBFS_LoadInEP (END)

             ; FUNCTION _USBFS_ReadOutEP (BEGIN)
                                           ; SOURCE LINE # 1180
0000 900000      R     MOV     DPTR,#epNumber
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#pData
0008 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 1182
                                           ; SOURCE LINE # 1192
000B 900000      R     MOV     DPTR,#epNumber
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 D3                SETB    C
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 51  

0012 9400              SUBB    A,#00H
0014 5003              JNC     $ + 5H
0016 020000      R     LJMP    ?C0048
0019 900000      R     MOV     DPTR,#epNumber
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E EF                MOV     A,R7
001F C3                CLR     C
0020 9409              SUBB    A,#09H
0022 4003              JC      $ + 5H
0024 020000      R     LJMP    ?C0048
0027 7B00              MOV     R3,#00H
0029 7A00              MOV     R2,#00H
002B 7900              MOV     R1,#00H
002D C003              PUSH    AR3
002F C002              PUSH    AR2
0031 C001              PUSH    AR1
0033 900000      R     MOV     DPTR,#pData
0036 120000      E     LCALL   ?C?PLDXDATA
0039 D082              POP     DPL
003B D083              POP     DPH
003D D0E0              POP     ACC
003F 6B                XRL     A,R3
0040 7008              JNZ     ?C0066
0042 E9                MOV     A,R1
0043 6582              XRL     A,DPL
0045 7003              JNZ     ?C0066
0047 EA                MOV     A,R2
0048 6583              XRL     A,DPH
004A         ?C0066:
004A 7003              JNZ     $ + 5H
004C 020000      R     LJMP    ?C0048
                                           ; SOURCE LINE # 1193
                                           ; SOURCE LINE # 1194
004F 900000      R     MOV     DPTR,#epNumber
0052 E0                MOVX    A,@DPTR
0053 FF                MOV     R7,A
0054 7E00              MOV     R6,#00H
0056 EF                MOV     A,R7
0057 24FF              ADD     A,#0FFH
0059 FF                MOV     R7,A
005A EE                MOV     A,R6
005B 34FF              ADDC    A,#0FFH
005D FE                MOV     R6,A
005E EF                MOV     A,R7
005F C4                SWAP    A
0060 F8                MOV     R0,A
0061 540F              ANL     A,#0FH
0063 C8                XCH     A,R0
0064 68                XRL     A,R0
0065 FF                MOV     R7,A
0066 EE                MOV     A,R6
0067 C4                SWAP    A
0068 54F0              ANL     A,#0F0H
006A 48                ORL     A,R0
006B FE                MOV     R6,A
006C 900000      R     MOV     DPTR,#ri
006F EF                MOV     A,R7
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1195
0071 900000      R     MOV     DPTR,#ri
0074 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 52  

0075 FF                MOV     R7,A
0076 7E00              MOV     R6,#00H
0078 EF                MOV     A,R7
0079 2488              ADD     A,#088H
007B FF                MOV     R7,A
007C EE                MOV     A,R6
007D 3460              ADDC    A,#060H
007F FE                MOV     R6,A
0080 900000      R     MOV     DPTR,#p
0083 EE                MOV     A,R6
0084 F0                MOVX    @DPTR,A
0085 A3                INC     DPTR
0086 EF                MOV     A,R7
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1199
0088 900000      R     MOV     DPTR,#epNumber
008B E0                MOVX    A,@DPTR
008C FF                MOV     R7,A
008D 120000      R     LCALL   _USBFS_GetEPCount
0090 900000      R     MOV     DPTR,#xferCount
0093 EE                MOV     A,R6
0094 F0                MOVX    @DPTR,A
0095 A3                INC     DPTR
0096 EF                MOV     A,R7
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1200
0098 900000      R     MOV     DPTR,#xferCount
009B E0                MOVX    A,@DPTR
009C FE                MOV     R6,A
009D A3                INC     DPTR
009E E0                MOVX    A,@DPTR
009F FF                MOV     R7,A
00A0 900000      R     MOV     DPTR,#length
00A3 E0                MOVX    A,@DPTR
00A4 FC                MOV     R4,A
00A5 A3                INC     DPTR
00A6 E0                MOVX    A,@DPTR
00A7 FD                MOV     R5,A
00A8 D3                SETB    C
00A9 ED                MOV     A,R5
00AA 9F                SUBB    A,R7
00AB EC                MOV     A,R4
00AC 9E                SUBB    A,R6
00AD 4010              JC      ?C0049
                                           ; SOURCE LINE # 1201
                                           ; SOURCE LINE # 1202
00AF 900000      R     MOV     DPTR,#xferCount
00B2 E0                MOVX    A,@DPTR
00B3 FE                MOV     R6,A
00B4 A3                INC     DPTR
00B5 E0                MOVX    A,@DPTR
00B6 FF                MOV     R7,A
00B7 900000      R     MOV     DPTR,#length
00BA EE                MOV     A,R6
00BB F0                MOVX    @DPTR,A
00BC A3                INC     DPTR
00BD EF                MOV     A,R7
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1203
00BF         ?C0049:
                                           ; SOURCE LINE # 1217
00BF 900000      R     MOV     DPTR,#epNumber
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 53  

00C2 E0                MOVX    A,@DPTR
00C3 FF                MOV     R7,A
00C4 7400        R     MOV     A,#LOW USBFS_DmaTd
00C6 2F                ADD     A,R7
00C7 F582              MOV     DPL,A
00C9 E4                CLR     A
00CA 3400        R     ADDC    A,#HIGH USBFS_DmaTd
00CC F583              MOV     DPH,A
00CE E0                MOVX    A,@DPTR
00CF FF                MOV     R7,A
00D0 EF                MOV     A,R7
00D1 B4FF0E            CJNE    A,#0FFH,?C0050
                                           ; SOURCE LINE # 1218
                                           ; SOURCE LINE # 1219
00D4 900000      R     MOV     DPTR,#epNumber
00D7 E0                MOVX    A,@DPTR
00D8 FF                MOV     R7,A
00D9 900000      R     MOV     DPTR,#pData
00DC 120000      E     LCALL   ?C?PLDXDATA
00DF 120000      R     LCALL   _USBFS_InitEP_DMA
                                           ; SOURCE LINE # 1220
00E2         ?C0050:
                                           ; SOURCE LINE # 1226
00E2 900000      R     MOV     DPTR,#epNumber
00E5 E0                MOVX    A,@DPTR
00E6 FF                MOV     R7,A
00E7 7400        R     MOV     A,#LOW USBFS_DmaChan
00E9 2F                ADD     A,R7
00EA F582              MOV     DPL,A
00EC E4                CLR     A
00ED 3400        R     ADDC    A,#HIGH USBFS_DmaChan
00EF F583              MOV     DPH,A
00F1 E0                MOVX    A,@DPTR
00F2 FF                MOV     R7,A
00F3 120000      E     LCALL   _?CyDmaChDisable
                                           ; SOURCE LINE # 1227
00F6 900000      R     MOV     DPTR,#epNumber
00F9 E0                MOVX    A,@DPTR
00FA FF                MOV     R7,A
00FB 7400        R     MOV     A,#LOW USBFS_DmaTd
00FD 2F                ADD     A,R7
00FE F582              MOV     DPL,A
0100 E4                CLR     A
0101 3400        R     ADDC    A,#HIGH USBFS_DmaTd
0103 F583              MOV     DPH,A
0105 E0                MOVX    A,@DPTR
0106 FF                MOV     R7,A
0107 900000      R     MOV     DPTR,#length
010A E0                MOVX    A,@DPTR
010B FC                MOV     R4,A
010C A3                INC     DPTR
010D E0                MOVX    A,@DPTR
010E FD                MOV     R5,A
010F 900000      E     MOV     DPTR,#?_CyDmaTdSetConfiguration?BYTE+04H
0112 7412              MOV     A,#012H
0114 F0                MOVX    @DPTR,A
0115 7BFE              MOV     R3,#0FEH
0117 120000      E     LCALL   _CyDmaTdSetConfiguration
                                           ; SOURCE LINE # 1229
011A 900000      R     MOV     DPTR,#epNumber
011D E0                MOVX    A,@DPTR
011E FF                MOV     R7,A
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 54  

011F 7400        R     MOV     A,#LOW USBFS_DmaTd
0121 2F                ADD     A,R7
0122 F582              MOV     DPL,A
0124 E4                CLR     A
0125 3400        R     ADDC    A,#HIGH USBFS_DmaTd
0127 F583              MOV     DPH,A
0129 E0                MOVX    A,@DPTR
012A FF                MOV     R7,A
012B C007              PUSH    AR7
012D 900000      R     MOV     DPTR,#p
0130 E0                MOVX    A,@DPTR
0131 FE                MOV     R6,A
0132 A3                INC     DPTR
0133 E0                MOVX    A,@DPTR
0134 FF                MOV     R7,A
0135 E4                CLR     A
0136 FC                MOV     R4,A
0137 FD                MOV     R5,A
0138 EF                MOV     A,R7
0139 54FF              ANL     A,#0FFH
013B FF                MOV     R7,A
013C EE                MOV     A,R6
013D 54FF              ANL     A,#0FFH
013F FE                MOV     R6,A
0140 ED                MOV     A,R5
0141 5400              ANL     A,#00H
0143 FD                MOV     R5,A
0144 EC                MOV     A,R4
0145 5400              ANL     A,#00H
0147 FC                MOV     R4,A
0148 AD07              MOV     R5,AR7
014A AC06              MOV     R4,AR6
014C C004              PUSH    AR4
014E C005              PUSH    AR5
0150 900000      R     MOV     DPTR,#pData
0153 120000      E     LCALL   ?C?PLDXDATA
0156 AF01              MOV     R7,AR1
0158 AE02              MOV     R6,AR2
015A AD03              MOV     R5,AR3
015C 7C00              MOV     R4,#00H
015E EF                MOV     A,R7
015F 54FF              ANL     A,#0FFH
0161 FF                MOV     R7,A
0162 EE                MOV     A,R6
0163 54FF              ANL     A,#0FFH
0165 FE                MOV     R6,A
0166 ED                MOV     A,R5
0167 5400              ANL     A,#00H
0169 FD                MOV     R5,A
016A EC                MOV     A,R4
016B 5400              ANL     A,#00H
016D FC                MOV     R4,A
016E AB07              MOV     R3,AR7
0170 AA06              MOV     R2,AR6
0172 D005              POP     AR5
0174 D004              POP     AR4
0176 D007              POP     AR7
0178 120000      E     LCALL   _CyDmaTdSetAddress
                                           ; SOURCE LINE # 1231
017B 900000      R     MOV     DPTR,#epNumber
017E E0                MOVX    A,@DPTR
017F FF                MOV     R7,A
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 55  

0180 7400        R     MOV     A,#LOW USBFS_DmaChan
0182 2F                ADD     A,R7
0183 F582              MOV     DPL,A
0185 E4                CLR     A
0186 3400        R     ADDC    A,#HIGH USBFS_DmaChan
0188 F583              MOV     DPH,A
018A E0                MOVX    A,@DPTR
018B FF                MOV     R7,A
018C 900000      R     MOV     DPTR,#epNumber
018F E0                MOVX    A,@DPTR
0190 FE                MOV     R6,A
0191 7400        R     MOV     A,#LOW USBFS_DmaTd
0193 2E                ADD     A,R6
0194 F582              MOV     DPL,A
0196 E4                CLR     A
0197 3400        R     ADDC    A,#HIGH USBFS_DmaTd
0199 F583              MOV     DPH,A
019B E0                MOVX    A,@DPTR
019C FD                MOV     R5,A
019D 120000      E     LCALL   _CyDmaChSetInitialTd
                                           ; SOURCE LINE # 1232
01A0 900000      R     MOV     DPTR,#epNumber
01A3 E0                MOVX    A,@DPTR
01A4 FF                MOV     R7,A
01A5 7400        R     MOV     A,#LOW USBFS_DmaChan
01A7 2F                ADD     A,R7
01A8 F582              MOV     DPL,A
01AA E4                CLR     A
01AB 3400        R     ADDC    A,#HIGH USBFS_DmaChan
01AD F583              MOV     DPH,A
01AF E0                MOVX    A,@DPTR
01B0 FF                MOV     R7,A
01B1 7D01              MOV     R5,#01H
01B3 120000      E     LCALL   _CyDmaChEnable
                                           ; SOURCE LINE # 1235
01B6 900000      R     MOV     DPTR,#ri
01B9 E0                MOVX    A,@DPTR
01BA FF                MOV     R7,A
01BB 7E00              MOV     R6,#00H
01BD EF                MOV     A,R7
01BE 2480              ADD     A,#080H
01C0 FF                MOV     R7,A
01C1 EE                MOV     A,R6
01C2 3460              ADDC    A,#060H
01C4 FE                MOV     R6,A
01C5 8F82              MOV     DPL,R7
01C7 8E83              MOV     DPH,R6
01C9 E0                MOVX    A,@DPTR
01CA FF                MOV     R7,A
01CB EF                MOV     A,R7
01CC 4402              ORL     A,#02H
01CE FF                MOV     R7,A
01CF EF                MOV     A,R7
01D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1236
01D1 900000      R     MOV     DPTR,#ri
01D4 E0                MOVX    A,@DPTR
01D5 FF                MOV     R7,A
01D6 7E00              MOV     R6,#00H
01D8 EF                MOV     A,R7
01D9 2480              ADD     A,#080H
01DB FF                MOV     R7,A
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 56  

01DC EE                MOV     A,R6
01DD 3460              ADDC    A,#060H
01DF FE                MOV     R6,A
01E0 8F82              MOV     DPL,R7
01E2 8E83              MOV     DPH,R6
01E4 E0                MOVX    A,@DPTR
01E5 FF                MOV     R7,A
01E6 EF                MOV     A,R7
01E7 54FD              ANL     A,#0FDH
01E9 FF                MOV     R7,A
01EA EF                MOV     A,R7
01EB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1255
01EC 8008              SJMP    ?C0051
01EE         ?C0048:
                                           ; SOURCE LINE # 1257
                                           ; SOURCE LINE # 1258
01EE 900000      R     MOV     DPTR,#length
01F1 E4                CLR     A
01F2 F0                MOVX    @DPTR,A
01F3 A3                INC     DPTR
01F4 E4                CLR     A
01F5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1259
01F6         ?C0051:
                                           ; SOURCE LINE # 1261
01F6 900000      R     MOV     DPTR,#length
01F9 E0                MOVX    A,@DPTR
01FA FE                MOV     R6,A
01FB A3                INC     DPTR
01FC E0                MOVX    A,@DPTR
01FD FF                MOV     R7,A
                                           ; SOURCE LINE # 1262
01FE         ?C0052:
01FE 22                RET     
             ; FUNCTION _USBFS_ReadOutEP (END)

             ; FUNCTION _USBFS_EnableOutEP (BEGIN)
                                           ; SOURCE LINE # 1287
0000 900000      R     MOV     DPTR,#epNumber
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1288
                                           ; SOURCE LINE # 1291
0005 900000      R     MOV     DPTR,#epNumber
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B D3                SETB    C
000C 9400              SUBB    A,#00H
000E 406E              JC      ?C0054
0010 900000      R     MOV     DPTR,#epNumber
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 C3                CLR     C
0017 9409              SUBB    A,#09H
0019 5063              JNC     ?C0054
                                           ; SOURCE LINE # 1292
                                           ; SOURCE LINE # 1293
001B 900000      R     MOV     DPTR,#epNumber
001E E0                MOVX    A,@DPTR
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 57  

001F FF                MOV     R7,A
0020 7E00              MOV     R6,#00H
0022 EF                MOV     A,R7
0023 24FF              ADD     A,#0FFH
0025 FF                MOV     R7,A
0026 EE                MOV     A,R6
0027 34FF              ADDC    A,#0FFH
0029 FE                MOV     R6,A
002A EF                MOV     A,R7
002B C4                SWAP    A
002C F8                MOV     R0,A
002D 540F              ANL     A,#0FH
002F C8                XCH     A,R0
0030 68                XRL     A,R0
0031 FF                MOV     R7,A
0032 EE                MOV     A,R6
0033 C4                SWAP    A
0034 54F0              ANL     A,#0F0H
0036 48                ORL     A,R0
0037 FE                MOV     R6,A
0038 900000      R     MOV     DPTR,#ri
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1294
003D 900000      R     MOV     DPTR,#epNumber
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 EF                MOV     A,R7
0043 75F00B            MOV     B,#0BH
0046 A4                MUL     AB
0047 2400        E     ADD     A,#LOW USBFS_EP+01H
0049 F582              MOV     DPL,A
004B E4                CLR     A
004C 3400        E     ADDC    A,#HIGH USBFS_EP+01H
004E F583              MOV     DPH,A
0050 E4                CLR     A
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1296
0052 900000      R     MOV     DPTR,#epNumber
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
0057 EF                MOV     A,R7
0058 75F00B            MOV     B,#0BH
005B A4                MUL     AB
005C 2400        E     ADD     A,#LOW USBFS_EP+05H
005E F582              MOV     DPL,A
0060 E4                CLR     A
0061 3400        E     ADDC    A,#HIGH USBFS_EP+05H
0063 F583              MOV     DPH,A
0065 E0                MOVX    A,@DPTR
0066 FF                MOV     R7,A
0067 900000      R     MOV     DPTR,#ri
006A E0                MOVX    A,@DPTR
006B FE                MOV     R6,A
006C EE                MOV     A,R6
006D FD                MOV     R5,A
006E 7C00              MOV     R4,#00H
0070 ED                MOV     A,R5
0071 240E              ADD     A,#0EH
0073 FD                MOV     R5,A
0074 EC                MOV     A,R4
0075 3460              ADDC    A,#060H
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 58  

0077 FC                MOV     R4,A
0078 8D82              MOV     DPL,R5
007A 8C83              MOV     DPH,R4
007C EF                MOV     A,R7
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1297
                                           ; SOURCE LINE # 1298
007E         ?C0054:
007E 22                RET     
             ; FUNCTION _USBFS_EnableOutEP (END)

             ; FUNCTION _USBFS_DisableOutEP (BEGIN)
                                           ; SOURCE LINE # 1317
0000 900000      R     MOV     DPTR,#epNumber
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1318
                                           ; SOURCE LINE # 1321
0005 900000      R     MOV     DPTR,#epNumber
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B D3                SETB    C
000C 9400              SUBB    A,#00H
000E 4043              JC      ?C0056
0010 900000      R     MOV     DPTR,#epNumber
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 C3                CLR     C
0017 9409              SUBB    A,#09H
0019 5038              JNC     ?C0056
                                           ; SOURCE LINE # 1322
                                           ; SOURCE LINE # 1323
001B 900000      R     MOV     DPTR,#epNumber
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 7E00              MOV     R6,#00H
0022 EF                MOV     A,R7
0023 24FF              ADD     A,#0FFH
0025 FF                MOV     R7,A
0026 EE                MOV     A,R6
0027 34FF              ADDC    A,#0FFH
0029 FE                MOV     R6,A
002A EF                MOV     A,R7
002B C4                SWAP    A
002C F8                MOV     R0,A
002D 540F              ANL     A,#0FH
002F C8                XCH     A,R0
0030 68                XRL     A,R0
0031 FF                MOV     R7,A
0032 EE                MOV     A,R6
0033 C4                SWAP    A
0034 54F0              ANL     A,#0F0H
0036 48                ORL     A,R0
0037 FE                MOV     R6,A
0038 900000      R     MOV     DPTR,#ri
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1325
003D 900000      R     MOV     DPTR,#ri
0040 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 59  

0041 FF                MOV     R7,A
0042 7E00              MOV     R6,#00H
0044 EF                MOV     A,R7
0045 240E              ADD     A,#0EH
0047 FF                MOV     R7,A
0048 EE                MOV     A,R6
0049 3460              ADDC    A,#060H
004B FE                MOV     R6,A
004C 8F82              MOV     DPL,R7
004E 8E83              MOV     DPH,R6
0050 7408              MOV     A,#08H
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1326
                                           ; SOURCE LINE # 1327
0053         ?C0056:
0053 22                RET     
             ; FUNCTION _USBFS_DisableOutEP (END)

             ; FUNCTION _USBFS_Force (BEGIN)
                                           ; SOURCE LINE # 1348
0000 900000      R     MOV     DPTR,#bState
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1349
                                           ; SOURCE LINE # 1350
0005 900000      R     MOV     DPTR,#bState
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906010            MOV     DPTR,#06010H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1351
000F 22                RET     
             ; FUNCTION _USBFS_Force (END)

             ; FUNCTION _USBFS_GetEPAckState (BEGIN)
                                           ; SOURCE LINE # 1369
0000 900000      R     MOV     DPTR,#epNumber
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1370
                                           ; SOURCE LINE # 1372
0005 900000      R     MOV     DPTR,#cr
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1374
000A 900000      R     MOV     DPTR,#epNumber
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 D3                SETB    C
0011 9400              SUBB    A,#00H
0013 404B              JC      ?C0058
0015 900000      R     MOV     DPTR,#epNumber
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B C3                CLR     C
001C 9409              SUBB    A,#09H
001E 5040              JNC     ?C0058
                                           ; SOURCE LINE # 1375
                                           ; SOURCE LINE # 1376
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 60  

0020 900000      R     MOV     DPTR,#epNumber
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025 7E00              MOV     R6,#00H
0027 EF                MOV     A,R7
0028 24FF              ADD     A,#0FFH
002A FF                MOV     R7,A
002B EE                MOV     A,R6
002C 34FF              ADDC    A,#0FFH
002E FE                MOV     R6,A
002F EF                MOV     A,R7
0030 C4                SWAP    A
0031 F8                MOV     R0,A
0032 540F              ANL     A,#0FH
0034 C8                XCH     A,R0
0035 68                XRL     A,R0
0036 FF                MOV     R7,A
0037 EE                MOV     A,R6
0038 C4                SWAP    A
0039 54F0              ANL     A,#0F0H
003B 48                ORL     A,R0
003C FE                MOV     R6,A
003D 900000      R     MOV     DPTR,#ri
0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1377
0042 900000      R     MOV     DPTR,#ri
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 7E00              MOV     R6,#00H
0049 EF                MOV     A,R7
004A 240E              ADD     A,#0EH
004C FF                MOV     R7,A
004D EE                MOV     A,R6
004E 3460              ADDC    A,#060H
0050 FE                MOV     R6,A
0051 8F82              MOV     DPL,R7
0053 8E83              MOV     DPH,R6
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
0057 EF                MOV     A,R7
0058 5410              ANL     A,#010H
005A FF                MOV     R7,A
005B 900000      R     MOV     DPTR,#cr
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1378
0060         ?C0058:
                                           ; SOURCE LINE # 1380
0060 900000      R     MOV     DPTR,#cr
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
                                           ; SOURCE LINE # 1381
0065         ?C0059:
0065 22                RET     
             ; FUNCTION _USBFS_GetEPAckState (END)

             ; FUNCTION _USBFS_SetPowerStatus (BEGIN)
                                           ; SOURCE LINE # 1406
0000 900000      R     MOV     DPTR,#powerStatus
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 61  

                                           ; SOURCE LINE # 1407
                                           ; SOURCE LINE # 1408
0005 900000      R     MOV     DPTR,#powerStatus
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 600F              JZ      ?C0060
                                           ; SOURCE LINE # 1409
                                           ; SOURCE LINE # 1410
000D 900000      E     MOV     DPTR,#USBFS_deviceStatus
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 EF                MOV     A,R7
0013 4401              ORL     A,#01H
0015 FF                MOV     R7,A
0016 900000      E     MOV     DPTR,#USBFS_deviceStatus
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1411
001B 22                RET     
001C         ?C0060:
                                           ; SOURCE LINE # 1413
                                           ; SOURCE LINE # 1414
001C 900000      E     MOV     DPTR,#USBFS_deviceStatus
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 54FE              ANL     A,#0FEH
0024 FF                MOV     R7,A
0025 900000      E     MOV     DPTR,#USBFS_deviceStatus
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1415
                                           ; SOURCE LINE # 1416
002A         ?C0062:
002A 22                RET     
             ; FUNCTION _USBFS_SetPowerStatus (END)

             ; FUNCTION USBFS_RWUEnabled (BEGIN)
                                           ; SOURCE LINE # 1461
                                           ; SOURCE LINE # 1462
                                           ; SOURCE LINE # 1463
0000 900000      R     MOV     DPTR,#result
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1464
0005 900000      E     MOV     DPTR,#USBFS_deviceStatus
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5402              ANL     A,#02H
000D FF                MOV     R7,A
000E 7E00              MOV     R6,#00H
0010 EF                MOV     A,R7
0011 4E                ORL     A,R6
0012 6006              JZ      ?C0063
                                           ; SOURCE LINE # 1465
                                           ; SOURCE LINE # 1466
0014 900000      R     MOV     DPTR,#result
0017 7401              MOV     A,#01H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1467
C51 COMPILER V9.51   USBFS                                                                 05/19/2017 11:21:13 PAGE 62  

001A         ?C0063:
                                           ; SOURCE LINE # 1469
001A 900000      R     MOV     DPTR,#result
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
                                           ; SOURCE LINE # 1470
001F         ?C0064:
001F 22                RET     
             ; FUNCTION USBFS_RWUEnabled (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2900    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     19      55
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
