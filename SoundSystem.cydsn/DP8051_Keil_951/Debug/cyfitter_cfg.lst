C51 COMPILER V9.51   CYFITTER_CFG                                                          05/19/2017 11:21:13 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) 
                    -PR(.\DP8051_Keil_951\Debug/cyfitter_cfg.lst) CD OT(2,SIZE) OJ(.\DP8051_Keil_951\Debug\cyfitter_cfg.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: cyfitter_cfg.c
   3          * 
   4          * PSoC Creator  4.0 Update 1
   5          *
   6          * Description:
   7          * This file contains device initialization code.
   8          * Except for the user defined sections in CyClockStartupError(), this file should not be modified.
   9          * This file is automatically generated by PSoC Creator.
  10          *
  11          ********************************************************************************
  12          * Copyright (c) 2007-2016 Cypress Semiconductor.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          ********************************************************************************/
  17          
  18          #include <string.h>
  19          #include "cytypes.h"
  20          #include "cydevice_trm.h"
  21          #include "cyfitter.h"
  22          #include "CyLib.h"
  23          #include "cyfitter_cfg.h"
  24          
  25          #define CY_NEED_CYCLOCKSTARTUPERROR 1
  26          
  27          
  28          #if defined(__C51__) || defined(__CX51__)
  29                  #define CYPACKED
  30                  #define CYPACKED_ATTR
  31                  #define CYALIGNED
  32                  
  33              #define CY_CFG_UNUSED
  34                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  35          
  36          
  37          
  38                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  39                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  40                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  41          #else
                      #error Unsupported toolchain
              #endif
  44          
  45          
  46          
  47          
  48          /* Clock startup error codes                                                   */
  49          #define CYCLOCKSTART_NO_ERROR    0u
  50          #define CYCLOCKSTART_XTAL_ERROR  1u
  51          #define CYCLOCKSTART_32KHZ_ERROR 2u
  52          #define CYCLOCKSTART_PLL_ERROR   3u
  53          
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/19/2017 11:21:13 PAGE 2   

  54          
  55          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
  56          /*******************************************************************************
  57          * Function Name: CyClockStartupError
  58          ********************************************************************************
  59          * Summary:
  60          *  If an error is encountered during clock configuration (crystal startup error,
  61          *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
  62          *  the customer, this function will stop in an infinite loop.
  63          *
  64          * Parameters:
  65          *   void
  66          *
  67          * Return:
  68          *   void
  69          *
  70          *******************************************************************************/
  71          CY_CFG_UNUSED
  72          static void CyClockStartupError(uint8 errorCode);
  73          CY_CFG_UNUSED
  74          static void CyClockStartupError(uint8 errorCode)
  75          {
  76   1          /* To remove the compiler warning if errorCode not used.                */
  77   1          errorCode = errorCode;
  78   1      
  79   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  80   1          /* we will end up here to allow the customer to implement something to  */
  81   1          /* deal with the clock condition.                                       */
  82   1      
  83   1      #ifdef CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK
                      CY_CFG_Clock_Startup_ErrorCallback();
              #else
  86   1              /*  If not using CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK, place your clock startup code here. */
  87   1          /* `#START CyClockStartupError` */
  88   1      
  89   1      
  90   1      
  91   1          /* `#END` */
  92   1      
  93   1          /* If nothing else, stop here since the clocks have not started         */
  94   1          /* correctly.                                                           */
  95   1          while(1) {}
  96   1      #endif /* CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK */ 
  97   1      }
  98          #endif
  99          
 100          
 101          /*******************************************************************************
 102          * Function Name: ClockSetup
 103          ********************************************************************************
 104          *
 105          * Summary:
 106          *  Performs the initialization of all of the clocks in the device based on the
 107          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 108          *  clocks and setting the necessary dividers to produce the desired frequency. 
 109          *
 110          * Parameters:
 111          *  void
 112          *
 113          * Return:
 114          *  void
 115          *
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/19/2017 11:21:13 PAGE 3   

 116          *******************************************************************************/
 117          static void ClockSetup(void);
 118          static void ClockSetup(void)
 119          {
 120   1              uint32 timeout;
 121   1              uint8 pllLock;
 122   1      
 123   1      
 124   1              /* Configure Digital Clocks based on settings from Clock DWR */
 125   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x02EDu);
 126   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG0_CFG0 + 0x2u), 0x19u);
 127   1      
 128   1              /* Configure ILO based on settings from Clock DWR */
 129   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x06u);
 130   1      
 131   1              /* Configure IMO based on settings from Clock DWR */
 132   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x52u);
 133   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_USB)));
 134   1      
 135   1              /* Configure PLL based on settings from Clock DWR */
 136   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0818u);
 137   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1251u);
 138   1              /* Wait up to 250us for the PLL to lock */
 139   1              pllLock = 0u;
 140   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--)
 141   1              { 
 142   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 143   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 144   2              }
 145   1              /* If we ran out of time the PLL didn't lock so go to the error function */
 146   1              if (timeout == 0u)
 147   1              {
 148   2                      CyClockStartupError(CYCLOCKSTART_PLL_ERROR);
 149   2              }
 150   1      
 151   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 152   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 153   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 154   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 155   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 156   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 157   1      
 158   1              /* Configure USB Clock based on settings from Clock DWR */
 159   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_UCFG), 0x00u);
 160   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 161   1      
 162   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG2) | 0x01u
             -)));
 163   1      }
 164          
 165          
 166          /* Analog API Functions */
 167          
 168          
 169          /*******************************************************************************
 170          * Function Name: AnalogSetDefault
 171          ********************************************************************************
 172          *
 173          * Summary:
 174          *  Sets up the analog portions of the chip to default values based on chip
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/19/2017 11:21:13 PAGE 4   

 175          *  configuration options from the project.
 176          *
 177          * Parameters:
 178          *  void
 179          *
 180          * Return:
 181          *  void
 182          *
 183          *******************************************************************************/
 184          static void AnalogSetDefault(void);
 185          static void AnalogSetDefault(void)
 186          {
 187   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 188   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 189   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 190   1              CY_SET_REG8((void CYXDATA *)CYREG_PRT1_AMUX, 0x80u);
 191   1              CY_SET_REG8((void CYXDATA *)CYREG_DAC1_SW3, 0x01u);
 192   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 193   1      }
 194          
 195          
 196          /*******************************************************************************
 197          * Function Name: SetAnalogRoutingPumps
 198          ********************************************************************************
 199          *
 200          * Summary:
 201          * Enables or disables the analog pumps feeding analog routing switches.
 202          * Intended to be called at startup, based on the Vdda system configuration;
 203          * may be called during operation when the user informs us that the Vdda voltage
 204          * crossed the pump threshold.
 205          *
 206          * Parameters:
 207          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 208          *
 209          * Return:
 210          *  void
 211          *
 212          *******************************************************************************/
 213          void SetAnalogRoutingPumps(uint8 enabled)
 214          {
 215   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 216   1              if (enabled != 0u)
 217   1              {
 218   2                      regValue |= 0x00u;
 219   2              }
 220   1              else
 221   1              {
 222   2                      regValue &= (uint8)~0x00u;
 223   2              }
 224   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 225   1      }
 226          
 227          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 228          
 229          
 230          /*******************************************************************************
 231          * Function Name: cyfitter_cfg
 232          ********************************************************************************
 233          * Summary:
 234          *  This function is called by the start-up code for the selected device. It
 235          *  performs all of the necessary device configuration based on the design
 236          *  settings.  This includes settings from the Design Wide Resources (DWR) such
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/19/2017 11:21:13 PAGE 5   

 237          *  as Clocks and Pins as well as any component configuration that is necessary.
 238          *
 239          * Parameters:  
 240          *   void
 241          *
 242          * Return:
 243          *   void
 244          *
 245          *******************************************************************************/
 246          
 247          void cyfitter_cfg(void)
 248          {
 249   1              /* IOPINS0_8 Address: CYREG_PRT15_DR Size (bytes): 10 */
 250   1              static const uint8 CYCODE BS_IOPINS0_8_VAL[] = {
 251   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0xC0u, 0x00u};
 252   1      
 253   1              /* IOPINS0_1 Address: CYREG_PRT1_DM0 Size (bytes): 8 */
 254   1              static const uint8 CYCODE BS_IOPINS0_1_VAL[] = {
 255   1                      0x00u, 0x0Bu, 0x0Bu, 0x00u, 0x00u, 0x00u, 0x80u, 0x00u};
 256   1      
 257   1              /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
 258   1              static const uint8 CYCODE BS_IOPINS0_2_VAL[] = {
 259   1                      0x00u, 0x7Fu, 0x7Fu, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u};
 260   1      
 261   1      
 262   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 263   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 264   1              /* Setup clocks based on selections from Clock DWR */
 265   1              ClockSetup();
 266   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 267   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 268   1      
 269   1              {
 270   2                      static const uint8 CYCODE cfg_byte_table[] = {
 271   2                              0x0Cu,
 272   2                              0x00u, 0x45u, 0x01u, /* Base address 0x004500 */
 273   2                              /* CYDEV_PICU_INTTYPE_PICU15_BASE */
 274   2                              0x7Eu, 0x02u, 
 275   2                              0x00u, 0x52u, 0x01u, /* Base address 0x005200 */
 276   2                              /* CYDEV_PRTDSI_PRT15_BASE */
 277   2                              0x7Cu, 0x40u, 
 278   2                              0x01u, 0x17u, 0x01u, /* Base address 0x011700 */
 279   2                              /* CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080u */
 280   2                              0xEEu, 0x02u, 
 281   2                              0x01u, 0x19u, 0x01u, /* Base address 0x011900 */
 282   2                              /* CYDEV_UCFG_B1_P4_ROUTE_BASE + 0x00000080u */
 283   2                              0xEEu, 0x02u, 
 284   2                              0x01u, 0x40u, 0x04u, /* Base address 0x014000 */
 285   2                              /* CYDEV_UCFG_DSI0_BASE */
 286   2                              0x36u, 0x40u, 0x3Du, 0x80u, 
 287   2                              /* CYDEV_UCFG_DSI0_BASE + 0x00000080u */
 288   2                              0xCCu, 0x20u, 0xCEu, 0x20u, 
 289   2                              0x01u, 0x41u, 0x02u, /* Base address 0x014100 */
 290   2                              /* CYDEV_UCFG_DSI1_BASE + 0x00000080u */
 291   2                              0xA5u, 0x40u, 0xA6u, 0x40u, 
 292   2                              0x01u, 0x42u, 0x02u, /* Base address 0x014200 */
 293   2                              /* CYDEV_UCFG_DSI2_BASE + 0x00000080u */
 294   2                              0xA5u, 0x40u, 0xA6u, 0x40u, 
 295   2                              0x01u, 0x43u, 0x02u, /* Base address 0x014300 */
 296   2                              /* CYDEV_UCFG_DSI3_BASE + 0x00000080u */
 297   2                              0xA5u, 0x40u, 0xA6u, 0x40u, 
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/19/2017 11:21:13 PAGE 6   

 298   2                              0x01u, 0x47u, 0x02u, /* Base address 0x014700 */
 299   2                              /* CYDEV_UCFG_DSI7_BASE */
 300   2                              0x0Fu, 0x40u, 
 301   2                              /* CYDEV_UCFG_DSI7_BASE + 0x00000080u */
 302   2                              0xC2u, 0x04u, 
 303   2                              0x01u, 0x48u, 0x05u, /* Base address 0x014800 */
 304   2                              /* CYDEV_UCFG_DSI8_BASE */
 305   2                              0x25u, 0x40u, 
 306   2                              /* CYDEV_UCFG_DSI8_BASE + 0x00000080u */
 307   2                              0xA5u, 0x40u, 0xAEu, 0x40u, 0xC8u, 0x20u, 0xEEu, 0x40u, 
 308   2                              0x01u, 0x4Cu, 0x01u, /* Base address 0x014C00 */
 309   2                              /* CYDEV_UCFG_DSI12_BASE + 0x00000080u */
 310   2                              0xAFu, 0x40u, 
 311   2                              0x01u, 0x51u, 0x02u, /* Base address 0x015100 */
 312   2                              /* CYREG_IDMUX_IRQ_CTL0 */
 313   2                              0x00u, 0x09u, 
 314   2                              /* CYREG_IDMUX_DRQ_CTL0 */
 315   2                              0x10u, 0x02u, 
 316   2                      };
 317   2                      /* BYTES: 85 */
 318   2      
 319   2      
 320   2                      CYPACKED typedef struct {
 321   2                              void CYFAR *address;
 322   2                              uint16 size;
 323   2                      } CYPACKED_ATTR cfg_memset_t;
 324   2      
 325   2                      static const cfg_memset_t CYCODE cfg_memset_list [] = {
 326   2                              /* address, size */
 327   2                              {(void CYFAR *)(CYREG_PRT0_DR), 16u},
 328   2                              {(void CYFAR *)(CYREG_PRT3_DR), 64u},
 329   2                              {(void CYFAR *)(CYREG_PRT12_DR), 16u},
 330   2                              {(void CYFAR *)(CYDEV_UCFG_B0_P0_U0_BASE), 4096u},
 331   2                              {(void CYFAR *)(CYDEV_UCFG_B1_P2_U0_BASE), 2048u},
 332   2                              {(void CYFAR *)(CYDEV_UCFG_DSI0_BASE), 2560u},
 333   2                              {(void CYFAR *)(CYDEV_UCFG_DSI12_BASE), 512u},
 334   2                              {(void CYFAR *)(CYREG_BCTL0_MDCLK_EN), 32u},
 335   2                      };
 336   2      
 337   2                      uint8 CYDATA i;
 338   2      
 339   2                      /* Zero out critical memory blocks before beginning configuration */
 340   2                      for (i = 0u; i < (sizeof(cfg_memset_list)/sizeof(cfg_memset_list[0])); i++)
 341   2                      {
 342   3                              const cfg_memset_t CYCODE * CYDATA ms = &cfg_memset_list[i];
 343   3                              CYMEMZERO(ms->address, ms->size);
 344   3                      }
 345   2      
 346   2                      cfg_write_bytes_code(cfg_byte_table);
 347   2      
 348   2                      /* Perform normal device configuration. Order is not critical for these items. */
 349   2                      CYMEMZERO((void CYFAR *)(CYREG_PHUB_CFGMEM0_CFG0), 4u);
 350   2                      CYMEMZERO((void CYFAR *)(CYREG_PHUB_CFGMEM1_CFG0), 4u);
 351   2      
 352   2                      /* Enable digital routing */
 353   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 354   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 355   2      
 356   2                      /* Enable UDB array */
 357   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/19/2017 11:21:13 PAGE 7   

 358   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 359   2              }
 360   1      
 361   1      
 362   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 363   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT15_DR), (const void CYCODE *)(BS_IOPINS0_8_VAL), 10u);
 364   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT1_DM0), (const void CYCODE *)(BS_IOPINS0_1_VAL), 8u);
 365   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT2_DM0), (const void CYCODE *)(BS_IOPINS0_2_VAL), 8u);
 366   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01u);
 367   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 368   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 369   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 370   1              {
 371   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 372   2              }
 373   1      
 374   1              CY_SET_XTND_REG8((void CYFAR *)(CYREG_BCTL0_UDB_TEST_3), 0x40u);
 375   1              CY_SET_XTND_REG8((void CYFAR *)(CYREG_BCTL1_UDB_TEST_3), 0x40u);
 376   1      
 377   1              /* Perform basic analog initialization to defaults */
 378   1              AnalogSetDefault();
 379   1      
 380   1              /* Configure alternate active mode */
 381   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 382   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 383   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/19/2017 11:21:13 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 74
0000 900000      R     MOV     DPTR,#errorCode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 77
0005 900000      R     MOV     DPTR,#errorCode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#errorCode
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
000F         ?C0001:
                                           ; SOURCE LINE # 95
000F 80FE              SJMP    ?C0001
0011 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 125
0000 7B00              MOV     R3,#00H
0002 7A40              MOV     R2,#040H
0004 7980              MOV     R1,#080H
0006 7DED              MOV     R5,#0EDH
0008 7C02              MOV     R4,#02H
000A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 126
000D 904082            MOV     DPTR,#04082H
0010 7419              MOV     A,#019H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 129
0013 904300            MOV     DPTR,#04300H
0016 7406              MOV     A,#06H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 132
0019 904200            MOV     DPTR,#04200H
001C 7452              MOV     A,#052H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 133
001F 7B0C              MOV     R3,#0CH
0021 7A01              MOV     R2,#01H
0023 790F              MOV     R1,#0FH
0025 120000      E     LCALL   _cyread8
0028 9046A1            MOV     DPTR,#046A1H
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
002D 7B00              MOV     R3,#00H
002F 7A42              MOV     R2,#042H
0031 7922              MOV     R1,#022H
0033 7D18              MOV     R5,#018H
0035 7C08              MOV     R4,#08H
0037 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 137
003A 7B00              MOV     R3,#00H
003C 7A42              MOV     R2,#042H
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/19/2017 11:21:13 PAGE 9   

003E 7920              MOV     R1,#020H
0040 7D51              MOV     R5,#051H
0042 7C12              MOV     R4,#012H
0044 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 139
0047 900000      R     MOV     DPTR,#pllLock
004A E4                CLR     A
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 140
004C 7F19              MOV     R7,#019H
004E 7E00              MOV     R6,#00H
0050 7D00              MOV     R5,#00H
0052 7C00              MOV     R4,#00H
0054 900000      R     MOV     DPTR,#timeout
0057 120000      E     LCALL   ?C?LSTXDATA
005A         ?C0004:
005A 900000      R     MOV     DPTR,#timeout
005D 120000      E     LCALL   ?C?LLDXDATA
0060 D3                SETB    C
0061 EF                MOV     A,R7
0062 9400              SUBB    A,#00H
0064 EE                MOV     A,R6
0065 9400              SUBB    A,#00H
0067 404E              JC      ?C0005
0069 900000      R     MOV     DPTR,#pllLock
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
006E EF                MOV     A,R7
006F 6403              XRL     A,#03H
0071 6044              JZ      ?C0005
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
0073 904225            MOV     DPTR,#04225H
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
0078 EF                MOV     A,R7
0079 5401              ANL     A,#01H
007B FF                MOV     R7,A
007C 7E00              MOV     R6,#00H
007E 900000      R     MOV     DPTR,#pllLock
0081 E0                MOVX    A,@DPTR
0082 FE                MOV     R6,A
0083 EE                MOV     A,R6
0084 25E0              ADD     A,ACC
0086 FE                MOV     R6,A
0087 EE                MOV     A,R6
0088 4F                ORL     A,R7
0089 FF                MOV     R7,A
008A EF                MOV     A,R7
008B 5403              ANL     A,#03H
008D FF                MOV     R7,A
008E 900000      R     MOV     DPTR,#pllLock
0091 EF                MOV     A,R7
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 143
0093 7FE0              MOV     R7,#0E0H
0095 7E01              MOV     R6,#01H
0097 7D00              MOV     R5,#00H
0099 7C00              MOV     R4,#00H
009B 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 144
009E 900000      R     MOV     DPTR,#timeout
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/19/2017 11:21:13 PAGE 10  

00A1 120000      E     LCALL   ?C?LLDXDATA
00A4 7BFF              MOV     R3,#0FFH
00A6 7AFF              MOV     R2,#0FFH
00A8 79FF              MOV     R1,#0FFH
00AA 78FF              MOV     R0,#0FFH
00AC 120000      E     LCALL   ?C?LADD
00AF 900000      R     MOV     DPTR,#timeout
00B2 120000      E     LCALL   ?C?LSTXDATA
00B5 80A3              SJMP    ?C0004
00B7         ?C0005:
                                           ; SOURCE LINE # 146
00B7 900000      R     MOV     DPTR,#timeout
00BA 120000      E     LCALL   ?C?LLDXDATA
00BD EF                MOV     A,R7
00BE 4E                ORL     A,R6
00BF 7005              JNZ     ?C0007
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 148
00C1 7F03              MOV     R7,#03H
00C3 120000      R     LCALL   _CyClockStartupError
                                           ; SOURCE LINE # 149
00C6         ?C0007:
                                           ; SOURCE LINE # 152
00C6 7B00              MOV     R3,#00H
00C8 7A40              MOV     R2,#040H
00CA 7904              MOV     R1,#04H
00CC 7D00              MOV     R5,#00H
00CE 7C01              MOV     R4,#01H
00D0 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 153
00D3 904004            MOV     DPTR,#04004H
00D6 7407              MOV     A,#07H
00D8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
00D9 904006            MOV     DPTR,#04006H
00DC E4                CLR     A
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 155
00DE 904008            MOV     DPTR,#04008H
00E1 7448              MOV     A,#048H
00E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 156
00E4 904004            MOV     DPTR,#04004H
00E7 E4                CLR     A
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 159
00E9 904009            MOV     DPTR,#04009H
00EC E4                CLR     A
00ED F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 160
00EE 904001            MOV     DPTR,#04001H
00F1 7402              MOV     A,#02H
00F3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 162
00F4 9043A2            MOV     DPTR,#043A2H
00F7 E0                MOVX    A,@DPTR
00F8 FF                MOV     R7,A
00F9 EF                MOV     A,R7
00FA 4401              ORL     A,#01H
00FC FF                MOV     R7,A
00FD 9043A2            MOV     DPTR,#043A2H
0100 EF                MOV     A,R7
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/19/2017 11:21:13 PAGE 11  

0101 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 163
0102 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 187
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
0009 900000      R     MOV     DPTR,#bg_xover_inl_trim
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 188
000E 900000      R     MOV     DPTR,#bg_xover_inl_trim
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 5407              ANL     A,#07H
0016 FF                MOV     R7,A
0017 90586E            MOV     DPTR,#0586EH
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
001C 900000      R     MOV     DPTR,#bg_xover_inl_trim
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A 90586F            MOV     DPTR,#0586FH
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 190
002F 90511C            MOV     DPTR,#0511CH
0032 7480              MOV     A,#080H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
0035 905A8B            MOV     DPTR,#05A8BH
0038 7401              MOV     A,#01H
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 192
003B 905876            MOV     DPTR,#05876H
003E 7444              MOV     A,#044H
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 193
0041 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 213
0000 900000      R     MOV     DPTR,#enabled
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 214
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/19/2017 11:21:13 PAGE 12  

                                           ; SOURCE LINE # 215
0005 905876            MOV     DPTR,#05876H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#regValue
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 216
000F 900000      R     MOV     DPTR,#enabled
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0010
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
0017 900000      R     MOV     DPTR,#regValue
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4400              ORL     A,#00H
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#regValue
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 219
0025 800E              SJMP    ?C0011
0027         ?C0010:
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 222
0027 900000      R     MOV     DPTR,#regValue
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54FF              ANL     A,#0FFH
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#regValue
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 223
0035         ?C0011:
                                           ; SOURCE LINE # 224
0035 900000      R     MOV     DPTR,#regValue
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 905876            MOV     DPTR,#05876H
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 225
003F 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 263
0000 904800            MOV     DPTR,#04800H
0003 74F1              MOV     A,#0F1H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 265
0006 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 267
0009 7B00              MOV     R3,#00H
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/19/2017 11:21:13 PAGE 13  

000B 7A46              MOV     R2,#046H
000D 79E8              MOV     R1,#0E8H
000F 120000      E     LCALL   _cyread8
0012 EF                MOV     A,R7
0013 4405              ORL     A,#05H
0015 FD                MOV     R5,A
0016 7B00              MOV     R3,#00H
0018 7A46              MOV     R2,#046H
001A 79E8              MOV     R1,#0E8H
001C 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 269
                                           ; SOURCE LINE # 340
001F 750000      R     MOV     i,#00H
0022         ?C0013:
0022 E500        R     MOV     A,i
0024 C3                CLR     C
0025 9408              SUBB    A,#08H
0027 503A              JNC     ?C0014
                                           ; SOURCE LINE # 341
                                           ; SOURCE LINE # 342
0029 AF00        R     MOV     R7,i
002B EF                MOV     A,R7
002C 75F005            MOV     B,#05H
002F A4                MUL     AB
0030 2400        R     ADD     A,#LOW cfg_memset_list
0032 F582              MOV     DPL,A
0034 E4                CLR     A
0035 3400        R     ADDC    A,#HIGH cfg_memset_list
0037 F583              MOV     DPH,A
0039 AF82              MOV     R7,DPL
003B AE83              MOV     R6,DPH
003D 8E00        R     MOV     ms,R6
003F 8F00        R     MOV     ms+01H,R7
                                           ; SOURCE LINE # 343
0041 AE00        R     MOV     R6,ms
0043 AF00        R     MOV     R7,ms+01H
0045 8F82              MOV     DPL,R7
0047 8E83              MOV     DPH,R6
0049 120000      E     LCALL   ?C?PLDCODE
004C AE00        R     MOV     R6,ms
004E AF00        R     MOV     R7,ms+01H
0050 8F82              MOV     DPL,R7
0052 8E83              MOV     DPH,R6
0054 7403              MOV     A,#03H
0056 93                MOVC    A,@A+DPTR
0057 FC                MOV     R4,A
0058 7404              MOV     A,#04H
005A 93                MOVC    A,@A+DPTR
005B FD                MOV     R5,A
005C 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 344
005F 0500        R     INC     i
0061 80BF              SJMP    ?C0013
0063         ?C0014:
                                           ; SOURCE LINE # 346
0063 7E00        R     MOV     R6,#HIGH cfg_byte_table
0065 7F00        R     MOV     R7,#LOW cfg_byte_table
0067 120000      E     LCALL   _cfg_write_bytes_code
                                           ; SOURCE LINE # 349
006A 7B00              MOV     R3,#00H
006C 7A76              MOV     R2,#076H
006E 7900              MOV     R1,#00H
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/19/2017 11:21:13 PAGE 14  

0070 7D04              MOV     R5,#04H
0072 7C00              MOV     R4,#00H
0074 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 350
0077 7B00              MOV     R3,#00H
0079 7A76              MOV     R2,#076H
007B 7908              MOV     R1,#08H
007D 7D04              MOV     R5,#04H
007F 7C00              MOV     R4,#00H
0081 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 353
0084 7B01              MOV     R3,#01H
0086 7A50              MOV     R2,#050H
0088 7903              MOV     R1,#03H
008A 120000      E     LCALL   _cyread8
008D EF                MOV     A,R7
008E 4402              ORL     A,#02H
0090 FD                MOV     R5,A
0091 7B01              MOV     R3,#01H
0093 7A50              MOV     R2,#050H
0095 7903              MOV     R1,#03H
0097 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 354
009A 7B01              MOV     R3,#01H
009C 7A50              MOV     R2,#050H
009E 7913              MOV     R1,#013H
00A0 120000      E     LCALL   _cyread8
00A3 EF                MOV     A,R7
00A4 4402              ORL     A,#02H
00A6 FD                MOV     R5,A
00A7 7B01              MOV     R3,#01H
00A9 7A50              MOV     R2,#050H
00AB 7913              MOV     R1,#013H
00AD 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 357
00B0 9043A0            MOV     DPTR,#043A0H
00B3 E0                MOVX    A,@DPTR
00B4 FF                MOV     R7,A
00B5 EF                MOV     A,R7
00B6 4440              ORL     A,#040H
00B8 FF                MOV     R7,A
00B9 9043A0            MOV     DPTR,#043A0H
00BC EF                MOV     A,R7
00BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 358
00BE 9043C2            MOV     DPTR,#043C2H
00C1 E0                MOVX    A,@DPTR
00C2 FF                MOV     R7,A
00C3 EF                MOV     A,R7
00C4 4410              ORL     A,#010H
00C6 FF                MOV     R7,A
00C7 9043C2            MOV     DPTR,#043C2H
00CA EF                MOV     A,R7
00CB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 363
00CC 7C00        R     MOV     R4,#HIGH BS_IOPINS0_8_VAL
00CE 7D00        R     MOV     R5,#LOW BS_IOPINS0_8_VAL
00D0 7B00              MOV     R3,#00H
00D2 7A51              MOV     R2,#051H
00D4 79F0              MOV     R1,#0F0H
00D6 7F0A              MOV     R7,#0AH
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/19/2017 11:21:13 PAGE 15  

00D8 7E00              MOV     R6,#00H
00DA 120000      E     LCALL   _cyconfigcpycode
                                           ; SOURCE LINE # 364
00DD 7C00        R     MOV     R4,#HIGH BS_IOPINS0_1_VAL
00DF 7D00        R     MOV     R5,#LOW BS_IOPINS0_1_VAL
00E1 7B00              MOV     R3,#00H
00E3 7A51              MOV     R2,#051H
00E5 7912              MOV     R1,#012H
00E7 7F08              MOV     R7,#08H
00E9 7E00              MOV     R6,#00H
00EB 120000      E     LCALL   _cyconfigcpycode
                                           ; SOURCE LINE # 365
00EE 7C00        R     MOV     R4,#HIGH BS_IOPINS0_2_VAL
00F0 7D00        R     MOV     R5,#LOW BS_IOPINS0_2_VAL
00F2 7B00              MOV     R3,#00H
00F4 7A51              MOV     R2,#051H
00F6 7922              MOV     R1,#022H
00F8 7F08              MOV     R7,#08H
00FA 7E00              MOV     R6,#00H
00FC 120000      E     LCALL   _cyconfigcpycode
                                           ; SOURCE LINE # 366
00FF 9044F4            MOV     DPTR,#044F4H
0102 7401              MOV     A,#01H
0104 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 368
0105 904322            MOV     DPTR,#04322H
0108 E0                MOVX    A,@DPTR
0109 FF                MOV     R7,A
010A EF                MOV     A,R7
010B 4408              ORL     A,#08H
010D FF                MOV     R7,A
010E 904322            MOV     DPTR,#04322H
0111 EF                MOV     A,R7
0112 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 369
0113 9046EC            MOV     DPTR,#046ECH
0116 E0                MOVX    A,@DPTR
0117 FF                MOV     R7,A
0118 EF                MOV     A,R7
0119 C3                CLR     C
011A 9405              SUBB    A,#05H
011C 5006              JNC     ?C0016
                                           ; SOURCE LINE # 370
                                           ; SOURCE LINE # 371
011E 904689            MOV     DPTR,#04689H
0121 743A              MOV     A,#03AH
0123 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
0124         ?C0016:
                                           ; SOURCE LINE # 374
0124 7B01              MOV     R3,#01H
0126 7A50              MOV     R2,#050H
0128 7907              MOV     R1,#07H
012A 7D40              MOV     R5,#040H
012C 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 375
012F 7B01              MOV     R3,#01H
0131 7A50              MOV     R2,#050H
0133 7917              MOV     R1,#017H
0135 7D40              MOV     R5,#040H
0137 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 378
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/19/2017 11:21:13 PAGE 16  

013A 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 381
013D 7B00              MOV     R3,#00H
013F 7A43              MOV     R2,#043H
0141 79A0              MOV     R1,#0A0H
0143 C003              PUSH    AR3
0145 C002              PUSH    AR2
0147 C001              PUSH    AR1
0149 7B00              MOV     R3,#00H
014B 7A43              MOV     R2,#043H
014D 79B0              MOV     R1,#0B0H
014F 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0152 120000      E     LCALL   ?C?PSTXDATA
0155 D001              POP     AR1
0157 D002              POP     AR2
0159 D003              POP     AR3
015B 7F0E              MOV     R7,#0EH
015D 7E00              MOV     R6,#00H
015F 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 382
0162 9043B0            MOV     DPTR,#043B0H
0165 E0                MOVX    A,@DPTR
0166 FF                MOV     R7,A
0167 EF                MOV     A,R7
0168 54FD              ANL     A,#0FDH
016A FF                MOV     R7,A
016B EF                MOV     A,R7
016C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 383
016D 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    773    ----
   CONSTANT SIZE    =    151    ----
   XDATA SIZE       =   ----       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
